/********************************************************************************
 *                                                                              *
 * This file is part of IfcOpenShell.                                           *
 *                                                                              *
 * IfcOpenShell is free software: you can redistribute it and/or modify         *
 * it under the terms of the Lesser GNU General Public License as published by  *
 * the Free Software Foundation, either version 3.0 of the License, or          *
 * (at your option) any later version.                                          *
 *                                                                              *
 * IfcOpenShell is distributed in the hope that it will be useful,              *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of               *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                 *
 * Lesser GNU General Public License for more details.                          *
 *                                                                              *
 * You should have received a copy of the Lesser GNU General Public License     *
 * along with this program. If not, see <http://www.gnu.org/licenses/>.         *
 *                                                                              *
 ********************************************************************************/

/********************************************************************************
 *                                                                              *
 * This file has been generated from IFC4x3_RC2.exp. Do not make modifications  *
 * but instead modify the python script that has been used to generate this.    *
 *                                                                              *
 ********************************************************************************/

#include "../ifcparse/IfcSchema.h"
#include "../ifcparse/Ifc4x3_rc3.h"

using namespace IfcParse;

declaration* IFC4X3_RC3_types[1317] = {nullptr};

class IFC4X3_RC3_instance_factory : public IfcParse::instance_factory {
    virtual IfcUtil::IfcBaseClass* operator()(IfcEntityInstanceData* data) const {
        switch(data->type()->index_in_schema()) {
            case 0: return new ::Ifc4x3_rc3::IfcAbsorbedDoseMeasure(data);
            case 1: return new ::Ifc4x3_rc3::IfcAccelerationMeasure(data);
            case 2: return new ::Ifc4x3_rc3::IfcActionRequest(data);
            case 3: return new ::Ifc4x3_rc3::IfcActionRequestTypeEnum(data);
            case 4: return new ::Ifc4x3_rc3::IfcActionSourceTypeEnum(data);
            case 5: return new ::Ifc4x3_rc3::IfcActionTypeEnum(data);
            case 6: return new ::Ifc4x3_rc3::IfcActor(data);
            case 7: return new ::Ifc4x3_rc3::IfcActorRole(data);
            case 9: return new ::Ifc4x3_rc3::IfcActuator(data);
            case 10: return new ::Ifc4x3_rc3::IfcActuatorType(data);
            case 11: return new ::Ifc4x3_rc3::IfcActuatorTypeEnum(data);
            case 12: return new ::Ifc4x3_rc3::IfcAddress(data);
            case 13: return new ::Ifc4x3_rc3::IfcAddressTypeEnum(data);
            case 14: return new ::Ifc4x3_rc3::IfcAdvancedBrep(data);
            case 15: return new ::Ifc4x3_rc3::IfcAdvancedBrepWithVoids(data);
            case 16: return new ::Ifc4x3_rc3::IfcAdvancedFace(data);
            case 17: return new ::Ifc4x3_rc3::IfcAirTerminal(data);
            case 18: return new ::Ifc4x3_rc3::IfcAirTerminalBox(data);
            case 19: return new ::Ifc4x3_rc3::IfcAirTerminalBoxType(data);
            case 20: return new ::Ifc4x3_rc3::IfcAirTerminalBoxTypeEnum(data);
            case 21: return new ::Ifc4x3_rc3::IfcAirTerminalType(data);
            case 22: return new ::Ifc4x3_rc3::IfcAirTerminalTypeEnum(data);
            case 23: return new ::Ifc4x3_rc3::IfcAirToAirHeatRecovery(data);
            case 24: return new ::Ifc4x3_rc3::IfcAirToAirHeatRecoveryType(data);
            case 25: return new ::Ifc4x3_rc3::IfcAirToAirHeatRecoveryTypeEnum(data);
            case 26: return new ::Ifc4x3_rc3::IfcAlarm(data);
            case 27: return new ::Ifc4x3_rc3::IfcAlarmType(data);
            case 28: return new ::Ifc4x3_rc3::IfcAlarmTypeEnum(data);
            case 29: return new ::Ifc4x3_rc3::IfcAlignment(data);
            case 30: return new ::Ifc4x3_rc3::IfcAlignmentCant(data);
            case 31: return new ::Ifc4x3_rc3::IfcAlignmentCantSegment(data);
            case 32: return new ::Ifc4x3_rc3::IfcAlignmentCantSegmentTypeEnum(data);
            case 33: return new ::Ifc4x3_rc3::IfcAlignmentHorizontal(data);
            case 34: return new ::Ifc4x3_rc3::IfcAlignmentHorizontalSegment(data);
            case 35: return new ::Ifc4x3_rc3::IfcAlignmentHorizontalSegmentTypeEnum(data);
            case 36: return new ::Ifc4x3_rc3::IfcAlignmentParameterSegment(data);
            case 37: return new ::Ifc4x3_rc3::IfcAlignmentSegment(data);
            case 38: return new ::Ifc4x3_rc3::IfcAlignmentTypeEnum(data);
            case 39: return new ::Ifc4x3_rc3::IfcAlignmentVertical(data);
            case 40: return new ::Ifc4x3_rc3::IfcAlignmentVerticalSegment(data);
            case 41: return new ::Ifc4x3_rc3::IfcAlignmentVerticalSegmentTypeEnum(data);
            case 42: return new ::Ifc4x3_rc3::IfcAmountOfSubstanceMeasure(data);
            case 43: return new ::Ifc4x3_rc3::IfcAnalysisModelTypeEnum(data);
            case 44: return new ::Ifc4x3_rc3::IfcAnalysisTheoryTypeEnum(data);
            case 45: return new ::Ifc4x3_rc3::IfcAngularVelocityMeasure(data);
            case 46: return new ::Ifc4x3_rc3::IfcAnnotation(data);
            case 47: return new ::Ifc4x3_rc3::IfcAnnotationFillArea(data);
            case 48: return new ::Ifc4x3_rc3::IfcAnnotationTypeEnum(data);
            case 49: return new ::Ifc4x3_rc3::IfcApplication(data);
            case 50: return new ::Ifc4x3_rc3::IfcAppliedValue(data);
            case 52: return new ::Ifc4x3_rc3::IfcApproval(data);
            case 53: return new ::Ifc4x3_rc3::IfcApprovalRelationship(data);
            case 54: return new ::Ifc4x3_rc3::IfcArbitraryClosedProfileDef(data);
            case 55: return new ::Ifc4x3_rc3::IfcArbitraryOpenProfileDef(data);
            case 56: return new ::Ifc4x3_rc3::IfcArbitraryProfileDefWithVoids(data);
            case 57: return new ::Ifc4x3_rc3::IfcArcIndex(data);
            case 58: return new ::Ifc4x3_rc3::IfcAreaDensityMeasure(data);
            case 59: return new ::Ifc4x3_rc3::IfcAreaMeasure(data);
            case 60: return new ::Ifc4x3_rc3::IfcArithmeticOperatorEnum(data);
            case 61: return new ::Ifc4x3_rc3::IfcAssemblyPlaceEnum(data);
            case 62: return new ::Ifc4x3_rc3::IfcAsset(data);
            case 63: return new ::Ifc4x3_rc3::IfcAsymmetricIShapeProfileDef(data);
            case 64: return new ::Ifc4x3_rc3::IfcAudioVisualAppliance(data);
            case 65: return new ::Ifc4x3_rc3::IfcAudioVisualApplianceType(data);
            case 66: return new ::Ifc4x3_rc3::IfcAudioVisualApplianceTypeEnum(data);
            case 67: return new ::Ifc4x3_rc3::IfcAxis1Placement(data);
            case 69: return new ::Ifc4x3_rc3::IfcAxis2Placement2D(data);
            case 70: return new ::Ifc4x3_rc3::IfcAxis2Placement3D(data);
            case 71: return new ::Ifc4x3_rc3::IfcAxis2PlacementLinear(data);
            case 72: return new ::Ifc4x3_rc3::IfcBeam(data);
            case 73: return new ::Ifc4x3_rc3::IfcBeamStandardCase(data);
            case 74: return new ::Ifc4x3_rc3::IfcBeamType(data);
            case 75: return new ::Ifc4x3_rc3::IfcBeamTypeEnum(data);
            case 76: return new ::Ifc4x3_rc3::IfcBearing(data);
            case 77: return new ::Ifc4x3_rc3::IfcBearingType(data);
            case 78: return new ::Ifc4x3_rc3::IfcBearingTypeDisplacementEnum(data);
            case 79: return new ::Ifc4x3_rc3::IfcBearingTypeEnum(data);
            case 80: return new ::Ifc4x3_rc3::IfcBenchmarkEnum(data);
            case 82: return new ::Ifc4x3_rc3::IfcBinary(data);
            case 83: return new ::Ifc4x3_rc3::IfcBlobTexture(data);
            case 84: return new ::Ifc4x3_rc3::IfcBlock(data);
            case 85: return new ::Ifc4x3_rc3::IfcBoiler(data);
            case 86: return new ::Ifc4x3_rc3::IfcBoilerType(data);
            case 87: return new ::Ifc4x3_rc3::IfcBoilerTypeEnum(data);
            case 88: return new ::Ifc4x3_rc3::IfcBoolean(data);
            case 89: return new ::Ifc4x3_rc3::IfcBooleanClippingResult(data);
            case 91: return new ::Ifc4x3_rc3::IfcBooleanOperator(data);
            case 92: return new ::Ifc4x3_rc3::IfcBooleanResult(data);
            case 93: return new ::Ifc4x3_rc3::IfcBorehole(data);
            case 94: return new ::Ifc4x3_rc3::IfcBoundaryCondition(data);
            case 95: return new ::Ifc4x3_rc3::IfcBoundaryCurve(data);
            case 96: return new ::Ifc4x3_rc3::IfcBoundaryEdgeCondition(data);
            case 97: return new ::Ifc4x3_rc3::IfcBoundaryFaceCondition(data);
            case 98: return new ::Ifc4x3_rc3::IfcBoundaryNodeCondition(data);
            case 99: return new ::Ifc4x3_rc3::IfcBoundaryNodeConditionWarping(data);
            case 100: return new ::Ifc4x3_rc3::IfcBoundedCurve(data);
            case 101: return new ::Ifc4x3_rc3::IfcBoundedSurface(data);
            case 102: return new ::Ifc4x3_rc3::IfcBoundingBox(data);
            case 103: return new ::Ifc4x3_rc3::IfcBoxAlignment(data);
            case 104: return new ::Ifc4x3_rc3::IfcBoxedHalfSpace(data);
            case 105: return new ::Ifc4x3_rc3::IfcBridge(data);
            case 106: return new ::Ifc4x3_rc3::IfcBridgePartTypeEnum(data);
            case 107: return new ::Ifc4x3_rc3::IfcBridgeTypeEnum(data);
            case 108: return new ::Ifc4x3_rc3::IfcBSplineCurve(data);
            case 109: return new ::Ifc4x3_rc3::IfcBSplineCurveForm(data);
            case 110: return new ::Ifc4x3_rc3::IfcBSplineCurveWithKnots(data);
            case 111: return new ::Ifc4x3_rc3::IfcBSplineSurface(data);
            case 112: return new ::Ifc4x3_rc3::IfcBSplineSurfaceForm(data);
            case 113: return new ::Ifc4x3_rc3::IfcBSplineSurfaceWithKnots(data);
            case 114: return new ::Ifc4x3_rc3::IfcBuilding(data);
            case 115: return new ::Ifc4x3_rc3::IfcBuildingElementPart(data);
            case 116: return new ::Ifc4x3_rc3::IfcBuildingElementPartType(data);
            case 117: return new ::Ifc4x3_rc3::IfcBuildingElementPartTypeEnum(data);
            case 118: return new ::Ifc4x3_rc3::IfcBuildingElementProxy(data);
            case 119: return new ::Ifc4x3_rc3::IfcBuildingElementProxyType(data);
            case 120: return new ::Ifc4x3_rc3::IfcBuildingElementProxyTypeEnum(data);
            case 121: return new ::Ifc4x3_rc3::IfcBuildingStorey(data);
            case 122: return new ::Ifc4x3_rc3::IfcBuildingSystem(data);
            case 123: return new ::Ifc4x3_rc3::IfcBuildingSystemTypeEnum(data);
            case 124: return new ::Ifc4x3_rc3::IfcBuiltElement(data);
            case 125: return new ::Ifc4x3_rc3::IfcBuiltElementType(data);
            case 126: return new ::Ifc4x3_rc3::IfcBuiltSystem(data);
            case 127: return new ::Ifc4x3_rc3::IfcBuiltSystemTypeEnum(data);
            case 128: return new ::Ifc4x3_rc3::IfcBurner(data);
            case 129: return new ::Ifc4x3_rc3::IfcBurnerType(data);
            case 130: return new ::Ifc4x3_rc3::IfcBurnerTypeEnum(data);
            case 131: return new ::Ifc4x3_rc3::IfcCableCarrierFitting(data);
            case 132: return new ::Ifc4x3_rc3::IfcCableCarrierFittingType(data);
            case 133: return new ::Ifc4x3_rc3::IfcCableCarrierFittingTypeEnum(data);
            case 134: return new ::Ifc4x3_rc3::IfcCableCarrierSegment(data);
            case 135: return new ::Ifc4x3_rc3::IfcCableCarrierSegmentType(data);
            case 136: return new ::Ifc4x3_rc3::IfcCableCarrierSegmentTypeEnum(data);
            case 137: return new ::Ifc4x3_rc3::IfcCableFitting(data);
            case 138: return new ::Ifc4x3_rc3::IfcCableFittingType(data);
            case 139: return new ::Ifc4x3_rc3::IfcCableFittingTypeEnum(data);
            case 140: return new ::Ifc4x3_rc3::IfcCableSegment(data);
            case 141: return new ::Ifc4x3_rc3::IfcCableSegmentType(data);
            case 142: return new ::Ifc4x3_rc3::IfcCableSegmentTypeEnum(data);
            case 143: return new ::Ifc4x3_rc3::IfcCaissonFoundation(data);
            case 144: return new ::Ifc4x3_rc3::IfcCaissonFoundationType(data);
            case 145: return new ::Ifc4x3_rc3::IfcCaissonFoundationTypeEnum(data);
            case 146: return new ::Ifc4x3_rc3::IfcCardinalPointReference(data);
            case 147: return new ::Ifc4x3_rc3::IfcCartesianPoint(data);
            case 148: return new ::Ifc4x3_rc3::IfcCartesianPointList(data);
            case 149: return new ::Ifc4x3_rc3::IfcCartesianPointList2D(data);
            case 150: return new ::Ifc4x3_rc3::IfcCartesianPointList3D(data);
            case 151: return new ::Ifc4x3_rc3::IfcCartesianTransformationOperator(data);
            case 152: return new ::Ifc4x3_rc3::IfcCartesianTransformationOperator2D(data);
            case 153: return new ::Ifc4x3_rc3::IfcCartesianTransformationOperator2DnonUniform(data);
            case 154: return new ::Ifc4x3_rc3::IfcCartesianTransformationOperator3D(data);
            case 155: return new ::Ifc4x3_rc3::IfcCartesianTransformationOperator3DnonUniform(data);
            case 156: return new ::Ifc4x3_rc3::IfcCenterLineProfileDef(data);
            case 157: return new ::Ifc4x3_rc3::IfcChangeActionEnum(data);
            case 158: return new ::Ifc4x3_rc3::IfcChiller(data);
            case 159: return new ::Ifc4x3_rc3::IfcChillerType(data);
            case 160: return new ::Ifc4x3_rc3::IfcChillerTypeEnum(data);
            case 161: return new ::Ifc4x3_rc3::IfcChimney(data);
            case 162: return new ::Ifc4x3_rc3::IfcChimneyType(data);
            case 163: return new ::Ifc4x3_rc3::IfcChimneyTypeEnum(data);
            case 164: return new ::Ifc4x3_rc3::IfcCircle(data);
            case 165: return new ::Ifc4x3_rc3::IfcCircleHollowProfileDef(data);
            case 166: return new ::Ifc4x3_rc3::IfcCircleProfileDef(data);
            case 167: return new ::Ifc4x3_rc3::IfcCivilElement(data);
            case 168: return new ::Ifc4x3_rc3::IfcCivilElementType(data);
            case 169: return new ::Ifc4x3_rc3::IfcClassification(data);
            case 170: return new ::Ifc4x3_rc3::IfcClassificationReference(data);
            case 173: return new ::Ifc4x3_rc3::IfcClosedShell(data);
            case 174: return new ::Ifc4x3_rc3::IfcClothoid(data);
            case 175: return new ::Ifc4x3_rc3::IfcCoil(data);
            case 176: return new ::Ifc4x3_rc3::IfcCoilType(data);
            case 177: return new ::Ifc4x3_rc3::IfcCoilTypeEnum(data);
            case 180: return new ::Ifc4x3_rc3::IfcColourRgb(data);
            case 181: return new ::Ifc4x3_rc3::IfcColourRgbList(data);
            case 182: return new ::Ifc4x3_rc3::IfcColourSpecification(data);
            case 183: return new ::Ifc4x3_rc3::IfcColumn(data);
            case 184: return new ::Ifc4x3_rc3::IfcColumnStandardCase(data);
            case 185: return new ::Ifc4x3_rc3::IfcColumnType(data);
            case 186: return new ::Ifc4x3_rc3::IfcColumnTypeEnum(data);
            case 187: return new ::Ifc4x3_rc3::IfcCommunicationsAppliance(data);
            case 188: return new ::Ifc4x3_rc3::IfcCommunicationsApplianceType(data);
            case 189: return new ::Ifc4x3_rc3::IfcCommunicationsApplianceTypeEnum(data);
            case 190: return new ::Ifc4x3_rc3::IfcComplexNumber(data);
            case 191: return new ::Ifc4x3_rc3::IfcComplexProperty(data);
            case 192: return new ::Ifc4x3_rc3::IfcComplexPropertyTemplate(data);
            case 193: return new ::Ifc4x3_rc3::IfcComplexPropertyTemplateTypeEnum(data);
            case 194: return new ::Ifc4x3_rc3::IfcCompositeCurve(data);
            case 195: return new ::Ifc4x3_rc3::IfcCompositeCurveOnSurface(data);
            case 196: return new ::Ifc4x3_rc3::IfcCompositeCurveSegment(data);
            case 197: return new ::Ifc4x3_rc3::IfcCompositeProfileDef(data);
            case 198: return new ::Ifc4x3_rc3::IfcCompoundPlaneAngleMeasure(data);
            case 199: return new ::Ifc4x3_rc3::IfcCompressor(data);
            case 200: return new ::Ifc4x3_rc3::IfcCompressorType(data);
            case 201: return new ::Ifc4x3_rc3::IfcCompressorTypeEnum(data);
            case 202: return new ::Ifc4x3_rc3::IfcCondenser(data);
            case 203: return new ::Ifc4x3_rc3::IfcCondenserType(data);
            case 204: return new ::Ifc4x3_rc3::IfcCondenserTypeEnum(data);
            case 205: return new ::Ifc4x3_rc3::IfcConic(data);
            case 206: return new ::Ifc4x3_rc3::IfcConnectedFaceSet(data);
            case 207: return new ::Ifc4x3_rc3::IfcConnectionCurveGeometry(data);
            case 208: return new ::Ifc4x3_rc3::IfcConnectionGeometry(data);
            case 209: return new ::Ifc4x3_rc3::IfcConnectionPointEccentricity(data);
            case 210: return new ::Ifc4x3_rc3::IfcConnectionPointGeometry(data);
            case 211: return new ::Ifc4x3_rc3::IfcConnectionSurfaceGeometry(data);
            case 212: return new ::Ifc4x3_rc3::IfcConnectionTypeEnum(data);
            case 213: return new ::Ifc4x3_rc3::IfcConnectionVolumeGeometry(data);
            case 214: return new ::Ifc4x3_rc3::IfcConstraint(data);
            case 215: return new ::Ifc4x3_rc3::IfcConstraintEnum(data);
            case 216: return new ::Ifc4x3_rc3::IfcConstructionEquipmentResource(data);
            case 217: return new ::Ifc4x3_rc3::IfcConstructionEquipmentResourceType(data);
            case 218: return new ::Ifc4x3_rc3::IfcConstructionEquipmentResourceTypeEnum(data);
            case 219: return new ::Ifc4x3_rc3::IfcConstructionMaterialResource(data);
            case 220: return new ::Ifc4x3_rc3::IfcConstructionMaterialResourceType(data);
            case 221: return new ::Ifc4x3_rc3::IfcConstructionMaterialResourceTypeEnum(data);
            case 222: return new ::Ifc4x3_rc3::IfcConstructionProductResource(data);
            case 223: return new ::Ifc4x3_rc3::IfcConstructionProductResourceType(data);
            case 224: return new ::Ifc4x3_rc3::IfcConstructionProductResourceTypeEnum(data);
            case 225: return new ::Ifc4x3_rc3::IfcConstructionResource(data);
            case 226: return new ::Ifc4x3_rc3::IfcConstructionResourceType(data);
            case 227: return new ::Ifc4x3_rc3::IfcContext(data);
            case 228: return new ::Ifc4x3_rc3::IfcContextDependentMeasure(data);
            case 229: return new ::Ifc4x3_rc3::IfcContextDependentUnit(data);
            case 230: return new ::Ifc4x3_rc3::IfcControl(data);
            case 231: return new ::Ifc4x3_rc3::IfcController(data);
            case 232: return new ::Ifc4x3_rc3::IfcControllerType(data);
            case 233: return new ::Ifc4x3_rc3::IfcControllerTypeEnum(data);
            case 234: return new ::Ifc4x3_rc3::IfcConversionBasedUnit(data);
            case 235: return new ::Ifc4x3_rc3::IfcConversionBasedUnitWithOffset(data);
            case 236: return new ::Ifc4x3_rc3::IfcConveyorSegment(data);
            case 237: return new ::Ifc4x3_rc3::IfcConveyorSegmentType(data);
            case 238: return new ::Ifc4x3_rc3::IfcConveyorSegmentTypeEnum(data);
            case 239: return new ::Ifc4x3_rc3::IfcCooledBeam(data);
            case 240: return new ::Ifc4x3_rc3::IfcCooledBeamType(data);
            case 241: return new ::Ifc4x3_rc3::IfcCooledBeamTypeEnum(data);
            case 242: return new ::Ifc4x3_rc3::IfcCoolingTower(data);
            case 243: return new ::Ifc4x3_rc3::IfcCoolingTowerType(data);
            case 244: return new ::Ifc4x3_rc3::IfcCoolingTowerTypeEnum(data);
            case 245: return new ::Ifc4x3_rc3::IfcCoordinateOperation(data);
            case 246: return new ::Ifc4x3_rc3::IfcCoordinateReferenceSystem(data);
            case 248: return new ::Ifc4x3_rc3::IfcCosine(data);
            case 249: return new ::Ifc4x3_rc3::IfcCostItem(data);
            case 250: return new ::Ifc4x3_rc3::IfcCostItemTypeEnum(data);
            case 251: return new ::Ifc4x3_rc3::IfcCostSchedule(data);
            case 252: return new ::Ifc4x3_rc3::IfcCostScheduleTypeEnum(data);
            case 253: return new ::Ifc4x3_rc3::IfcCostValue(data);
            case 254: return new ::Ifc4x3_rc3::IfcCountMeasure(data);
            case 255: return new ::Ifc4x3_rc3::IfcCourse(data);
            case 256: return new ::Ifc4x3_rc3::IfcCourseType(data);
            case 257: return new ::Ifc4x3_rc3::IfcCourseTypeEnum(data);
            case 258: return new ::Ifc4x3_rc3::IfcCovering(data);
            case 259: return new ::Ifc4x3_rc3::IfcCoveringType(data);
            case 260: return new ::Ifc4x3_rc3::IfcCoveringTypeEnum(data);
            case 261: return new ::Ifc4x3_rc3::IfcCrewResource(data);
            case 262: return new ::Ifc4x3_rc3::IfcCrewResourceType(data);
            case 263: return new ::Ifc4x3_rc3::IfcCrewResourceTypeEnum(data);
            case 264: return new ::Ifc4x3_rc3::IfcCsgPrimitive3D(data);
            case 266: return new ::Ifc4x3_rc3::IfcCsgSolid(data);
            case 267: return new ::Ifc4x3_rc3::IfcCShapeProfileDef(data);
            case 268: return new ::Ifc4x3_rc3::IfcCurrencyRelationship(data);
            case 269: return new ::Ifc4x3_rc3::IfcCurtainWall(data);
            case 270: return new ::Ifc4x3_rc3::IfcCurtainWallType(data);
            case 271: return new ::Ifc4x3_rc3::IfcCurtainWallTypeEnum(data);
            case 272: return new ::Ifc4x3_rc3::IfcCurvatureMeasure(data);
            case 273: return new ::Ifc4x3_rc3::IfcCurve(data);
            case 274: return new ::Ifc4x3_rc3::IfcCurveBoundedPlane(data);
            case 275: return new ::Ifc4x3_rc3::IfcCurveBoundedSurface(data);
            case 277: return new ::Ifc4x3_rc3::IfcCurveInterpolationEnum(data);
            case 281: return new ::Ifc4x3_rc3::IfcCurveSegment(data);
            case 282: return new ::Ifc4x3_rc3::IfcCurveStyle(data);
            case 283: return new ::Ifc4x3_rc3::IfcCurveStyleFont(data);
            case 284: return new ::Ifc4x3_rc3::IfcCurveStyleFontAndScaling(data);
            case 285: return new ::Ifc4x3_rc3::IfcCurveStyleFontPattern(data);
            case 287: return new ::Ifc4x3_rc3::IfcCylindricalSurface(data);
            case 288: return new ::Ifc4x3_rc3::IfcDamper(data);
            case 289: return new ::Ifc4x3_rc3::IfcDamperType(data);
            case 290: return new ::Ifc4x3_rc3::IfcDamperTypeEnum(data);
            case 291: return new ::Ifc4x3_rc3::IfcDataOriginEnum(data);
            case 292: return new ::Ifc4x3_rc3::IfcDate(data);
            case 293: return new ::Ifc4x3_rc3::IfcDateTime(data);
            case 294: return new ::Ifc4x3_rc3::IfcDayInMonthNumber(data);
            case 295: return new ::Ifc4x3_rc3::IfcDayInWeekNumber(data);
            case 296: return new ::Ifc4x3_rc3::IfcDeepFoundation(data);
            case 297: return new ::Ifc4x3_rc3::IfcDeepFoundationType(data);
            case 300: return new ::Ifc4x3_rc3::IfcDerivedProfileDef(data);
            case 301: return new ::Ifc4x3_rc3::IfcDerivedUnit(data);
            case 302: return new ::Ifc4x3_rc3::IfcDerivedUnitElement(data);
            case 303: return new ::Ifc4x3_rc3::IfcDerivedUnitEnum(data);
            case 304: return new ::Ifc4x3_rc3::IfcDescriptiveMeasure(data);
            case 305: return new ::Ifc4x3_rc3::IfcDimensionalExponents(data);
            case 306: return new ::Ifc4x3_rc3::IfcDimensionCount(data);
            case 307: return new ::Ifc4x3_rc3::IfcDirection(data);
            case 308: return new ::Ifc4x3_rc3::IfcDirectionSenseEnum(data);
            case 309: return new ::Ifc4x3_rc3::IfcDirectrixCurveSweptAreaSolid(data);
            case 310: return new ::Ifc4x3_rc3::IfcDirectrixDerivedReferenceSweptAreaSolid(data);
            case 311: return new ::Ifc4x3_rc3::IfcDirectrixDistanceSweptAreaSolid(data);
            case 312: return new ::Ifc4x3_rc3::IfcDiscreteAccessory(data);
            case 313: return new ::Ifc4x3_rc3::IfcDiscreteAccessoryType(data);
            case 314: return new ::Ifc4x3_rc3::IfcDiscreteAccessoryTypeEnum(data);
            case 315: return new ::Ifc4x3_rc3::IfcDistributionBoard(data);
            case 316: return new ::Ifc4x3_rc3::IfcDistributionBoardType(data);
            case 317: return new ::Ifc4x3_rc3::IfcDistributionBoardTypeEnum(data);
            case 318: return new ::Ifc4x3_rc3::IfcDistributionChamberElement(data);
            case 319: return new ::Ifc4x3_rc3::IfcDistributionChamberElementType(data);
            case 320: return new ::Ifc4x3_rc3::IfcDistributionChamberElementTypeEnum(data);
            case 321: return new ::Ifc4x3_rc3::IfcDistributionCircuit(data);
            case 322: return new ::Ifc4x3_rc3::IfcDistributionControlElement(data);
            case 323: return new ::Ifc4x3_rc3::IfcDistributionControlElementType(data);
            case 324: return new ::Ifc4x3_rc3::IfcDistributionElement(data);
            case 325: return new ::Ifc4x3_rc3::IfcDistributionElementType(data);
            case 326: return new ::Ifc4x3_rc3::IfcDistributionFlowElement(data);
            case 327: return new ::Ifc4x3_rc3::IfcDistributionFlowElementType(data);
            case 328: return new ::Ifc4x3_rc3::IfcDistributionPort(data);
            case 329: return new ::Ifc4x3_rc3::IfcDistributionPortTypeEnum(data);
            case 330: return new ::Ifc4x3_rc3::IfcDistributionSystem(data);
            case 331: return new ::Ifc4x3_rc3::IfcDistributionSystemEnum(data);
            case 332: return new ::Ifc4x3_rc3::IfcDocumentConfidentialityEnum(data);
            case 333: return new ::Ifc4x3_rc3::IfcDocumentInformation(data);
            case 334: return new ::Ifc4x3_rc3::IfcDocumentInformationRelationship(data);
            case 335: return new ::Ifc4x3_rc3::IfcDocumentReference(data);
            case 337: return new ::Ifc4x3_rc3::IfcDocumentStatusEnum(data);
            case 338: return new ::Ifc4x3_rc3::IfcDoor(data);
            case 339: return new ::Ifc4x3_rc3::IfcDoorLiningProperties(data);
            case 340: return new ::Ifc4x3_rc3::IfcDoorPanelOperationEnum(data);
            case 341: return new ::Ifc4x3_rc3::IfcDoorPanelPositionEnum(data);
            case 342: return new ::Ifc4x3_rc3::IfcDoorPanelProperties(data);
            case 343: return new ::Ifc4x3_rc3::IfcDoorStandardCase(data);
            case 344: return new ::Ifc4x3_rc3::IfcDoorStyle(data);
            case 345: return new ::Ifc4x3_rc3::IfcDoorStyleConstructionEnum(data);
            case 346: return new ::Ifc4x3_rc3::IfcDoorStyleOperationEnum(data);
            case 347: return new ::Ifc4x3_rc3::IfcDoorType(data);
            case 348: return new ::Ifc4x3_rc3::IfcDoorTypeEnum(data);
            case 349: return new ::Ifc4x3_rc3::IfcDoorTypeOperationEnum(data);
            case 350: return new ::Ifc4x3_rc3::IfcDoseEquivalentMeasure(data);
            case 351: return new ::Ifc4x3_rc3::IfcDraughtingPreDefinedColour(data);
            case 352: return new ::Ifc4x3_rc3::IfcDraughtingPreDefinedCurveFont(data);
            case 353: return new ::Ifc4x3_rc3::IfcDuctFitting(data);
            case 354: return new ::Ifc4x3_rc3::IfcDuctFittingType(data);
            case 355: return new ::Ifc4x3_rc3::IfcDuctFittingTypeEnum(data);
            case 356: return new ::Ifc4x3_rc3::IfcDuctSegment(data);
            case 357: return new ::Ifc4x3_rc3::IfcDuctSegmentType(data);
            case 358: return new ::Ifc4x3_rc3::IfcDuctSegmentTypeEnum(data);
            case 359: return new ::Ifc4x3_rc3::IfcDuctSilencer(data);
            case 360: return new ::Ifc4x3_rc3::IfcDuctSilencerType(data);
            case 361: return new ::Ifc4x3_rc3::IfcDuctSilencerTypeEnum(data);
            case 362: return new ::Ifc4x3_rc3::IfcDuration(data);
            case 363: return new ::Ifc4x3_rc3::IfcDynamicViscosityMeasure(data);
            case 364: return new ::Ifc4x3_rc3::IfcEarthworksCut(data);
            case 365: return new ::Ifc4x3_rc3::IfcEarthworksCutTypeEnum(data);
            case 366: return new ::Ifc4x3_rc3::IfcEarthworksElement(data);
            case 367: return new ::Ifc4x3_rc3::IfcEarthworksFill(data);
            case 368: return new ::Ifc4x3_rc3::IfcEarthworksFillTypeEnum(data);
            case 369: return new ::Ifc4x3_rc3::IfcEdge(data);
            case 370: return new ::Ifc4x3_rc3::IfcEdgeCurve(data);
            case 371: return new ::Ifc4x3_rc3::IfcEdgeLoop(data);
            case 372: return new ::Ifc4x3_rc3::IfcElectricAppliance(data);
            case 373: return new ::Ifc4x3_rc3::IfcElectricApplianceType(data);
            case 374: return new ::Ifc4x3_rc3::IfcElectricApplianceTypeEnum(data);
            case 375: return new ::Ifc4x3_rc3::IfcElectricCapacitanceMeasure(data);
            case 376: return new ::Ifc4x3_rc3::IfcElectricChargeMeasure(data);
            case 377: return new ::Ifc4x3_rc3::IfcElectricConductanceMeasure(data);
            case 378: return new ::Ifc4x3_rc3::IfcElectricCurrentMeasure(data);
            case 379: return new ::Ifc4x3_rc3::IfcElectricDistributionBoard(data);
            case 380: return new ::Ifc4x3_rc3::IfcElectricDistributionBoardType(data);
            case 381: return new ::Ifc4x3_rc3::IfcElectricDistributionBoardTypeEnum(data);
            case 382: return new ::Ifc4x3_rc3::IfcElectricFlowStorageDevice(data);
            case 383: return new ::Ifc4x3_rc3::IfcElectricFlowStorageDeviceType(data);
            case 384: return new ::Ifc4x3_rc3::IfcElectricFlowStorageDeviceTypeEnum(data);
            case 385: return new ::Ifc4x3_rc3::IfcElectricFlowTreatmentDevice(data);
            case 386: return new ::Ifc4x3_rc3::IfcElectricFlowTreatmentDeviceType(data);
            case 387: return new ::Ifc4x3_rc3::IfcElectricFlowTreatmentDeviceTypeEnum(data);
            case 388: return new ::Ifc4x3_rc3::IfcElectricGenerator(data);
            case 389: return new ::Ifc4x3_rc3::IfcElectricGeneratorType(data);
            case 390: return new ::Ifc4x3_rc3::IfcElectricGeneratorTypeEnum(data);
            case 391: return new ::Ifc4x3_rc3::IfcElectricMotor(data);
            case 392: return new ::Ifc4x3_rc3::IfcElectricMotorType(data);
            case 393: return new ::Ifc4x3_rc3::IfcElectricMotorTypeEnum(data);
            case 394: return new ::Ifc4x3_rc3::IfcElectricResistanceMeasure(data);
            case 395: return new ::Ifc4x3_rc3::IfcElectricTimeControl(data);
            case 396: return new ::Ifc4x3_rc3::IfcElectricTimeControlType(data);
            case 397: return new ::Ifc4x3_rc3::IfcElectricTimeControlTypeEnum(data);
            case 398: return new ::Ifc4x3_rc3::IfcElectricVoltageMeasure(data);
            case 399: return new ::Ifc4x3_rc3::IfcElement(data);
            case 400: return new ::Ifc4x3_rc3::IfcElementarySurface(data);
            case 401: return new ::Ifc4x3_rc3::IfcElementAssembly(data);
            case 402: return new ::Ifc4x3_rc3::IfcElementAssemblyType(data);
            case 403: return new ::Ifc4x3_rc3::IfcElementAssemblyTypeEnum(data);
            case 404: return new ::Ifc4x3_rc3::IfcElementComponent(data);
            case 405: return new ::Ifc4x3_rc3::IfcElementComponentType(data);
            case 406: return new ::Ifc4x3_rc3::IfcElementCompositionEnum(data);
            case 407: return new ::Ifc4x3_rc3::IfcElementQuantity(data);
            case 408: return new ::Ifc4x3_rc3::IfcElementType(data);
            case 409: return new ::Ifc4x3_rc3::IfcEllipse(data);
            case 410: return new ::Ifc4x3_rc3::IfcEllipseProfileDef(data);
            case 411: return new ::Ifc4x3_rc3::IfcEnergyConversionDevice(data);
            case 412: return new ::Ifc4x3_rc3::IfcEnergyConversionDeviceType(data);
            case 413: return new ::Ifc4x3_rc3::IfcEnergyMeasure(data);
            case 414: return new ::Ifc4x3_rc3::IfcEngine(data);
            case 415: return new ::Ifc4x3_rc3::IfcEngineType(data);
            case 416: return new ::Ifc4x3_rc3::IfcEngineTypeEnum(data);
            case 417: return new ::Ifc4x3_rc3::IfcEvaporativeCooler(data);
            case 418: return new ::Ifc4x3_rc3::IfcEvaporativeCoolerType(data);
            case 419: return new ::Ifc4x3_rc3::IfcEvaporativeCoolerTypeEnum(data);
            case 420: return new ::Ifc4x3_rc3::IfcEvaporator(data);
            case 421: return new ::Ifc4x3_rc3::IfcEvaporatorType(data);
            case 422: return new ::Ifc4x3_rc3::IfcEvaporatorTypeEnum(data);
            case 423: return new ::Ifc4x3_rc3::IfcEvent(data);
            case 424: return new ::Ifc4x3_rc3::IfcEventTime(data);
            case 425: return new ::Ifc4x3_rc3::IfcEventTriggerTypeEnum(data);
            case 426: return new ::Ifc4x3_rc3::IfcEventType(data);
            case 427: return new ::Ifc4x3_rc3::IfcEventTypeEnum(data);
            case 428: return new ::Ifc4x3_rc3::IfcExtendedProperties(data);
            case 429: return new ::Ifc4x3_rc3::IfcExternalInformation(data);
            case 430: return new ::Ifc4x3_rc3::IfcExternallyDefinedHatchStyle(data);
            case 431: return new ::Ifc4x3_rc3::IfcExternallyDefinedSurfaceStyle(data);
            case 432: return new ::Ifc4x3_rc3::IfcExternallyDefinedTextFont(data);
            case 433: return new ::Ifc4x3_rc3::IfcExternalReference(data);
            case 434: return new ::Ifc4x3_rc3::IfcExternalReferenceRelationship(data);
            case 435: return new ::Ifc4x3_rc3::IfcExternalSpatialElement(data);
            case 436: return new ::Ifc4x3_rc3::IfcExternalSpatialElementTypeEnum(data);
            case 437: return new ::Ifc4x3_rc3::IfcExternalSpatialStructureElement(data);
            case 438: return new ::Ifc4x3_rc3::IfcExtrudedAreaSolid(data);
            case 439: return new ::Ifc4x3_rc3::IfcExtrudedAreaSolidTapered(data);
            case 440: return new ::Ifc4x3_rc3::IfcFace(data);
            case 441: return new ::Ifc4x3_rc3::IfcFaceBasedSurfaceModel(data);
            case 442: return new ::Ifc4x3_rc3::IfcFaceBound(data);
            case 443: return new ::Ifc4x3_rc3::IfcFaceOuterBound(data);
            case 444: return new ::Ifc4x3_rc3::IfcFaceSurface(data);
            case 445: return new ::Ifc4x3_rc3::IfcFacetedBrep(data);
            case 446: return new ::Ifc4x3_rc3::IfcFacetedBrepWithVoids(data);
            case 447: return new ::Ifc4x3_rc3::IfcFacility(data);
            case 448: return new ::Ifc4x3_rc3::IfcFacilityPart(data);
            case 449: return new ::Ifc4x3_rc3::IfcFacilityPartCommonTypeEnum(data);
            case 451: return new ::Ifc4x3_rc3::IfcFacilityUsageEnum(data);
            case 452: return new ::Ifc4x3_rc3::IfcFailureConnectionCondition(data);
            case 453: return new ::Ifc4x3_rc3::IfcFan(data);
            case 454: return new ::Ifc4x3_rc3::IfcFanType(data);
            case 455: return new ::Ifc4x3_rc3::IfcFanTypeEnum(data);
            case 456: return new ::Ifc4x3_rc3::IfcFastener(data);
            case 457: return new ::Ifc4x3_rc3::IfcFastenerType(data);
            case 458: return new ::Ifc4x3_rc3::IfcFastenerTypeEnum(data);
            case 459: return new ::Ifc4x3_rc3::IfcFeatureElement(data);
            case 460: return new ::Ifc4x3_rc3::IfcFeatureElementAddition(data);
            case 461: return new ::Ifc4x3_rc3::IfcFeatureElementSubtraction(data);
            case 462: return new ::Ifc4x3_rc3::IfcFillAreaStyle(data);
            case 463: return new ::Ifc4x3_rc3::IfcFillAreaStyleHatching(data);
            case 464: return new ::Ifc4x3_rc3::IfcFillAreaStyleTiles(data);
            case 466: return new ::Ifc4x3_rc3::IfcFilter(data);
            case 467: return new ::Ifc4x3_rc3::IfcFilterType(data);
            case 468: return new ::Ifc4x3_rc3::IfcFilterTypeEnum(data);
            case 469: return new ::Ifc4x3_rc3::IfcFireSuppressionTerminal(data);
            case 470: return new ::Ifc4x3_rc3::IfcFireSuppressionTerminalType(data);
            case 471: return new ::Ifc4x3_rc3::IfcFireSuppressionTerminalTypeEnum(data);
            case 472: return new ::Ifc4x3_rc3::IfcFixedReferenceSweptAreaSolid(data);
            case 473: return new ::Ifc4x3_rc3::IfcFlowController(data);
            case 474: return new ::Ifc4x3_rc3::IfcFlowControllerType(data);
            case 475: return new ::Ifc4x3_rc3::IfcFlowDirectionEnum(data);
            case 476: return new ::Ifc4x3_rc3::IfcFlowFitting(data);
            case 477: return new ::Ifc4x3_rc3::IfcFlowFittingType(data);
            case 478: return new ::Ifc4x3_rc3::IfcFlowInstrument(data);
            case 479: return new ::Ifc4x3_rc3::IfcFlowInstrumentType(data);
            case 480: return new ::Ifc4x3_rc3::IfcFlowInstrumentTypeEnum(data);
            case 481: return new ::Ifc4x3_rc3::IfcFlowMeter(data);
            case 482: return new ::Ifc4x3_rc3::IfcFlowMeterType(data);
            case 483: return new ::Ifc4x3_rc3::IfcFlowMeterTypeEnum(data);
            case 484: return new ::Ifc4x3_rc3::IfcFlowMovingDevice(data);
            case 485: return new ::Ifc4x3_rc3::IfcFlowMovingDeviceType(data);
            case 486: return new ::Ifc4x3_rc3::IfcFlowSegment(data);
            case 487: return new ::Ifc4x3_rc3::IfcFlowSegmentType(data);
            case 488: return new ::Ifc4x3_rc3::IfcFlowStorageDevice(data);
            case 489: return new ::Ifc4x3_rc3::IfcFlowStorageDeviceType(data);
            case 490: return new ::Ifc4x3_rc3::IfcFlowTerminal(data);
            case 491: return new ::Ifc4x3_rc3::IfcFlowTerminalType(data);
            case 492: return new ::Ifc4x3_rc3::IfcFlowTreatmentDevice(data);
            case 493: return new ::Ifc4x3_rc3::IfcFlowTreatmentDeviceType(data);
            case 494: return new ::Ifc4x3_rc3::IfcFontStyle(data);
            case 495: return new ::Ifc4x3_rc3::IfcFontVariant(data);
            case 496: return new ::Ifc4x3_rc3::IfcFontWeight(data);
            case 497: return new ::Ifc4x3_rc3::IfcFooting(data);
            case 498: return new ::Ifc4x3_rc3::IfcFootingType(data);
            case 499: return new ::Ifc4x3_rc3::IfcFootingTypeEnum(data);
            case 500: return new ::Ifc4x3_rc3::IfcForceMeasure(data);
            case 501: return new ::Ifc4x3_rc3::IfcFrequencyMeasure(data);
            case 502: return new ::Ifc4x3_rc3::IfcFurnishingElement(data);
            case 503: return new ::Ifc4x3_rc3::IfcFurnishingElementType(data);
            case 504: return new ::Ifc4x3_rc3::IfcFurniture(data);
            case 505: return new ::Ifc4x3_rc3::IfcFurnitureType(data);
            case 506: return new ::Ifc4x3_rc3::IfcFurnitureTypeEnum(data);
            case 507: return new ::Ifc4x3_rc3::IfcGeographicElement(data);
            case 508: return new ::Ifc4x3_rc3::IfcGeographicElementType(data);
            case 509: return new ::Ifc4x3_rc3::IfcGeographicElementTypeEnum(data);
            case 510: return new ::Ifc4x3_rc3::IfcGeometricCurveSet(data);
            case 511: return new ::Ifc4x3_rc3::IfcGeometricProjectionEnum(data);
            case 512: return new ::Ifc4x3_rc3::IfcGeometricRepresentationContext(data);
            case 513: return new ::Ifc4x3_rc3::IfcGeometricRepresentationItem(data);
            case 514: return new ::Ifc4x3_rc3::IfcGeometricRepresentationSubContext(data);
            case 515: return new ::Ifc4x3_rc3::IfcGeometricSet(data);
            case 517: return new ::Ifc4x3_rc3::IfcGeomodel(data);
            case 518: return new ::Ifc4x3_rc3::IfcGeoslice(data);
            case 519: return new ::Ifc4x3_rc3::IfcGeotechnicalAssembly(data);
            case 520: return new ::Ifc4x3_rc3::IfcGeotechnicalElement(data);
            case 521: return new ::Ifc4x3_rc3::IfcGeotechnicalStratum(data);
            case 522: return new ::Ifc4x3_rc3::IfcGloballyUniqueId(data);
            case 523: return new ::Ifc4x3_rc3::IfcGlobalOrLocalEnum(data);
            case 524: return new ::Ifc4x3_rc3::IfcGradientCurve(data);
            case 525: return new ::Ifc4x3_rc3::IfcGrid(data);
            case 526: return new ::Ifc4x3_rc3::IfcGridAxis(data);
            case 527: return new ::Ifc4x3_rc3::IfcGridPlacement(data);
            case 529: return new ::Ifc4x3_rc3::IfcGridTypeEnum(data);
            case 530: return new ::Ifc4x3_rc3::IfcGroup(data);
            case 531: return new ::Ifc4x3_rc3::IfcHalfSpaceSolid(data);
            case 533: return new ::Ifc4x3_rc3::IfcHeatExchanger(data);
            case 534: return new ::Ifc4x3_rc3::IfcHeatExchangerType(data);
            case 535: return new ::Ifc4x3_rc3::IfcHeatExchangerTypeEnum(data);
            case 536: return new ::Ifc4x3_rc3::IfcHeatFluxDensityMeasure(data);
            case 537: return new ::Ifc4x3_rc3::IfcHeatingValueMeasure(data);
            case 538: return new ::Ifc4x3_rc3::IfcHumidifier(data);
            case 539: return new ::Ifc4x3_rc3::IfcHumidifierType(data);
            case 540: return new ::Ifc4x3_rc3::IfcHumidifierTypeEnum(data);
            case 541: return new ::Ifc4x3_rc3::IfcIdentifier(data);
            case 542: return new ::Ifc4x3_rc3::IfcIlluminanceMeasure(data);
            case 543: return new ::Ifc4x3_rc3::IfcImageTexture(data);
            case 544: return new ::Ifc4x3_rc3::IfcImpactProtectionDevice(data);
            case 545: return new ::Ifc4x3_rc3::IfcImpactProtectionDeviceType(data);
            case 546: return new ::Ifc4x3_rc3::IfcImpactProtectionDeviceTypeEnum(data);
            case 548: return new ::Ifc4x3_rc3::IfcInclinedReferenceSweptAreaSolid(data);
            case 549: return new ::Ifc4x3_rc3::IfcIndexedColourMap(data);
            case 550: return new ::Ifc4x3_rc3::IfcIndexedPolyCurve(data);
            case 551: return new ::Ifc4x3_rc3::IfcIndexedPolygonalFace(data);
            case 552: return new ::Ifc4x3_rc3::IfcIndexedPolygonalFaceWithVoids(data);
            case 553: return new ::Ifc4x3_rc3::IfcIndexedTextureMap(data);
            case 554: return new ::Ifc4x3_rc3::IfcIndexedTriangleTextureMap(data);
            case 555: return new ::Ifc4x3_rc3::IfcInductanceMeasure(data);
            case 556: return new ::Ifc4x3_rc3::IfcInteger(data);
            case 557: return new ::Ifc4x3_rc3::IfcIntegerCountRateMeasure(data);
            case 558: return new ::Ifc4x3_rc3::IfcInterceptor(data);
            case 559: return new ::Ifc4x3_rc3::IfcInterceptorType(data);
            case 560: return new ::Ifc4x3_rc3::IfcInterceptorTypeEnum(data);
            case 562: return new ::Ifc4x3_rc3::IfcInternalOrExternalEnum(data);
            case 563: return new ::Ifc4x3_rc3::IfcIntersectionCurve(data);
            case 564: return new ::Ifc4x3_rc3::IfcInventory(data);
            case 565: return new ::Ifc4x3_rc3::IfcInventoryTypeEnum(data);
            case 566: return new ::Ifc4x3_rc3::IfcIonConcentrationMeasure(data);
            case 567: return new ::Ifc4x3_rc3::IfcIrregularTimeSeries(data);
            case 568: return new ::Ifc4x3_rc3::IfcIrregularTimeSeriesValue(data);
            case 569: return new ::Ifc4x3_rc3::IfcIShapeProfileDef(data);
            case 570: return new ::Ifc4x3_rc3::IfcIsothermalMoistureCapacityMeasure(data);
            case 571: return new ::Ifc4x3_rc3::IfcJunctionBox(data);
            case 572: return new ::Ifc4x3_rc3::IfcJunctionBoxType(data);
            case 573: return new ::Ifc4x3_rc3::IfcJunctionBoxTypeEnum(data);
            case 574: return new ::Ifc4x3_rc3::IfcKerb(data);
            case 575: return new ::Ifc4x3_rc3::IfcKerbType(data);
            case 576: return new ::Ifc4x3_rc3::IfcKinematicViscosityMeasure(data);
            case 577: return new ::Ifc4x3_rc3::IfcKnotType(data);
            case 578: return new ::Ifc4x3_rc3::IfcLabel(data);
            case 579: return new ::Ifc4x3_rc3::IfcLaborResource(data);
            case 580: return new ::Ifc4x3_rc3::IfcLaborResourceType(data);
            case 581: return new ::Ifc4x3_rc3::IfcLaborResourceTypeEnum(data);
            case 582: return new ::Ifc4x3_rc3::IfcLagTime(data);
            case 583: return new ::Ifc4x3_rc3::IfcLamp(data);
            case 584: return new ::Ifc4x3_rc3::IfcLampType(data);
            case 585: return new ::Ifc4x3_rc3::IfcLampTypeEnum(data);
            case 586: return new ::Ifc4x3_rc3::IfcLanguageId(data);
            case 588: return new ::Ifc4x3_rc3::IfcLayerSetDirectionEnum(data);
            case 589: return new ::Ifc4x3_rc3::IfcLengthMeasure(data);
            case 590: return new ::Ifc4x3_rc3::IfcLibraryInformation(data);
            case 591: return new ::Ifc4x3_rc3::IfcLibraryReference(data);
            case 593: return new ::Ifc4x3_rc3::IfcLightDistributionCurveEnum(data);
            case 594: return new ::Ifc4x3_rc3::IfcLightDistributionData(data);
            case 596: return new ::Ifc4x3_rc3::IfcLightEmissionSourceEnum(data);
            case 597: return new ::Ifc4x3_rc3::IfcLightFixture(data);
            case 598: return new ::Ifc4x3_rc3::IfcLightFixtureType(data);
            case 599: return new ::Ifc4x3_rc3::IfcLightFixtureTypeEnum(data);
            case 600: return new ::Ifc4x3_rc3::IfcLightIntensityDistribution(data);
            case 601: return new ::Ifc4x3_rc3::IfcLightSource(data);
            case 602: return new ::Ifc4x3_rc3::IfcLightSourceAmbient(data);
            case 603: return new ::Ifc4x3_rc3::IfcLightSourceDirectional(data);
            case 604: return new ::Ifc4x3_rc3::IfcLightSourceGoniometric(data);
            case 605: return new ::Ifc4x3_rc3::IfcLightSourcePositional(data);
            case 606: return new ::Ifc4x3_rc3::IfcLightSourceSpot(data);
            case 607: return new ::Ifc4x3_rc3::IfcLine(data);
            case 608: return new ::Ifc4x3_rc3::IfcLinearElement(data);
            case 609: return new ::Ifc4x3_rc3::IfcLinearForceMeasure(data);
            case 610: return new ::Ifc4x3_rc3::IfcLinearMomentMeasure(data);
            case 611: return new ::Ifc4x3_rc3::IfcLinearPlacement(data);
            case 612: return new ::Ifc4x3_rc3::IfcLinearPositioningElement(data);
            case 613: return new ::Ifc4x3_rc3::IfcLinearStiffnessMeasure(data);
            case 614: return new ::Ifc4x3_rc3::IfcLinearVelocityMeasure(data);
            case 615: return new ::Ifc4x3_rc3::IfcLineIndex(data);
            case 616: return new ::Ifc4x3_rc3::IfcLiquidTerminal(data);
            case 617: return new ::Ifc4x3_rc3::IfcLiquidTerminalType(data);
            case 618: return new ::Ifc4x3_rc3::IfcLiquidTerminalTypeEnum(data);
            case 619: return new ::Ifc4x3_rc3::IfcLoadGroupTypeEnum(data);
            case 620: return new ::Ifc4x3_rc3::IfcLocalPlacement(data);
            case 621: return new ::Ifc4x3_rc3::IfcLogical(data);
            case 622: return new ::Ifc4x3_rc3::IfcLogicalOperatorEnum(data);
            case 623: return new ::Ifc4x3_rc3::IfcLoop(data);
            case 624: return new ::Ifc4x3_rc3::IfcLShapeProfileDef(data);
            case 625: return new ::Ifc4x3_rc3::IfcLuminousFluxMeasure(data);
            case 626: return new ::Ifc4x3_rc3::IfcLuminousIntensityDistributionMeasure(data);
            case 627: return new ::Ifc4x3_rc3::IfcLuminousIntensityMeasure(data);
            case 628: return new ::Ifc4x3_rc3::IfcMagneticFluxDensityMeasure(data);
            case 629: return new ::Ifc4x3_rc3::IfcMagneticFluxMeasure(data);
            case 630: return new ::Ifc4x3_rc3::IfcManifoldSolidBrep(data);
            case 631: return new ::Ifc4x3_rc3::IfcMapConversion(data);
            case 632: return new ::Ifc4x3_rc3::IfcMappedItem(data);
            case 633: return new ::Ifc4x3_rc3::IfcMarineFacility(data);
            case 634: return new ::Ifc4x3_rc3::IfcMarineFacilityTypeEnum(data);
            case 635: return new ::Ifc4x3_rc3::IfcMarinePartTypeEnum(data);
            case 636: return new ::Ifc4x3_rc3::IfcMassDensityMeasure(data);
            case 637: return new ::Ifc4x3_rc3::IfcMassFlowRateMeasure(data);
            case 638: return new ::Ifc4x3_rc3::IfcMassMeasure(data);
            case 639: return new ::Ifc4x3_rc3::IfcMassPerLengthMeasure(data);
            case 640: return new ::Ifc4x3_rc3::IfcMaterial(data);
            case 641: return new ::Ifc4x3_rc3::IfcMaterialClassificationRelationship(data);
            case 642: return new ::Ifc4x3_rc3::IfcMaterialConstituent(data);
            case 643: return new ::Ifc4x3_rc3::IfcMaterialConstituentSet(data);
            case 644: return new ::Ifc4x3_rc3::IfcMaterialDefinition(data);
            case 645: return new ::Ifc4x3_rc3::IfcMaterialDefinitionRepresentation(data);
            case 646: return new ::Ifc4x3_rc3::IfcMaterialLayer(data);
            case 647: return new ::Ifc4x3_rc3::IfcMaterialLayerSet(data);
            case 648: return new ::Ifc4x3_rc3::IfcMaterialLayerSetUsage(data);
            case 649: return new ::Ifc4x3_rc3::IfcMaterialLayerWithOffsets(data);
            case 650: return new ::Ifc4x3_rc3::IfcMaterialList(data);
            case 651: return new ::Ifc4x3_rc3::IfcMaterialProfile(data);
            case 652: return new ::Ifc4x3_rc3::IfcMaterialProfileSet(data);
            case 653: return new ::Ifc4x3_rc3::IfcMaterialProfileSetUsage(data);
            case 654: return new ::Ifc4x3_rc3::IfcMaterialProfileSetUsageTapering(data);
            case 655: return new ::Ifc4x3_rc3::IfcMaterialProfileWithOffsets(data);
            case 656: return new ::Ifc4x3_rc3::IfcMaterialProperties(data);
            case 657: return new ::Ifc4x3_rc3::IfcMaterialRelationship(data);
            case 659: return new ::Ifc4x3_rc3::IfcMaterialUsageDefinition(data);
            case 661: return new ::Ifc4x3_rc3::IfcMeasureWithUnit(data);
            case 662: return new ::Ifc4x3_rc3::IfcMechanicalFastener(data);
            case 663: return new ::Ifc4x3_rc3::IfcMechanicalFastenerType(data);
            case 664: return new ::Ifc4x3_rc3::IfcMechanicalFastenerTypeEnum(data);
            case 665: return new ::Ifc4x3_rc3::IfcMedicalDevice(data);
            case 666: return new ::Ifc4x3_rc3::IfcMedicalDeviceType(data);
            case 667: return new ::Ifc4x3_rc3::IfcMedicalDeviceTypeEnum(data);
            case 668: return new ::Ifc4x3_rc3::IfcMember(data);
            case 669: return new ::Ifc4x3_rc3::IfcMemberStandardCase(data);
            case 670: return new ::Ifc4x3_rc3::IfcMemberType(data);
            case 671: return new ::Ifc4x3_rc3::IfcMemberTypeEnum(data);
            case 672: return new ::Ifc4x3_rc3::IfcMetric(data);
            case 674: return new ::Ifc4x3_rc3::IfcMirroredProfileDef(data);
            case 675: return new ::Ifc4x3_rc3::IfcMobileTelecommunicationsAppliance(data);
            case 676: return new ::Ifc4x3_rc3::IfcMobileTelecommunicationsApplianceType(data);
            case 677: return new ::Ifc4x3_rc3::IfcMobileTelecommunicationsApplianceTypeEnum(data);
            case 678: return new ::Ifc4x3_rc3::IfcModulusOfElasticityMeasure(data);
            case 679: return new ::Ifc4x3_rc3::IfcModulusOfLinearSubgradeReactionMeasure(data);
            case 680: return new ::Ifc4x3_rc3::IfcModulusOfRotationalSubgradeReactionMeasure(data);
            case 682: return new ::Ifc4x3_rc3::IfcModulusOfSubgradeReactionMeasure(data);
            case 685: return new ::Ifc4x3_rc3::IfcMoistureDiffusivityMeasure(data);
            case 686: return new ::Ifc4x3_rc3::IfcMolecularWeightMeasure(data);
            case 687: return new ::Ifc4x3_rc3::IfcMomentOfInertiaMeasure(data);
            case 688: return new ::Ifc4x3_rc3::IfcMonetaryMeasure(data);
            case 689: return new ::Ifc4x3_rc3::IfcMonetaryUnit(data);
            case 690: return new ::Ifc4x3_rc3::IfcMonthInYearNumber(data);
            case 691: return new ::Ifc4x3_rc3::IfcMooringDevice(data);
            case 692: return new ::Ifc4x3_rc3::IfcMooringDeviceType(data);
            case 693: return new ::Ifc4x3_rc3::IfcMooringDeviceTypeEnum(data);
            case 694: return new ::Ifc4x3_rc3::IfcMotorConnection(data);
            case 695: return new ::Ifc4x3_rc3::IfcMotorConnectionType(data);
            case 696: return new ::Ifc4x3_rc3::IfcMotorConnectionTypeEnum(data);
            case 697: return new ::Ifc4x3_rc3::IfcNamedUnit(data);
            case 698: return new ::Ifc4x3_rc3::IfcNavigationElement(data);
            case 699: return new ::Ifc4x3_rc3::IfcNavigationElementType(data);
            case 700: return new ::Ifc4x3_rc3::IfcNavigationElementTypeEnum(data);
            case 701: return new ::Ifc4x3_rc3::IfcNonNegativeLengthMeasure(data);
            case 702: return new ::Ifc4x3_rc3::IfcNormalisedRatioMeasure(data);
            case 703: return new ::Ifc4x3_rc3::IfcNumericMeasure(data);
            case 704: return new ::Ifc4x3_rc3::IfcObject(data);
            case 705: return new ::Ifc4x3_rc3::IfcObjectDefinition(data);
            case 706: return new ::Ifc4x3_rc3::IfcObjective(data);
            case 707: return new ::Ifc4x3_rc3::IfcObjectiveEnum(data);
            case 708: return new ::Ifc4x3_rc3::IfcObjectPlacement(data);
            case 710: return new ::Ifc4x3_rc3::IfcObjectTypeEnum(data);
            case 711: return new ::Ifc4x3_rc3::IfcOccupant(data);
            case 712: return new ::Ifc4x3_rc3::IfcOccupantTypeEnum(data);
            case 713: return new ::Ifc4x3_rc3::IfcOffsetCurve(data);
            case 714: return new ::Ifc4x3_rc3::IfcOffsetCurve2D(data);
            case 715: return new ::Ifc4x3_rc3::IfcOffsetCurve3D(data);
            case 716: return new ::Ifc4x3_rc3::IfcOffsetCurveByDistances(data);
            case 717: return new ::Ifc4x3_rc3::IfcOpenCrossProfileDef(data);
            case 718: return new ::Ifc4x3_rc3::IfcOpeningElement(data);
            case 719: return new ::Ifc4x3_rc3::IfcOpeningElementTypeEnum(data);
            case 720: return new ::Ifc4x3_rc3::IfcOpeningStandardCase(data);
            case 721: return new ::Ifc4x3_rc3::IfcOpenShell(data);
            case 722: return new ::Ifc4x3_rc3::IfcOrganization(data);
            case 723: return new ::Ifc4x3_rc3::IfcOrganizationRelationship(data);
            case 724: return new ::Ifc4x3_rc3::IfcOrientedEdge(data);
            case 725: return new ::Ifc4x3_rc3::IfcOuterBoundaryCurve(data);
            case 726: return new ::Ifc4x3_rc3::IfcOutlet(data);
            case 727: return new ::Ifc4x3_rc3::IfcOutletType(data);
            case 728: return new ::Ifc4x3_rc3::IfcOutletTypeEnum(data);
            case 729: return new ::Ifc4x3_rc3::IfcOwnerHistory(data);
            case 730: return new ::Ifc4x3_rc3::IfcParameterizedProfileDef(data);
            case 731: return new ::Ifc4x3_rc3::IfcParameterValue(data);
            case 732: return new ::Ifc4x3_rc3::IfcPath(data);
            case 733: return new ::Ifc4x3_rc3::IfcPavement(data);
            case 734: return new ::Ifc4x3_rc3::IfcPavementType(data);
            case 735: return new ::Ifc4x3_rc3::IfcPavementTypeEnum(data);
            case 736: return new ::Ifc4x3_rc3::IfcPcurve(data);
            case 737: return new ::Ifc4x3_rc3::IfcPerformanceHistory(data);
            case 738: return new ::Ifc4x3_rc3::IfcPerformanceHistoryTypeEnum(data);
            case 739: return new ::Ifc4x3_rc3::IfcPermeableCoveringOperationEnum(data);
            case 740: return new ::Ifc4x3_rc3::IfcPermeableCoveringProperties(data);
            case 741: return new ::Ifc4x3_rc3::IfcPermit(data);
            case 742: return new ::Ifc4x3_rc3::IfcPermitTypeEnum(data);
            case 743: return new ::Ifc4x3_rc3::IfcPerson(data);
            case 744: return new ::Ifc4x3_rc3::IfcPersonAndOrganization(data);
            case 745: return new ::Ifc4x3_rc3::IfcPHMeasure(data);
            case 746: return new ::Ifc4x3_rc3::IfcPhysicalComplexQuantity(data);
            case 747: return new ::Ifc4x3_rc3::IfcPhysicalOrVirtualEnum(data);
            case 748: return new ::Ifc4x3_rc3::IfcPhysicalQuantity(data);
            case 749: return new ::Ifc4x3_rc3::IfcPhysicalSimpleQuantity(data);
            case 750: return new ::Ifc4x3_rc3::IfcPile(data);
            case 751: return new ::Ifc4x3_rc3::IfcPileConstructionEnum(data);
            case 752: return new ::Ifc4x3_rc3::IfcPileType(data);
            case 753: return new ::Ifc4x3_rc3::IfcPileTypeEnum(data);
            case 754: return new ::Ifc4x3_rc3::IfcPipeFitting(data);
            case 755: return new ::Ifc4x3_rc3::IfcPipeFittingType(data);
            case 756: return new ::Ifc4x3_rc3::IfcPipeFittingTypeEnum(data);
            case 757: return new ::Ifc4x3_rc3::IfcPipeSegment(data);
            case 758: return new ::Ifc4x3_rc3::IfcPipeSegmentType(data);
            case 759: return new ::Ifc4x3_rc3::IfcPipeSegmentTypeEnum(data);
            case 760: return new ::Ifc4x3_rc3::IfcPixelTexture(data);
            case 761: return new ::Ifc4x3_rc3::IfcPlacement(data);
            case 762: return new ::Ifc4x3_rc3::IfcPlanarBox(data);
            case 763: return new ::Ifc4x3_rc3::IfcPlanarExtent(data);
            case 764: return new ::Ifc4x3_rc3::IfcPlanarForceMeasure(data);
            case 765: return new ::Ifc4x3_rc3::IfcPlane(data);
            case 766: return new ::Ifc4x3_rc3::IfcPlaneAngleMeasure(data);
            case 767: return new ::Ifc4x3_rc3::IfcPlant(data);
            case 768: return new ::Ifc4x3_rc3::IfcPlate(data);
            case 769: return new ::Ifc4x3_rc3::IfcPlateStandardCase(data);
            case 770: return new ::Ifc4x3_rc3::IfcPlateType(data);
            case 771: return new ::Ifc4x3_rc3::IfcPlateTypeEnum(data);
            case 772: return new ::Ifc4x3_rc3::IfcPoint(data);
            case 773: return new ::Ifc4x3_rc3::IfcPointByDistanceExpression(data);
            case 774: return new ::Ifc4x3_rc3::IfcPointOnCurve(data);
            case 775: return new ::Ifc4x3_rc3::IfcPointOnSurface(data);
            case 777: return new ::Ifc4x3_rc3::IfcPolygonalBoundedHalfSpace(data);
            case 778: return new ::Ifc4x3_rc3::IfcPolygonalFaceSet(data);
            case 779: return new ::Ifc4x3_rc3::IfcPolyline(data);
            case 780: return new ::Ifc4x3_rc3::IfcPolyLoop(data);
            case 781: return new ::Ifc4x3_rc3::IfcPolynomialCurve(data);
            case 782: return new ::Ifc4x3_rc3::IfcPort(data);
            case 783: return new ::Ifc4x3_rc3::IfcPositioningElement(data);
            case 784: return new ::Ifc4x3_rc3::IfcPositiveInteger(data);
            case 785: return new ::Ifc4x3_rc3::IfcPositiveLengthMeasure(data);
            case 786: return new ::Ifc4x3_rc3::IfcPositivePlaneAngleMeasure(data);
            case 787: return new ::Ifc4x3_rc3::IfcPositiveRatioMeasure(data);
            case 788: return new ::Ifc4x3_rc3::IfcPostalAddress(data);
            case 789: return new ::Ifc4x3_rc3::IfcPowerMeasure(data);
            case 790: return new ::Ifc4x3_rc3::IfcPreDefinedColour(data);
            case 791: return new ::Ifc4x3_rc3::IfcPreDefinedCurveFont(data);
            case 792: return new ::Ifc4x3_rc3::IfcPreDefinedItem(data);
            case 793: return new ::Ifc4x3_rc3::IfcPreDefinedProperties(data);
            case 794: return new ::Ifc4x3_rc3::IfcPreDefinedPropertySet(data);
            case 795: return new ::Ifc4x3_rc3::IfcPreDefinedTextFont(data);
            case 796: return new ::Ifc4x3_rc3::IfcPreferredSurfaceCurveRepresentation(data);
            case 797: return new ::Ifc4x3_rc3::IfcPresentableText(data);
            case 798: return new ::Ifc4x3_rc3::IfcPresentationItem(data);
            case 799: return new ::Ifc4x3_rc3::IfcPresentationLayerAssignment(data);
            case 800: return new ::Ifc4x3_rc3::IfcPresentationLayerWithStyle(data);
            case 801: return new ::Ifc4x3_rc3::IfcPresentationStyle(data);
            case 802: return new ::Ifc4x3_rc3::IfcPressureMeasure(data);
            case 803: return new ::Ifc4x3_rc3::IfcProcedure(data);
            case 804: return new ::Ifc4x3_rc3::IfcProcedureType(data);
            case 805: return new ::Ifc4x3_rc3::IfcProcedureTypeEnum(data);
            case 806: return new ::Ifc4x3_rc3::IfcProcess(data);
            case 808: return new ::Ifc4x3_rc3::IfcProduct(data);
            case 809: return new ::Ifc4x3_rc3::IfcProductDefinitionShape(data);
            case 810: return new ::Ifc4x3_rc3::IfcProductRepresentation(data);
            case 813: return new ::Ifc4x3_rc3::IfcProfileDef(data);
            case 814: return new ::Ifc4x3_rc3::IfcProfileProperties(data);
            case 815: return new ::Ifc4x3_rc3::IfcProfileTypeEnum(data);
            case 816: return new ::Ifc4x3_rc3::IfcProject(data);
            case 817: return new ::Ifc4x3_rc3::IfcProjectedCRS(data);
            case 818: return new ::Ifc4x3_rc3::IfcProjectedOrTrueLengthEnum(data);
            case 819: return new ::Ifc4x3_rc3::IfcProjectionElement(data);
            case 820: return new ::Ifc4x3_rc3::IfcProjectionElementTypeEnum(data);
            case 821: return new ::Ifc4x3_rc3::IfcProjectLibrary(data);
            case 822: return new ::Ifc4x3_rc3::IfcProjectOrder(data);
            case 823: return new ::Ifc4x3_rc3::IfcProjectOrderTypeEnum(data);
            case 824: return new ::Ifc4x3_rc3::IfcProperty(data);
            case 825: return new ::Ifc4x3_rc3::IfcPropertyAbstraction(data);
            case 826: return new ::Ifc4x3_rc3::IfcPropertyBoundedValue(data);
            case 827: return new ::Ifc4x3_rc3::IfcPropertyDefinition(data);
            case 828: return new ::Ifc4x3_rc3::IfcPropertyDependencyRelationship(data);
            case 829: return new ::Ifc4x3_rc3::IfcPropertyEnumeratedValue(data);
            case 830: return new ::Ifc4x3_rc3::IfcPropertyEnumeration(data);
            case 831: return new ::Ifc4x3_rc3::IfcPropertyListValue(data);
            case 832: return new ::Ifc4x3_rc3::IfcPropertyReferenceValue(data);
            case 833: return new ::Ifc4x3_rc3::IfcPropertySet(data);
            case 834: return new ::Ifc4x3_rc3::IfcPropertySetDefinition(data);
            case 836: return new ::Ifc4x3_rc3::IfcPropertySetDefinitionSet(data);
            case 837: return new ::Ifc4x3_rc3::IfcPropertySetTemplate(data);
            case 838: return new ::Ifc4x3_rc3::IfcPropertySetTemplateTypeEnum(data);
            case 839: return new ::Ifc4x3_rc3::IfcPropertySingleValue(data);
            case 840: return new ::Ifc4x3_rc3::IfcPropertyTableValue(data);
            case 841: return new ::Ifc4x3_rc3::IfcPropertyTemplate(data);
            case 842: return new ::Ifc4x3_rc3::IfcPropertyTemplateDefinition(data);
            case 843: return new ::Ifc4x3_rc3::IfcProtectiveDevice(data);
            case 844: return new ::Ifc4x3_rc3::IfcProtectiveDeviceTrippingUnit(data);
            case 845: return new ::Ifc4x3_rc3::IfcProtectiveDeviceTrippingUnitType(data);
            case 846: return new ::Ifc4x3_rc3::IfcProtectiveDeviceTrippingUnitTypeEnum(data);
            case 847: return new ::Ifc4x3_rc3::IfcProtectiveDeviceType(data);
            case 848: return new ::Ifc4x3_rc3::IfcProtectiveDeviceTypeEnum(data);
            case 849: return new ::Ifc4x3_rc3::IfcProxy(data);
            case 850: return new ::Ifc4x3_rc3::IfcPump(data);
            case 851: return new ::Ifc4x3_rc3::IfcPumpType(data);
            case 852: return new ::Ifc4x3_rc3::IfcPumpTypeEnum(data);
            case 853: return new ::Ifc4x3_rc3::IfcQuantityArea(data);
            case 854: return new ::Ifc4x3_rc3::IfcQuantityCount(data);
            case 855: return new ::Ifc4x3_rc3::IfcQuantityLength(data);
            case 856: return new ::Ifc4x3_rc3::IfcQuantitySet(data);
            case 857: return new ::Ifc4x3_rc3::IfcQuantityTime(data);
            case 858: return new ::Ifc4x3_rc3::IfcQuantityVolume(data);
            case 859: return new ::Ifc4x3_rc3::IfcQuantityWeight(data);
            case 860: return new ::Ifc4x3_rc3::IfcRadioActivityMeasure(data);
            case 861: return new ::Ifc4x3_rc3::IfcRail(data);
            case 862: return new ::Ifc4x3_rc3::IfcRailing(data);
            case 863: return new ::Ifc4x3_rc3::IfcRailingType(data);
            case 864: return new ::Ifc4x3_rc3::IfcRailingTypeEnum(data);
            case 865: return new ::Ifc4x3_rc3::IfcRailType(data);
            case 866: return new ::Ifc4x3_rc3::IfcRailTypeEnum(data);
            case 867: return new ::Ifc4x3_rc3::IfcRailway(data);
            case 868: return new ::Ifc4x3_rc3::IfcRailwayPartTypeEnum(data);
            case 869: return new ::Ifc4x3_rc3::IfcRailwayTypeEnum(data);
            case 870: return new ::Ifc4x3_rc3::IfcRamp(data);
            case 871: return new ::Ifc4x3_rc3::IfcRampFlight(data);
            case 872: return new ::Ifc4x3_rc3::IfcRampFlightType(data);
            case 873: return new ::Ifc4x3_rc3::IfcRampFlightTypeEnum(data);
            case 874: return new ::Ifc4x3_rc3::IfcRampType(data);
            case 875: return new ::Ifc4x3_rc3::IfcRampTypeEnum(data);
            case 876: return new ::Ifc4x3_rc3::IfcRatioMeasure(data);
            case 877: return new ::Ifc4x3_rc3::IfcRationalBSplineCurveWithKnots(data);
            case 878: return new ::Ifc4x3_rc3::IfcRationalBSplineSurfaceWithKnots(data);
            case 879: return new ::Ifc4x3_rc3::IfcReal(data);
            case 880: return new ::Ifc4x3_rc3::IfcRectangleHollowProfileDef(data);
            case 881: return new ::Ifc4x3_rc3::IfcRectangleProfileDef(data);
            case 882: return new ::Ifc4x3_rc3::IfcRectangularPyramid(data);
            case 883: return new ::Ifc4x3_rc3::IfcRectangularTrimmedSurface(data);
            case 884: return new ::Ifc4x3_rc3::IfcRecurrencePattern(data);
            case 885: return new ::Ifc4x3_rc3::IfcRecurrenceTypeEnum(data);
            case 886: return new ::Ifc4x3_rc3::IfcReference(data);
            case 887: return new ::Ifc4x3_rc3::IfcReferent(data);
            case 888: return new ::Ifc4x3_rc3::IfcReferentTypeEnum(data);
            case 889: return new ::Ifc4x3_rc3::IfcReflectanceMethodEnum(data);
            case 890: return new ::Ifc4x3_rc3::IfcRegularTimeSeries(data);
            case 891: return new ::Ifc4x3_rc3::IfcReinforcedSoil(data);
            case 892: return new ::Ifc4x3_rc3::IfcReinforcedSoilTypeEnum(data);
            case 893: return new ::Ifc4x3_rc3::IfcReinforcementBarProperties(data);
            case 894: return new ::Ifc4x3_rc3::IfcReinforcementDefinitionProperties(data);
            case 895: return new ::Ifc4x3_rc3::IfcReinforcingBar(data);
            case 896: return new ::Ifc4x3_rc3::IfcReinforcingBarRoleEnum(data);
            case 897: return new ::Ifc4x3_rc3::IfcReinforcingBarSurfaceEnum(data);
            case 898: return new ::Ifc4x3_rc3::IfcReinforcingBarType(data);
            case 899: return new ::Ifc4x3_rc3::IfcReinforcingBarTypeEnum(data);
            case 900: return new ::Ifc4x3_rc3::IfcReinforcingElement(data);
            case 901: return new ::Ifc4x3_rc3::IfcReinforcingElementType(data);
            case 902: return new ::Ifc4x3_rc3::IfcReinforcingMesh(data);
            case 903: return new ::Ifc4x3_rc3::IfcReinforcingMeshType(data);
            case 904: return new ::Ifc4x3_rc3::IfcReinforcingMeshTypeEnum(data);
            case 905: return new ::Ifc4x3_rc3::IfcRelAggregates(data);
            case 906: return new ::Ifc4x3_rc3::IfcRelAssigns(data);
            case 907: return new ::Ifc4x3_rc3::IfcRelAssignsToActor(data);
            case 908: return new ::Ifc4x3_rc3::IfcRelAssignsToControl(data);
            case 909: return new ::Ifc4x3_rc3::IfcRelAssignsToGroup(data);
            case 910: return new ::Ifc4x3_rc3::IfcRelAssignsToGroupByFactor(data);
            case 911: return new ::Ifc4x3_rc3::IfcRelAssignsToProcess(data);
            case 912: return new ::Ifc4x3_rc3::IfcRelAssignsToProduct(data);
            case 913: return new ::Ifc4x3_rc3::IfcRelAssignsToResource(data);
            case 914: return new ::Ifc4x3_rc3::IfcRelAssociates(data);
            case 915: return new ::Ifc4x3_rc3::IfcRelAssociatesApproval(data);
            case 916: return new ::Ifc4x3_rc3::IfcRelAssociatesClassification(data);
            case 917: return new ::Ifc4x3_rc3::IfcRelAssociatesConstraint(data);
            case 918: return new ::Ifc4x3_rc3::IfcRelAssociatesDocument(data);
            case 919: return new ::Ifc4x3_rc3::IfcRelAssociatesLibrary(data);
            case 920: return new ::Ifc4x3_rc3::IfcRelAssociatesMaterial(data);
            case 921: return new ::Ifc4x3_rc3::IfcRelAssociatesProfileDef(data);
            case 922: return new ::Ifc4x3_rc3::IfcRelationship(data);
            case 923: return new ::Ifc4x3_rc3::IfcRelConnects(data);
            case 924: return new ::Ifc4x3_rc3::IfcRelConnectsElements(data);
            case 925: return new ::Ifc4x3_rc3::IfcRelConnectsPathElements(data);
            case 926: return new ::Ifc4x3_rc3::IfcRelConnectsPorts(data);
            case 927: return new ::Ifc4x3_rc3::IfcRelConnectsPortToElement(data);
            case 928: return new ::Ifc4x3_rc3::IfcRelConnectsStructuralActivity(data);
            case 929: return new ::Ifc4x3_rc3::IfcRelConnectsStructuralMember(data);
            case 930: return new ::Ifc4x3_rc3::IfcRelConnectsWithEccentricity(data);
            case 931: return new ::Ifc4x3_rc3::IfcRelConnectsWithRealizingElements(data);
            case 932: return new ::Ifc4x3_rc3::IfcRelContainedInSpatialStructure(data);
            case 933: return new ::Ifc4x3_rc3::IfcRelCoversBldgElements(data);
            case 934: return new ::Ifc4x3_rc3::IfcRelCoversSpaces(data);
            case 935: return new ::Ifc4x3_rc3::IfcRelDeclares(data);
            case 936: return new ::Ifc4x3_rc3::IfcRelDecomposes(data);
            case 937: return new ::Ifc4x3_rc3::IfcRelDefines(data);
            case 938: return new ::Ifc4x3_rc3::IfcRelDefinesByObject(data);
            case 939: return new ::Ifc4x3_rc3::IfcRelDefinesByProperties(data);
            case 940: return new ::Ifc4x3_rc3::IfcRelDefinesByTemplate(data);
            case 941: return new ::Ifc4x3_rc3::IfcRelDefinesByType(data);
            case 942: return new ::Ifc4x3_rc3::IfcRelFillsElement(data);
            case 943: return new ::Ifc4x3_rc3::IfcRelFlowControlElements(data);
            case 944: return new ::Ifc4x3_rc3::IfcRelInterferesElements(data);
            case 945: return new ::Ifc4x3_rc3::IfcRelNests(data);
            case 946: return new ::Ifc4x3_rc3::IfcRelPositions(data);
            case 947: return new ::Ifc4x3_rc3::IfcRelProjectsElement(data);
            case 948: return new ::Ifc4x3_rc3::IfcRelReferencedInSpatialStructure(data);
            case 949: return new ::Ifc4x3_rc3::IfcRelSequence(data);
            case 950: return new ::Ifc4x3_rc3::IfcRelServicesBuildings(data);
            case 951: return new ::Ifc4x3_rc3::IfcRelSpaceBoundary(data);
            case 952: return new ::Ifc4x3_rc3::IfcRelSpaceBoundary1stLevel(data);
            case 953: return new ::Ifc4x3_rc3::IfcRelSpaceBoundary2ndLevel(data);
            case 954: return new ::Ifc4x3_rc3::IfcRelVoidsElement(data);
            case 955: return new ::Ifc4x3_rc3::IfcReparametrisedCompositeCurveSegment(data);
            case 956: return new ::Ifc4x3_rc3::IfcRepresentation(data);
            case 957: return new ::Ifc4x3_rc3::IfcRepresentationContext(data);
            case 958: return new ::Ifc4x3_rc3::IfcRepresentationItem(data);
            case 959: return new ::Ifc4x3_rc3::IfcRepresentationMap(data);
            case 960: return new ::Ifc4x3_rc3::IfcResource(data);
            case 961: return new ::Ifc4x3_rc3::IfcResourceApprovalRelationship(data);
            case 962: return new ::Ifc4x3_rc3::IfcResourceConstraintRelationship(data);
            case 963: return new ::Ifc4x3_rc3::IfcResourceLevelRelationship(data);
            case 966: return new ::Ifc4x3_rc3::IfcResourceTime(data);
            case 967: return new ::Ifc4x3_rc3::IfcRevolvedAreaSolid(data);
            case 968: return new ::Ifc4x3_rc3::IfcRevolvedAreaSolidTapered(data);
            case 969: return new ::Ifc4x3_rc3::IfcRightCircularCone(data);
            case 970: return new ::Ifc4x3_rc3::IfcRightCircularCylinder(data);
            case 971: return new ::Ifc4x3_rc3::IfcRoad(data);
            case 972: return new ::Ifc4x3_rc3::IfcRoadPartTypeEnum(data);
            case 973: return new ::Ifc4x3_rc3::IfcRoadTypeEnum(data);
            case 974: return new ::Ifc4x3_rc3::IfcRoleEnum(data);
            case 975: return new ::Ifc4x3_rc3::IfcRoof(data);
            case 976: return new ::Ifc4x3_rc3::IfcRoofType(data);
            case 977: return new ::Ifc4x3_rc3::IfcRoofTypeEnum(data);
            case 978: return new ::Ifc4x3_rc3::IfcRoot(data);
            case 979: return new ::Ifc4x3_rc3::IfcRotationalFrequencyMeasure(data);
            case 980: return new ::Ifc4x3_rc3::IfcRotationalMassMeasure(data);
            case 981: return new ::Ifc4x3_rc3::IfcRotationalStiffnessMeasure(data);
            case 983: return new ::Ifc4x3_rc3::IfcRoundedRectangleProfileDef(data);
            case 984: return new ::Ifc4x3_rc3::IfcSanitaryTerminal(data);
            case 985: return new ::Ifc4x3_rc3::IfcSanitaryTerminalType(data);
            case 986: return new ::Ifc4x3_rc3::IfcSanitaryTerminalTypeEnum(data);
            case 987: return new ::Ifc4x3_rc3::IfcSchedulingTime(data);
            case 988: return new ::Ifc4x3_rc3::IfcSeamCurve(data);
            case 989: return new ::Ifc4x3_rc3::IfcSecondOrderPolynomialSpiral(data);
            case 990: return new ::Ifc4x3_rc3::IfcSectionalAreaIntegralMeasure(data);
            case 991: return new ::Ifc4x3_rc3::IfcSectionedSolid(data);
            case 992: return new ::Ifc4x3_rc3::IfcSectionedSolidHorizontal(data);
            case 993: return new ::Ifc4x3_rc3::IfcSectionedSpine(data);
            case 994: return new ::Ifc4x3_rc3::IfcSectionedSurface(data);
            case 995: return new ::Ifc4x3_rc3::IfcSectionModulusMeasure(data);
            case 996: return new ::Ifc4x3_rc3::IfcSectionProperties(data);
            case 997: return new ::Ifc4x3_rc3::IfcSectionReinforcementProperties(data);
            case 998: return new ::Ifc4x3_rc3::IfcSectionTypeEnum(data);
            case 999: return new ::Ifc4x3_rc3::IfcSegment(data);
            case 1000: return new ::Ifc4x3_rc3::IfcSegmentedReferenceCurve(data);
            case 1002: return new ::Ifc4x3_rc3::IfcSensor(data);
            case 1003: return new ::Ifc4x3_rc3::IfcSensorType(data);
            case 1004: return new ::Ifc4x3_rc3::IfcSensorTypeEnum(data);
            case 1005: return new ::Ifc4x3_rc3::IfcSequenceEnum(data);
            case 1006: return new ::Ifc4x3_rc3::IfcShadingDevice(data);
            case 1007: return new ::Ifc4x3_rc3::IfcShadingDeviceType(data);
            case 1008: return new ::Ifc4x3_rc3::IfcShadingDeviceTypeEnum(data);
            case 1009: return new ::Ifc4x3_rc3::IfcShapeAspect(data);
            case 1010: return new ::Ifc4x3_rc3::IfcShapeModel(data);
            case 1011: return new ::Ifc4x3_rc3::IfcShapeRepresentation(data);
            case 1012: return new ::Ifc4x3_rc3::IfcShearModulusMeasure(data);
            case 1014: return new ::Ifc4x3_rc3::IfcShellBasedSurfaceModel(data);
            case 1015: return new ::Ifc4x3_rc3::IfcSign(data);
            case 1016: return new ::Ifc4x3_rc3::IfcSignal(data);
            case 1017: return new ::Ifc4x3_rc3::IfcSignalType(data);
            case 1018: return new ::Ifc4x3_rc3::IfcSignalTypeEnum(data);
            case 1019: return new ::Ifc4x3_rc3::IfcSignType(data);
            case 1020: return new ::Ifc4x3_rc3::IfcSignTypeEnum(data);
            case 1021: return new ::Ifc4x3_rc3::IfcSimpleProperty(data);
            case 1022: return new ::Ifc4x3_rc3::IfcSimplePropertyTemplate(data);
            case 1023: return new ::Ifc4x3_rc3::IfcSimplePropertyTemplateTypeEnum(data);
            case 1025: return new ::Ifc4x3_rc3::IfcSine(data);
            case 1026: return new ::Ifc4x3_rc3::IfcSIPrefix(data);
            case 1027: return new ::Ifc4x3_rc3::IfcSite(data);
            case 1028: return new ::Ifc4x3_rc3::IfcSIUnit(data);
            case 1029: return new ::Ifc4x3_rc3::IfcSIUnitName(data);
            case 1031: return new ::Ifc4x3_rc3::IfcSlab(data);
            case 1032: return new ::Ifc4x3_rc3::IfcSlabElementedCase(data);
            case 1033: return new ::Ifc4x3_rc3::IfcSlabStandardCase(data);
            case 1034: return new ::Ifc4x3_rc3::IfcSlabType(data);
            case 1035: return new ::Ifc4x3_rc3::IfcSlabTypeEnum(data);
            case 1036: return new ::Ifc4x3_rc3::IfcSlippageConnectionCondition(data);
            case 1037: return new ::Ifc4x3_rc3::IfcSolarDevice(data);
            case 1038: return new ::Ifc4x3_rc3::IfcSolarDeviceType(data);
            case 1039: return new ::Ifc4x3_rc3::IfcSolarDeviceTypeEnum(data);
            case 1040: return new ::Ifc4x3_rc3::IfcSolidAngleMeasure(data);
            case 1041: return new ::Ifc4x3_rc3::IfcSolidModel(data);
            case 1043: return new ::Ifc4x3_rc3::IfcSolidStratum(data);
            case 1044: return new ::Ifc4x3_rc3::IfcSoundPowerLevelMeasure(data);
            case 1045: return new ::Ifc4x3_rc3::IfcSoundPowerMeasure(data);
            case 1046: return new ::Ifc4x3_rc3::IfcSoundPressureLevelMeasure(data);
            case 1047: return new ::Ifc4x3_rc3::IfcSoundPressureMeasure(data);
            case 1048: return new ::Ifc4x3_rc3::IfcSpace(data);
            case 1050: return new ::Ifc4x3_rc3::IfcSpaceHeater(data);
            case 1051: return new ::Ifc4x3_rc3::IfcSpaceHeaterType(data);
            case 1052: return new ::Ifc4x3_rc3::IfcSpaceHeaterTypeEnum(data);
            case 1053: return new ::Ifc4x3_rc3::IfcSpaceType(data);
            case 1054: return new ::Ifc4x3_rc3::IfcSpaceTypeEnum(data);
            case 1055: return new ::Ifc4x3_rc3::IfcSpatialElement(data);
            case 1056: return new ::Ifc4x3_rc3::IfcSpatialElementType(data);
            case 1058: return new ::Ifc4x3_rc3::IfcSpatialStructureElement(data);
            case 1059: return new ::Ifc4x3_rc3::IfcSpatialStructureElementType(data);
            case 1060: return new ::Ifc4x3_rc3::IfcSpatialZone(data);
            case 1061: return new ::Ifc4x3_rc3::IfcSpatialZoneType(data);
            case 1062: return new ::Ifc4x3_rc3::IfcSpatialZoneTypeEnum(data);
            case 1063: return new ::Ifc4x3_rc3::IfcSpecificHeatCapacityMeasure(data);
            case 1064: return new ::Ifc4x3_rc3::IfcSpecularExponent(data);
            case 1066: return new ::Ifc4x3_rc3::IfcSpecularRoughness(data);
            case 1067: return new ::Ifc4x3_rc3::IfcSphere(data);
            case 1068: return new ::Ifc4x3_rc3::IfcSphericalSurface(data);
            case 1069: return new ::Ifc4x3_rc3::IfcSpiral(data);
            case 1070: return new ::Ifc4x3_rc3::IfcStackTerminal(data);
            case 1071: return new ::Ifc4x3_rc3::IfcStackTerminalType(data);
            case 1072: return new ::Ifc4x3_rc3::IfcStackTerminalTypeEnum(data);
            case 1073: return new ::Ifc4x3_rc3::IfcStair(data);
            case 1074: return new ::Ifc4x3_rc3::IfcStairFlight(data);
            case 1075: return new ::Ifc4x3_rc3::IfcStairFlightType(data);
            case 1076: return new ::Ifc4x3_rc3::IfcStairFlightTypeEnum(data);
            case 1077: return new ::Ifc4x3_rc3::IfcStairType(data);
            case 1078: return new ::Ifc4x3_rc3::IfcStairTypeEnum(data);
            case 1079: return new ::Ifc4x3_rc3::IfcStateEnum(data);
            case 1080: return new ::Ifc4x3_rc3::IfcStructuralAction(data);
            case 1081: return new ::Ifc4x3_rc3::IfcStructuralActivity(data);
            case 1083: return new ::Ifc4x3_rc3::IfcStructuralAnalysisModel(data);
            case 1084: return new ::Ifc4x3_rc3::IfcStructuralConnection(data);
            case 1085: return new ::Ifc4x3_rc3::IfcStructuralConnectionCondition(data);
            case 1086: return new ::Ifc4x3_rc3::IfcStructuralCurveAction(data);
            case 1087: return new ::Ifc4x3_rc3::IfcStructuralCurveActivityTypeEnum(data);
            case 1088: return new ::Ifc4x3_rc3::IfcStructuralCurveConnection(data);
            case 1089: return new ::Ifc4x3_rc3::IfcStructuralCurveMember(data);
            case 1090: return new ::Ifc4x3_rc3::IfcStructuralCurveMemberTypeEnum(data);
            case 1091: return new ::Ifc4x3_rc3::IfcStructuralCurveMemberVarying(data);
            case 1092: return new ::Ifc4x3_rc3::IfcStructuralCurveReaction(data);
            case 1093: return new ::Ifc4x3_rc3::IfcStructuralItem(data);
            case 1094: return new ::Ifc4x3_rc3::IfcStructuralLinearAction(data);
            case 1095: return new ::Ifc4x3_rc3::IfcStructuralLoad(data);
            case 1096: return new ::Ifc4x3_rc3::IfcStructuralLoadCase(data);
            case 1097: return new ::Ifc4x3_rc3::IfcStructuralLoadConfiguration(data);
            case 1098: return new ::Ifc4x3_rc3::IfcStructuralLoadGroup(data);
            case 1099: return new ::Ifc4x3_rc3::IfcStructuralLoadLinearForce(data);
            case 1100: return new ::Ifc4x3_rc3::IfcStructuralLoadOrResult(data);
            case 1101: return new ::Ifc4x3_rc3::IfcStructuralLoadPlanarForce(data);
            case 1102: return new ::Ifc4x3_rc3::IfcStructuralLoadSingleDisplacement(data);
            case 1103: return new ::Ifc4x3_rc3::IfcStructuralLoadSingleDisplacementDistortion(data);
            case 1104: return new ::Ifc4x3_rc3::IfcStructuralLoadSingleForce(data);
            case 1105: return new ::Ifc4x3_rc3::IfcStructuralLoadSingleForceWarping(data);
            case 1106: return new ::Ifc4x3_rc3::IfcStructuralLoadStatic(data);
            case 1107: return new ::Ifc4x3_rc3::IfcStructuralLoadTemperature(data);
            case 1108: return new ::Ifc4x3_rc3::IfcStructuralMember(data);
            case 1109: return new ::Ifc4x3_rc3::IfcStructuralPlanarAction(data);
            case 1110: return new ::Ifc4x3_rc3::IfcStructuralPointAction(data);
            case 1111: return new ::Ifc4x3_rc3::IfcStructuralPointConnection(data);
            case 1112: return new ::Ifc4x3_rc3::IfcStructuralPointReaction(data);
            case 1113: return new ::Ifc4x3_rc3::IfcStructuralReaction(data);
            case 1114: return new ::Ifc4x3_rc3::IfcStructuralResultGroup(data);
            case 1115: return new ::Ifc4x3_rc3::IfcStructuralSurfaceAction(data);
            case 1116: return new ::Ifc4x3_rc3::IfcStructuralSurfaceActivityTypeEnum(data);
            case 1117: return new ::Ifc4x3_rc3::IfcStructuralSurfaceConnection(data);
            case 1118: return new ::Ifc4x3_rc3::IfcStructuralSurfaceMember(data);
            case 1119: return new ::Ifc4x3_rc3::IfcStructuralSurfaceMemberTypeEnum(data);
            case 1120: return new ::Ifc4x3_rc3::IfcStructuralSurfaceMemberVarying(data);
            case 1121: return new ::Ifc4x3_rc3::IfcStructuralSurfaceReaction(data);
            case 1122: return new ::Ifc4x3_rc3::IfcStyledItem(data);
            case 1123: return new ::Ifc4x3_rc3::IfcStyledRepresentation(data);
            case 1124: return new ::Ifc4x3_rc3::IfcStyleModel(data);
            case 1125: return new ::Ifc4x3_rc3::IfcSubContractResource(data);
            case 1126: return new ::Ifc4x3_rc3::IfcSubContractResourceType(data);
            case 1127: return new ::Ifc4x3_rc3::IfcSubContractResourceTypeEnum(data);
            case 1128: return new ::Ifc4x3_rc3::IfcSubedge(data);
            case 1129: return new ::Ifc4x3_rc3::IfcSurface(data);
            case 1130: return new ::Ifc4x3_rc3::IfcSurfaceCurve(data);
            case 1131: return new ::Ifc4x3_rc3::IfcSurfaceCurveSweptAreaSolid(data);
            case 1132: return new ::Ifc4x3_rc3::IfcSurfaceFeature(data);
            case 1133: return new ::Ifc4x3_rc3::IfcSurfaceFeatureTypeEnum(data);
            case 1134: return new ::Ifc4x3_rc3::IfcSurfaceOfLinearExtrusion(data);
            case 1135: return new ::Ifc4x3_rc3::IfcSurfaceOfRevolution(data);
            case 1137: return new ::Ifc4x3_rc3::IfcSurfaceReinforcementArea(data);
            case 1138: return new ::Ifc4x3_rc3::IfcSurfaceSide(data);
            case 1139: return new ::Ifc4x3_rc3::IfcSurfaceStyle(data);
            case 1141: return new ::Ifc4x3_rc3::IfcSurfaceStyleLighting(data);
            case 1142: return new ::Ifc4x3_rc3::IfcSurfaceStyleRefraction(data);
            case 1143: return new ::Ifc4x3_rc3::IfcSurfaceStyleRendering(data);
            case 1144: return new ::Ifc4x3_rc3::IfcSurfaceStyleShading(data);
            case 1145: return new ::Ifc4x3_rc3::IfcSurfaceStyleWithTextures(data);
            case 1146: return new ::Ifc4x3_rc3::IfcSurfaceTexture(data);
            case 1147: return new ::Ifc4x3_rc3::IfcSweptAreaSolid(data);
            case 1148: return new ::Ifc4x3_rc3::IfcSweptDiskSolid(data);
            case 1149: return new ::Ifc4x3_rc3::IfcSweptDiskSolidPolygonal(data);
            case 1150: return new ::Ifc4x3_rc3::IfcSweptSurface(data);
            case 1151: return new ::Ifc4x3_rc3::IfcSwitchingDevice(data);
            case 1152: return new ::Ifc4x3_rc3::IfcSwitchingDeviceType(data);
            case 1153: return new ::Ifc4x3_rc3::IfcSwitchingDeviceTypeEnum(data);
            case 1154: return new ::Ifc4x3_rc3::IfcSystem(data);
            case 1155: return new ::Ifc4x3_rc3::IfcSystemFurnitureElement(data);
            case 1156: return new ::Ifc4x3_rc3::IfcSystemFurnitureElementType(data);
            case 1157: return new ::Ifc4x3_rc3::IfcSystemFurnitureElementTypeEnum(data);
            case 1158: return new ::Ifc4x3_rc3::IfcTable(data);
            case 1159: return new ::Ifc4x3_rc3::IfcTableColumn(data);
            case 1160: return new ::Ifc4x3_rc3::IfcTableRow(data);
            case 1161: return new ::Ifc4x3_rc3::IfcTank(data);
            case 1162: return new ::Ifc4x3_rc3::IfcTankType(data);
            case 1163: return new ::Ifc4x3_rc3::IfcTankTypeEnum(data);
            case 1164: return new ::Ifc4x3_rc3::IfcTask(data);
            case 1165: return new ::Ifc4x3_rc3::IfcTaskDurationEnum(data);
            case 1166: return new ::Ifc4x3_rc3::IfcTaskTime(data);
            case 1167: return new ::Ifc4x3_rc3::IfcTaskTimeRecurring(data);
            case 1168: return new ::Ifc4x3_rc3::IfcTaskType(data);
            case 1169: return new ::Ifc4x3_rc3::IfcTaskTypeEnum(data);
            case 1170: return new ::Ifc4x3_rc3::IfcTelecomAddress(data);
            case 1171: return new ::Ifc4x3_rc3::IfcTemperatureGradientMeasure(data);
            case 1172: return new ::Ifc4x3_rc3::IfcTemperatureRateOfChangeMeasure(data);
            case 1173: return new ::Ifc4x3_rc3::IfcTendon(data);
            case 1174: return new ::Ifc4x3_rc3::IfcTendonAnchor(data);
            case 1175: return new ::Ifc4x3_rc3::IfcTendonAnchorType(data);
            case 1176: return new ::Ifc4x3_rc3::IfcTendonAnchorTypeEnum(data);
            case 1177: return new ::Ifc4x3_rc3::IfcTendonConduit(data);
            case 1178: return new ::Ifc4x3_rc3::IfcTendonConduitType(data);
            case 1179: return new ::Ifc4x3_rc3::IfcTendonConduitTypeEnum(data);
            case 1180: return new ::Ifc4x3_rc3::IfcTendonType(data);
            case 1181: return new ::Ifc4x3_rc3::IfcTendonTypeEnum(data);
            case 1182: return new ::Ifc4x3_rc3::IfcTessellatedFaceSet(data);
            case 1183: return new ::Ifc4x3_rc3::IfcTessellatedItem(data);
            case 1184: return new ::Ifc4x3_rc3::IfcText(data);
            case 1185: return new ::Ifc4x3_rc3::IfcTextAlignment(data);
            case 1186: return new ::Ifc4x3_rc3::IfcTextDecoration(data);
            case 1187: return new ::Ifc4x3_rc3::IfcTextFontName(data);
            case 1189: return new ::Ifc4x3_rc3::IfcTextLiteral(data);
            case 1190: return new ::Ifc4x3_rc3::IfcTextLiteralWithExtent(data);
            case 1191: return new ::Ifc4x3_rc3::IfcTextPath(data);
            case 1192: return new ::Ifc4x3_rc3::IfcTextStyle(data);
            case 1193: return new ::Ifc4x3_rc3::IfcTextStyleFontModel(data);
            case 1194: return new ::Ifc4x3_rc3::IfcTextStyleForDefinedFont(data);
            case 1195: return new ::Ifc4x3_rc3::IfcTextStyleTextModel(data);
            case 1196: return new ::Ifc4x3_rc3::IfcTextTransformation(data);
            case 1197: return new ::Ifc4x3_rc3::IfcTextureCoordinate(data);
            case 1198: return new ::Ifc4x3_rc3::IfcTextureCoordinateGenerator(data);
            case 1199: return new ::Ifc4x3_rc3::IfcTextureMap(data);
            case 1200: return new ::Ifc4x3_rc3::IfcTextureVertex(data);
            case 1201: return new ::Ifc4x3_rc3::IfcTextureVertexList(data);
            case 1202: return new ::Ifc4x3_rc3::IfcThermalAdmittanceMeasure(data);
            case 1203: return new ::Ifc4x3_rc3::IfcThermalConductivityMeasure(data);
            case 1204: return new ::Ifc4x3_rc3::IfcThermalExpansionCoefficientMeasure(data);
            case 1205: return new ::Ifc4x3_rc3::IfcThermalResistanceMeasure(data);
            case 1206: return new ::Ifc4x3_rc3::IfcThermalTransmittanceMeasure(data);
            case 1207: return new ::Ifc4x3_rc3::IfcThermodynamicTemperatureMeasure(data);
            case 1208: return new ::Ifc4x3_rc3::IfcThirdOrderPolynomialSpiral(data);
            case 1209: return new ::Ifc4x3_rc3::IfcTime(data);
            case 1210: return new ::Ifc4x3_rc3::IfcTimeMeasure(data);
            case 1212: return new ::Ifc4x3_rc3::IfcTimePeriod(data);
            case 1213: return new ::Ifc4x3_rc3::IfcTimeSeries(data);
            case 1214: return new ::Ifc4x3_rc3::IfcTimeSeriesDataTypeEnum(data);
            case 1215: return new ::Ifc4x3_rc3::IfcTimeSeriesValue(data);
            case 1216: return new ::Ifc4x3_rc3::IfcTimeStamp(data);
            case 1217: return new ::Ifc4x3_rc3::IfcTopologicalRepresentationItem(data);
            case 1218: return new ::Ifc4x3_rc3::IfcTopologyRepresentation(data);
            case 1219: return new ::Ifc4x3_rc3::IfcToroidalSurface(data);
            case 1220: return new ::Ifc4x3_rc3::IfcTorqueMeasure(data);
            case 1221: return new ::Ifc4x3_rc3::IfcTrackElement(data);
            case 1222: return new ::Ifc4x3_rc3::IfcTrackElementType(data);
            case 1223: return new ::Ifc4x3_rc3::IfcTrackElementTypeEnum(data);
            case 1224: return new ::Ifc4x3_rc3::IfcTransformer(data);
            case 1225: return new ::Ifc4x3_rc3::IfcTransformerType(data);
            case 1226: return new ::Ifc4x3_rc3::IfcTransformerTypeEnum(data);
            case 1227: return new ::Ifc4x3_rc3::IfcTransitionCode(data);
            case 1229: return new ::Ifc4x3_rc3::IfcTransportElement(data);
            case 1230: return new ::Ifc4x3_rc3::IfcTransportElementFixedTypeEnum(data);
            case 1231: return new ::Ifc4x3_rc3::IfcTransportElementNonFixedTypeEnum(data);
            case 1232: return new ::Ifc4x3_rc3::IfcTransportElementType(data);
            case 1234: return new ::Ifc4x3_rc3::IfcTrapeziumProfileDef(data);
            case 1235: return new ::Ifc4x3_rc3::IfcTriangulatedFaceSet(data);
            case 1236: return new ::Ifc4x3_rc3::IfcTriangulatedIrregularNetwork(data);
            case 1237: return new ::Ifc4x3_rc3::IfcTrimmedCurve(data);
            case 1238: return new ::Ifc4x3_rc3::IfcTrimmingPreference(data);
            case 1240: return new ::Ifc4x3_rc3::IfcTShapeProfileDef(data);
            case 1241: return new ::Ifc4x3_rc3::IfcTubeBundle(data);
            case 1242: return new ::Ifc4x3_rc3::IfcTubeBundleType(data);
            case 1243: return new ::Ifc4x3_rc3::IfcTubeBundleTypeEnum(data);
            case 1244: return new ::Ifc4x3_rc3::IfcTypeObject(data);
            case 1245: return new ::Ifc4x3_rc3::IfcTypeProcess(data);
            case 1246: return new ::Ifc4x3_rc3::IfcTypeProduct(data);
            case 1247: return new ::Ifc4x3_rc3::IfcTypeResource(data);
            case 1249: return new ::Ifc4x3_rc3::IfcUnitaryControlElement(data);
            case 1250: return new ::Ifc4x3_rc3::IfcUnitaryControlElementType(data);
            case 1251: return new ::Ifc4x3_rc3::IfcUnitaryControlElementTypeEnum(data);
            case 1252: return new ::Ifc4x3_rc3::IfcUnitaryEquipment(data);
            case 1253: return new ::Ifc4x3_rc3::IfcUnitaryEquipmentType(data);
            case 1254: return new ::Ifc4x3_rc3::IfcUnitaryEquipmentTypeEnum(data);
            case 1255: return new ::Ifc4x3_rc3::IfcUnitAssignment(data);
            case 1256: return new ::Ifc4x3_rc3::IfcUnitEnum(data);
            case 1257: return new ::Ifc4x3_rc3::IfcURIReference(data);
            case 1258: return new ::Ifc4x3_rc3::IfcUShapeProfileDef(data);
            case 1260: return new ::Ifc4x3_rc3::IfcValve(data);
            case 1261: return new ::Ifc4x3_rc3::IfcValveType(data);
            case 1262: return new ::Ifc4x3_rc3::IfcValveTypeEnum(data);
            case 1263: return new ::Ifc4x3_rc3::IfcVaporPermeabilityMeasure(data);
            case 1264: return new ::Ifc4x3_rc3::IfcVector(data);
            case 1266: return new ::Ifc4x3_rc3::IfcVertex(data);
            case 1267: return new ::Ifc4x3_rc3::IfcVertexLoop(data);
            case 1268: return new ::Ifc4x3_rc3::IfcVertexPoint(data);
            case 1269: return new ::Ifc4x3_rc3::IfcVibrationDamper(data);
            case 1270: return new ::Ifc4x3_rc3::IfcVibrationDamperType(data);
            case 1271: return new ::Ifc4x3_rc3::IfcVibrationDamperTypeEnum(data);
            case 1272: return new ::Ifc4x3_rc3::IfcVibrationIsolator(data);
            case 1273: return new ::Ifc4x3_rc3::IfcVibrationIsolatorType(data);
            case 1274: return new ::Ifc4x3_rc3::IfcVibrationIsolatorTypeEnum(data);
            case 1275: return new ::Ifc4x3_rc3::IfcVienneseBend(data);
            case 1276: return new ::Ifc4x3_rc3::IfcVirtualElement(data);
            case 1277: return new ::Ifc4x3_rc3::IfcVirtualGridIntersection(data);
            case 1278: return new ::Ifc4x3_rc3::IfcVoidingFeature(data);
            case 1279: return new ::Ifc4x3_rc3::IfcVoidingFeatureTypeEnum(data);
            case 1280: return new ::Ifc4x3_rc3::IfcVoidStratum(data);
            case 1281: return new ::Ifc4x3_rc3::IfcVolumeMeasure(data);
            case 1282: return new ::Ifc4x3_rc3::IfcVolumetricFlowRateMeasure(data);
            case 1283: return new ::Ifc4x3_rc3::IfcWall(data);
            case 1284: return new ::Ifc4x3_rc3::IfcWallElementedCase(data);
            case 1285: return new ::Ifc4x3_rc3::IfcWallStandardCase(data);
            case 1286: return new ::Ifc4x3_rc3::IfcWallType(data);
            case 1287: return new ::Ifc4x3_rc3::IfcWallTypeEnum(data);
            case 1288: return new ::Ifc4x3_rc3::IfcWarpingConstantMeasure(data);
            case 1289: return new ::Ifc4x3_rc3::IfcWarpingMomentMeasure(data);
            case 1291: return new ::Ifc4x3_rc3::IfcWasteTerminal(data);
            case 1292: return new ::Ifc4x3_rc3::IfcWasteTerminalType(data);
            case 1293: return new ::Ifc4x3_rc3::IfcWasteTerminalTypeEnum(data);
            case 1294: return new ::Ifc4x3_rc3::IfcWaterStratum(data);
            case 1295: return new ::Ifc4x3_rc3::IfcWindow(data);
            case 1296: return new ::Ifc4x3_rc3::IfcWindowLiningProperties(data);
            case 1297: return new ::Ifc4x3_rc3::IfcWindowPanelOperationEnum(data);
            case 1298: return new ::Ifc4x3_rc3::IfcWindowPanelPositionEnum(data);
            case 1299: return new ::Ifc4x3_rc3::IfcWindowPanelProperties(data);
            case 1300: return new ::Ifc4x3_rc3::IfcWindowStandardCase(data);
            case 1301: return new ::Ifc4x3_rc3::IfcWindowStyle(data);
            case 1302: return new ::Ifc4x3_rc3::IfcWindowStyleConstructionEnum(data);
            case 1303: return new ::Ifc4x3_rc3::IfcWindowStyleOperationEnum(data);
            case 1304: return new ::Ifc4x3_rc3::IfcWindowType(data);
            case 1305: return new ::Ifc4x3_rc3::IfcWindowTypeEnum(data);
            case 1306: return new ::Ifc4x3_rc3::IfcWindowTypePartitioningEnum(data);
            case 1307: return new ::Ifc4x3_rc3::IfcWorkCalendar(data);
            case 1308: return new ::Ifc4x3_rc3::IfcWorkCalendarTypeEnum(data);
            case 1309: return new ::Ifc4x3_rc3::IfcWorkControl(data);
            case 1310: return new ::Ifc4x3_rc3::IfcWorkPlan(data);
            case 1311: return new ::Ifc4x3_rc3::IfcWorkPlanTypeEnum(data);
            case 1312: return new ::Ifc4x3_rc3::IfcWorkSchedule(data);
            case 1313: return new ::Ifc4x3_rc3::IfcWorkScheduleTypeEnum(data);
            case 1314: return new ::Ifc4x3_rc3::IfcWorkTime(data);
            case 1315: return new ::Ifc4x3_rc3::IfcZone(data);
            case 1316: return new ::Ifc4x3_rc3::IfcZShapeProfileDef(data);
            default: throw IfcParse::IfcException(data->type()->name() + " cannot be instantiated");
        }

    }
};


#if defined(__clang__)
__attribute__((optnone))
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC push_options
#pragma GCC optimize ("O0")
#elif defined(_MSC_VER)
#pragma optimize("", off)
#endif
        
IfcParse::schema_definition* IFC4X3_RC3_populate_schema() {
    IFC4X3_RC3_types[0] = new type_declaration("IfcAbsorbedDoseMeasure", 0, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1] = new type_declaration("IfcAccelerationMeasure", 1, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("EMAIL");
        items.push_back("FAX");
        items.push_back("NOTDEFINED");
        items.push_back("PHONE");
        items.push_back("POST");
        items.push_back("USERDEFINED");
        items.push_back("VERBAL");
        IFC4X3_RC3_types[3] = new enumeration_type("IfcActionRequestTypeEnum", 3, items);
    }
    {
        std::vector<std::string> items; items.reserve(27);
        items.push_back("BRAKES");
        items.push_back("BUOYANCY");
        items.push_back("COMPLETION_G1");
        items.push_back("CREEP");
        items.push_back("CURRENT");
        items.push_back("DEAD_LOAD_G");
        items.push_back("EARTHQUAKE_E");
        items.push_back("ERECTION");
        items.push_back("FIRE");
        items.push_back("ICE");
        items.push_back("IMPACT");
        items.push_back("IMPULSE");
        items.push_back("LACK_OF_FIT");
        items.push_back("LIVE_LOAD_Q");
        items.push_back("NOTDEFINED");
        items.push_back("PRESTRESSING_P");
        items.push_back("PROPPING");
        items.push_back("RAIN");
        items.push_back("SETTLEMENT_U");
        items.push_back("SHRINKAGE");
        items.push_back("SNOW_S");
        items.push_back("SYSTEM_IMPERFECTION");
        items.push_back("TEMPERATURE_T");
        items.push_back("TRANSPORT");
        items.push_back("USERDEFINED");
        items.push_back("WAVE");
        items.push_back("WIND_W");
        IFC4X3_RC3_types[4] = new enumeration_type("IfcActionSourceTypeEnum", 4, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("EXTRAORDINARY_A");
        items.push_back("NOTDEFINED");
        items.push_back("PERMANENT_G");
        items.push_back("USERDEFINED");
        items.push_back("VARIABLE_Q");
        IFC4X3_RC3_types[5] = new enumeration_type("IfcActionTypeEnum", 5, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("ELECTRICACTUATOR");
        items.push_back("HANDOPERATEDACTUATOR");
        items.push_back("HYDRAULICACTUATOR");
        items.push_back("NOTDEFINED");
        items.push_back("PNEUMATICACTUATOR");
        items.push_back("THERMOSTATICACTUATOR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[11] = new enumeration_type("IfcActuatorTypeEnum", 11, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("DISTRIBUTIONPOINT");
        items.push_back("HOME");
        items.push_back("OFFICE");
        items.push_back("SITE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[13] = new enumeration_type("IfcAddressTypeEnum", 13, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("CONSTANTFLOW");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("VARIABLEFLOWPRESSUREDEPENDANT");
        items.push_back("VARIABLEFLOWPRESSUREINDEPENDANT");
        IFC4X3_RC3_types[20] = new enumeration_type("IfcAirTerminalBoxTypeEnum", 20, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("DIFFUSER");
        items.push_back("GRILLE");
        items.push_back("LOUVRE");
        items.push_back("NOTDEFINED");
        items.push_back("REGISTER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[22] = new enumeration_type("IfcAirTerminalTypeEnum", 22, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("FIXEDPLATECOUNTERFLOWEXCHANGER");
        items.push_back("FIXEDPLATECROSSFLOWEXCHANGER");
        items.push_back("FIXEDPLATEPARALLELFLOWEXCHANGER");
        items.push_back("HEATPIPE");
        items.push_back("NOTDEFINED");
        items.push_back("ROTARYWHEEL");
        items.push_back("RUNAROUNDCOILLOOP");
        items.push_back("THERMOSIPHONCOILTYPEHEATEXCHANGERS");
        items.push_back("THERMOSIPHONSEALEDTUBEHEATEXCHANGERS");
        items.push_back("TWINTOWERENTHALPYRECOVERYLOOPS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[25] = new enumeration_type("IfcAirToAirHeatRecoveryTypeEnum", 25, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BELL");
        items.push_back("BREAKGLASSBUTTON");
        items.push_back("LIGHT");
        items.push_back("MANUALPULLBOX");
        items.push_back("NOTDEFINED");
        items.push_back("RAILWAYCROCODILE");
        items.push_back("RAILWAYDETONATOR");
        items.push_back("SIREN");
        items.push_back("USERDEFINED");
        items.push_back("WHISTLE");
        IFC4X3_RC3_types[28] = new enumeration_type("IfcAlarmTypeEnum", 28, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("BLOSSCURVE");
        items.push_back("CONSTANTCANT");
        items.push_back("COSINECURVE");
        items.push_back("HELMERTCURVE");
        items.push_back("LINEARTRANSITION");
        items.push_back("SINECURVE");
        items.push_back("VIENNESEBEND");
        IFC4X3_RC3_types[32] = new enumeration_type("IfcAlignmentCantSegmentTypeEnum", 32, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BLOSSCURVE");
        items.push_back("CIRCULARARC");
        items.push_back("CLOTHOID");
        items.push_back("COSINECURVE");
        items.push_back("CUBIC");
        items.push_back("CUBICSPIRAL");
        items.push_back("HELMERTCURVE");
        items.push_back("LINE");
        items.push_back("SINECURVE");
        items.push_back("VIENNESEBEND");
        IFC4X3_RC3_types[35] = new enumeration_type("IfcAlignmentHorizontalSegmentTypeEnum", 35, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[38] = new enumeration_type("IfcAlignmentTypeEnum", 38, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("CIRCULARARC");
        items.push_back("CLOTHOID");
        items.push_back("CONSTANTGRADIENT");
        items.push_back("PARABOLICARC");
        IFC4X3_RC3_types[41] = new enumeration_type("IfcAlignmentVerticalSegmentTypeEnum", 41, items);
    }
    IFC4X3_RC3_types[42] = new type_declaration("IfcAmountOfSubstanceMeasure", 42, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("IN_PLANE_LOADING_2D");
        items.push_back("LOADING_3D");
        items.push_back("NOTDEFINED");
        items.push_back("OUT_PLANE_LOADING_2D");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[43] = new enumeration_type("IfcAnalysisModelTypeEnum", 43, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("FIRST_ORDER_THEORY");
        items.push_back("FULL_NONLINEAR_THEORY");
        items.push_back("NOTDEFINED");
        items.push_back("SECOND_ORDER_THEORY");
        items.push_back("THIRD_ORDER_THEORY");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[44] = new enumeration_type("IfcAnalysisTheoryTypeEnum", 44, items);
    }
    IFC4X3_RC3_types[45] = new type_declaration("IfcAngularVelocityMeasure", 45, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("ASBUILTAREA");
        items.push_back("ASBUILTLINE");
        items.push_back("ASBUILTPOINT");
        items.push_back("ASSUMEDAREA");
        items.push_back("ASSUMEDLINE");
        items.push_back("ASSUMEDPOINT");
        items.push_back("NON_PHYSICAL_SIGNAL");
        items.push_back("NOTDEFINED");
        items.push_back("SUPERELEVATIONEVENT");
        items.push_back("USERDEFINED");
        items.push_back("WIDTHEVENT");
        IFC4X3_RC3_types[48] = new enumeration_type("IfcAnnotationTypeEnum", 48, items);
    }
    IFC4X3_RC3_types[58] = new type_declaration("IfcAreaDensityMeasure", 58, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[59] = new type_declaration("IfcAreaMeasure", 59, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("ADD");
        items.push_back("DIVIDE");
        items.push_back("MULTIPLY");
        items.push_back("SUBTRACT");
        IFC4X3_RC3_types[60] = new enumeration_type("IfcArithmeticOperatorEnum", 60, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("FACTORY");
        items.push_back("NOTDEFINED");
        items.push_back("SITE");
        IFC4X3_RC3_types[61] = new enumeration_type("IfcAssemblyPlaceEnum", 61, items);
    }
    {
        std::vector<std::string> items; items.reserve(14);
        items.push_back("AMPLIFIER");
        items.push_back("CAMERA");
        items.push_back("DISPLAY");
        items.push_back("MICROPHONE");
        items.push_back("NOTDEFINED");
        items.push_back("PLAYER");
        items.push_back("PROJECTOR");
        items.push_back("RAILWAY_COMMUNICATION_TERMINAL");
        items.push_back("RECEIVER");
        items.push_back("SPEAKER");
        items.push_back("SWITCHER");
        items.push_back("TELEPHONE");
        items.push_back("TUNER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[66] = new enumeration_type("IfcAudioVisualApplianceTypeEnum", 66, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("CIRCULAR_ARC");
        items.push_back("ELLIPTIC_ARC");
        items.push_back("HYPERBOLIC_ARC");
        items.push_back("PARABOLIC_ARC");
        items.push_back("POLYLINE_FORM");
        items.push_back("UNSPECIFIED");
        IFC4X3_RC3_types[109] = new enumeration_type("IfcBSplineCurveForm", 109, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("CONICAL_SURF");
        items.push_back("CYLINDRICAL_SURF");
        items.push_back("GENERALISED_CONE");
        items.push_back("PLANE_SURF");
        items.push_back("QUADRIC_SURF");
        items.push_back("RULED_SURF");
        items.push_back("SPHERICAL_SURF");
        items.push_back("SURF_OF_LINEAR_EXTRUSION");
        items.push_back("SURF_OF_REVOLUTION");
        items.push_back("TOROIDAL_SURF");
        items.push_back("UNSPECIFIED");
        IFC4X3_RC3_types[112] = new enumeration_type("IfcBSplineSurfaceForm", 112, items);
    }
    {
        std::vector<std::string> items; items.reserve(14);
        items.push_back("BEAM");
        items.push_back("CORNICE");
        items.push_back("DIAPHRAGM");
        items.push_back("EDGEBEAM");
        items.push_back("GIRDER_SEGMENT");
        items.push_back("HATSTONE");
        items.push_back("HOLLOWCORE");
        items.push_back("JOIST");
        items.push_back("LINTEL");
        items.push_back("NOTDEFINED");
        items.push_back("PIERCAP");
        items.push_back("SPANDREL");
        items.push_back("T_BEAM");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[75] = new enumeration_type("IfcBeamTypeEnum", 75, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("FIXED_MOVEMENT");
        items.push_back("FREE_MOVEMENT");
        items.push_back("GUIDED_LONGITUDINAL");
        items.push_back("GUIDED_TRANSVERSAL");
        items.push_back("NOTDEFINED");
        IFC4X3_RC3_types[78] = new enumeration_type("IfcBearingTypeDisplacementEnum", 78, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("CYLINDRICAL");
        items.push_back("DISK");
        items.push_back("ELASTOMERIC");
        items.push_back("GUIDE");
        items.push_back("NOTDEFINED");
        items.push_back("POT");
        items.push_back("ROCKER");
        items.push_back("ROLLER");
        items.push_back("SPHERICAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[79] = new enumeration_type("IfcBearingTypeEnum", 79, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("EQUALTO");
        items.push_back("GREATERTHAN");
        items.push_back("GREATERTHANOREQUALTO");
        items.push_back("INCLUDEDIN");
        items.push_back("INCLUDES");
        items.push_back("LESSTHAN");
        items.push_back("LESSTHANOREQUALTO");
        items.push_back("NOTEQUALTO");
        items.push_back("NOTINCLUDEDIN");
        items.push_back("NOTINCLUDES");
        IFC4X3_RC3_types[80] = new enumeration_type("IfcBenchmarkEnum", 80, items);
    }
    IFC4X3_RC3_types[82] = new type_declaration("IfcBinary", 82, new simple_type(simple_type::binary_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("STEAM");
        items.push_back("USERDEFINED");
        items.push_back("WATER");
        IFC4X3_RC3_types[87] = new enumeration_type("IfcBoilerTypeEnum", 87, items);
    }
    IFC4X3_RC3_types[88] = new type_declaration("IfcBoolean", 88, new simple_type(simple_type::boolean_type));
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("DIFFERENCE");
        items.push_back("INTERSECTION");
        items.push_back("UNION");
        IFC4X3_RC3_types[91] = new enumeration_type("IfcBooleanOperator", 91, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("ABUTMENT");
        items.push_back("DECK");
        items.push_back("DECK_SEGMENT");
        items.push_back("FOUNDATION");
        items.push_back("NOTDEFINED");
        items.push_back("PIER");
        items.push_back("PIER_SEGMENT");
        items.push_back("PYLON");
        items.push_back("SUBSTRUCTURE");
        items.push_back("SUPERSTRUCTURE");
        items.push_back("SURFACESTRUCTURE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[106] = new enumeration_type("IfcBridgePartTypeEnum", 106, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("ARCHED");
        items.push_back("CABLE_STAYED");
        items.push_back("CANTILEVER");
        items.push_back("CULVERT");
        items.push_back("FRAMEWORK");
        items.push_back("GIRDER");
        items.push_back("NOTDEFINED");
        items.push_back("SUSPENSION");
        items.push_back("TRUSS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[107] = new enumeration_type("IfcBridgeTypeEnum", 107, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("APRON");
        items.push_back("ARMOURUNIT");
        items.push_back("INSULATION");
        items.push_back("NOTDEFINED");
        items.push_back("PRECASTPANEL");
        items.push_back("SAFETYCAGE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[117] = new enumeration_type("IfcBuildingElementPartTypeEnum", 117, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("COMPLEX");
        items.push_back("ELEMENT");
        items.push_back("NOTDEFINED");
        items.push_back("PARTIAL");
        items.push_back("PROVISIONFORSPACE");
        items.push_back("PROVISIONFORVOID");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[120] = new enumeration_type("IfcBuildingElementProxyTypeEnum", 120, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("EROSIONPREVENTION");
        items.push_back("FENESTRATION");
        items.push_back("FOUNDATION");
        items.push_back("LOADBEARING");
        items.push_back("NOTDEFINED");
        items.push_back("OUTERSHELL");
        items.push_back("PRESTRESSING");
        items.push_back("REINFORCING");
        items.push_back("SHADING");
        items.push_back("TRANSPORT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[123] = new enumeration_type("IfcBuildingSystemTypeEnum", 123, items);
    }
    {
        std::vector<std::string> items; items.reserve(14);
        items.push_back("EROSIONPREVENTION");
        items.push_back("FENESTRATION");
        items.push_back("FOUNDATION");
        items.push_back("LOADBEARING");
        items.push_back("MOORING");
        items.push_back("MOORINGSYSTEM");
        items.push_back("NOTDEFINED");
        items.push_back("OUTERSHELL");
        items.push_back("PRESTRESSING");
        items.push_back("REINFORCING");
        items.push_back("SHADING");
        items.push_back("TRACKCIRCUIT");
        items.push_back("TRANSPORT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[127] = new enumeration_type("IfcBuiltSystemTypeEnum", 127, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[130] = new enumeration_type("IfcBurnerTypeEnum", 130, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BEND");
        items.push_back("CROSS");
        items.push_back("NOTDEFINED");
        items.push_back("REDUCER");
        items.push_back("TEE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[133] = new enumeration_type("IfcCableCarrierFittingTypeEnum", 133, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CABLEBRACKET");
        items.push_back("CABLELADDERSEGMENT");
        items.push_back("CABLETRAYSEGMENT");
        items.push_back("CABLETRUNKINGSEGMENT");
        items.push_back("CATENARYWIRE");
        items.push_back("CONDUITSEGMENT");
        items.push_back("DROPPER");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[136] = new enumeration_type("IfcCableCarrierSegmentTypeEnum", 136, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("CONNECTOR");
        items.push_back("ENTRY");
        items.push_back("EXIT");
        items.push_back("FANOUT");
        items.push_back("JUNCTION");
        items.push_back("NOTDEFINED");
        items.push_back("TRANSITION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[139] = new enumeration_type("IfcCableFittingTypeEnum", 139, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("BUSBARSEGMENT");
        items.push_back("CABLESEGMENT");
        items.push_back("CONDUCTORSEGMENT");
        items.push_back("CONTACTWIRESEGMENT");
        items.push_back("CORESEGMENT");
        items.push_back("FIBERSEGMENT");
        items.push_back("FIBERTUBE");
        items.push_back("NOTDEFINED");
        items.push_back("OPTICALCABLESEGMENT");
        items.push_back("STITCHWIRE");
        items.push_back("USERDEFINED");
        items.push_back("WIREPAIRSEGMENT");
        IFC4X3_RC3_types[142] = new enumeration_type("IfcCableSegmentTypeEnum", 142, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("CAISSON");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("WELL");
        IFC4X3_RC3_types[145] = new enumeration_type("IfcCaissonFoundationTypeEnum", 145, items);
    }
    IFC4X3_RC3_types[146] = new type_declaration("IfcCardinalPointReference", 146, new simple_type(simple_type::integer_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ADDED");
        items.push_back("DELETED");
        items.push_back("MODIFIED");
        items.push_back("NOCHANGE");
        items.push_back("NOTDEFINED");
        IFC4X3_RC3_types[157] = new enumeration_type("IfcChangeActionEnum", 157, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("AIRCOOLED");
        items.push_back("HEATRECOVERY");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("WATERCOOLED");
        IFC4X3_RC3_types[160] = new enumeration_type("IfcChillerTypeEnum", 160, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[163] = new enumeration_type("IfcChimneyTypeEnum", 163, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("DXCOOLINGCOIL");
        items.push_back("ELECTRICHEATINGCOIL");
        items.push_back("GASHEATINGCOIL");
        items.push_back("HYDRONICCOIL");
        items.push_back("NOTDEFINED");
        items.push_back("STEAMHEATINGCOIL");
        items.push_back("USERDEFINED");
        items.push_back("WATERCOOLINGCOIL");
        items.push_back("WATERHEATINGCOIL");
        IFC4X3_RC3_types[177] = new enumeration_type("IfcCoilTypeEnum", 177, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("COLUMN");
        items.push_back("NOTDEFINED");
        items.push_back("PIERSTEM");
        items.push_back("PIERSTEM_SEGMENT");
        items.push_back("PILASTER");
        items.push_back("STANDCOLUMN");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[186] = new enumeration_type("IfcColumnTypeEnum", 186, items);
    }
    {
        std::vector<std::string> items; items.reserve(23);
        items.push_back("ANTENNA");
        items.push_back("AUTOMATON");
        items.push_back("COMPUTER");
        items.push_back("FAX");
        items.push_back("GATEWAY");
        items.push_back("INTELLIGENT_PERIPHERAL");
        items.push_back("IP_NETWORK_EQUIPMENT");
        items.push_back("MODEM");
        items.push_back("NETWORKAPPLIANCE");
        items.push_back("NETWORKBRIDGE");
        items.push_back("NETWORKHUB");
        items.push_back("NOTDEFINED");
        items.push_back("OPTICAL_NETWORK_UNIT");
        items.push_back("PRINTER");
        items.push_back("REPEATER");
        items.push_back("ROUTER");
        items.push_back("SCANNER");
        items.push_back("TELECOMMAND");
        items.push_back("TELEPHONYEXCHANGE");
        items.push_back("TRANSITIONCOMPONENT");
        items.push_back("TRANSPONDER");
        items.push_back("TRANSPORTEQUIPMENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[189] = new enumeration_type("IfcCommunicationsApplianceTypeEnum", 189, items);
    }
    IFC4X3_RC3_types[190] = new type_declaration("IfcComplexNumber", 190, new aggregation_type(aggregation_type::array_type, 1, 2, new simple_type(simple_type::real_type)));
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("P_COMPLEX");
        items.push_back("Q_COMPLEX");
        IFC4X3_RC3_types[193] = new enumeration_type("IfcComplexPropertyTemplateTypeEnum", 193, items);
    }
    IFC4X3_RC3_types[198] = new type_declaration("IfcCompoundPlaneAngleMeasure", 198, new aggregation_type(aggregation_type::list_type, 3, 4, new simple_type(simple_type::integer_type)));
    {
        std::vector<std::string> items; items.reserve(17);
        items.push_back("BOOSTER");
        items.push_back("DYNAMIC");
        items.push_back("HERMETIC");
        items.push_back("NOTDEFINED");
        items.push_back("OPENTYPE");
        items.push_back("RECIPROCATING");
        items.push_back("ROLLINGPISTON");
        items.push_back("ROTARY");
        items.push_back("ROTARYVANE");
        items.push_back("SCROLL");
        items.push_back("SEMIHERMETIC");
        items.push_back("SINGLESCREW");
        items.push_back("SINGLESTAGE");
        items.push_back("TROCHOIDAL");
        items.push_back("TWINSCREW");
        items.push_back("USERDEFINED");
        items.push_back("WELDEDSHELLHERMETIC");
        IFC4X3_RC3_types[201] = new enumeration_type("IfcCompressorTypeEnum", 201, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("AIRCOOLED");
        items.push_back("EVAPORATIVECOOLED");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("WATERCOOLED");
        items.push_back("WATERCOOLEDBRAZEDPLATE");
        items.push_back("WATERCOOLEDSHELLCOIL");
        items.push_back("WATERCOOLEDSHELLTUBE");
        items.push_back("WATERCOOLEDTUBEINTUBE");
        IFC4X3_RC3_types[204] = new enumeration_type("IfcCondenserTypeEnum", 204, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("ATEND");
        items.push_back("ATPATH");
        items.push_back("ATSTART");
        items.push_back("NOTDEFINED");
        IFC4X3_RC3_types[212] = new enumeration_type("IfcConnectionTypeEnum", 212, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ADVISORY");
        items.push_back("HARD");
        items.push_back("NOTDEFINED");
        items.push_back("SOFT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[215] = new enumeration_type("IfcConstraintEnum", 215, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("DEMOLISHING");
        items.push_back("EARTHMOVING");
        items.push_back("ERECTING");
        items.push_back("HEATING");
        items.push_back("LIGHTING");
        items.push_back("NOTDEFINED");
        items.push_back("PAVING");
        items.push_back("PUMPING");
        items.push_back("TRANSPORTING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[218] = new enumeration_type("IfcConstructionEquipmentResourceTypeEnum", 218, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("AGGREGATES");
        items.push_back("CONCRETE");
        items.push_back("DRYWALL");
        items.push_back("FUEL");
        items.push_back("GYPSUM");
        items.push_back("MASONRY");
        items.push_back("METAL");
        items.push_back("NOTDEFINED");
        items.push_back("PLASTIC");
        items.push_back("USERDEFINED");
        items.push_back("WOOD");
        IFC4X3_RC3_types[221] = new enumeration_type("IfcConstructionMaterialResourceTypeEnum", 221, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("ASSEMBLY");
        items.push_back("FORMWORK");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[224] = new enumeration_type("IfcConstructionProductResourceTypeEnum", 224, items);
    }
    IFC4X3_RC3_types[228] = new type_declaration("IfcContextDependentMeasure", 228, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("FLOATING");
        items.push_back("MULTIPOSITION");
        items.push_back("NOTDEFINED");
        items.push_back("PROGRAMMABLE");
        items.push_back("PROPORTIONAL");
        items.push_back("TWOPOSITION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[233] = new enumeration_type("IfcControllerTypeEnum", 233, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BELTCONVEYOR");
        items.push_back("BUCKETCONVEYOR");
        items.push_back("CHUTECONVEYOR");
        items.push_back("NOTDEFINED");
        items.push_back("SCREWCONVEYOR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[238] = new enumeration_type("IfcConveyorSegmentTypeEnum", 238, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("ACTIVE");
        items.push_back("NOTDEFINED");
        items.push_back("PASSIVE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[241] = new enumeration_type("IfcCooledBeamTypeEnum", 241, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("MECHANICALFORCEDDRAFT");
        items.push_back("MECHANICALINDUCEDDRAFT");
        items.push_back("NATURALDRAFT");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[244] = new enumeration_type("IfcCoolingTowerTypeEnum", 244, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[250] = new enumeration_type("IfcCostItemTypeEnum", 250, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("BUDGET");
        items.push_back("COSTPLAN");
        items.push_back("ESTIMATE");
        items.push_back("NOTDEFINED");
        items.push_back("PRICEDBILLOFQUANTITIES");
        items.push_back("SCHEDULEOFRATES");
        items.push_back("TENDER");
        items.push_back("UNPRICEDBILLOFQUANTITIES");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[252] = new enumeration_type("IfcCostScheduleTypeEnum", 252, items);
    }
    IFC4X3_RC3_types[254] = new type_declaration("IfcCountMeasure", 254, new simple_type(simple_type::number_type));
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("ARMOUR");
        items.push_back("BALLASTBED");
        items.push_back("CORE");
        items.push_back("FILTER");
        items.push_back("NOTDEFINED");
        items.push_back("PAVEMENT");
        items.push_back("PROTECTION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[257] = new enumeration_type("IfcCourseTypeEnum", 257, items);
    }
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("CEILING");
        items.push_back("CLADDING");
        items.push_back("COPING");
        items.push_back("FLOORING");
        items.push_back("INSULATION");
        items.push_back("MEMBRANE");
        items.push_back("MOLDING");
        items.push_back("NOTDEFINED");
        items.push_back("ROOFING");
        items.push_back("SKIRTINGBOARD");
        items.push_back("SLEEVING");
        items.push_back("USERDEFINED");
        items.push_back("WRAPPING");
        IFC4X3_RC3_types[260] = new enumeration_type("IfcCoveringTypeEnum", 260, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("OFFICE");
        items.push_back("SITE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[263] = new enumeration_type("IfcCrewResourceTypeEnum", 263, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[271] = new enumeration_type("IfcCurtainWallTypeEnum", 271, items);
    }
    IFC4X3_RC3_types[272] = new type_declaration("IfcCurvatureMeasure", 272, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("LINEAR");
        items.push_back("LOG_LINEAR");
        items.push_back("LOG_LOG");
        items.push_back("NOTDEFINED");
        IFC4X3_RC3_types[277] = new enumeration_type("IfcCurveInterpolationEnum", 277, items);
    }
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("BACKDRAFTDAMPER");
        items.push_back("BALANCINGDAMPER");
        items.push_back("BLASTDAMPER");
        items.push_back("CONTROLDAMPER");
        items.push_back("FIREDAMPER");
        items.push_back("FIRESMOKEDAMPER");
        items.push_back("FUMEHOODEXHAUST");
        items.push_back("GRAVITYDAMPER");
        items.push_back("GRAVITYRELIEFDAMPER");
        items.push_back("NOTDEFINED");
        items.push_back("RELIEFDAMPER");
        items.push_back("SMOKEDAMPER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[290] = new enumeration_type("IfcDamperTypeEnum", 290, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("MEASURED");
        items.push_back("NOTDEFINED");
        items.push_back("PREDICTED");
        items.push_back("SIMULATED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[291] = new enumeration_type("IfcDataOriginEnum", 291, items);
    }
    IFC4X3_RC3_types[292] = new type_declaration("IfcDate", 292, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[293] = new type_declaration("IfcDateTime", 293, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[294] = new type_declaration("IfcDayInMonthNumber", 294, new simple_type(simple_type::integer_type));
    IFC4X3_RC3_types[295] = new type_declaration("IfcDayInWeekNumber", 295, new simple_type(simple_type::integer_type));
    {
        std::vector<std::string> items; items.reserve(53);
        items.push_back("ACCELERATIONUNIT");
        items.push_back("ANGULARVELOCITYUNIT");
        items.push_back("AREADENSITYUNIT");
        items.push_back("COMPOUNDPLANEANGLEUNIT");
        items.push_back("CURVATUREUNIT");
        items.push_back("DYNAMICVISCOSITYUNIT");
        items.push_back("HEATFLUXDENSITYUNIT");
        items.push_back("HEATINGVALUEUNIT");
        items.push_back("INTEGERCOUNTRATEUNIT");
        items.push_back("IONCONCENTRATIONUNIT");
        items.push_back("ISOTHERMALMOISTURECAPACITYUNIT");
        items.push_back("KINEMATICVISCOSITYUNIT");
        items.push_back("LINEARFORCEUNIT");
        items.push_back("LINEARMOMENTUNIT");
        items.push_back("LINEARSTIFFNESSUNIT");
        items.push_back("LINEARVELOCITYUNIT");
        items.push_back("LUMINOUSINTENSITYDISTRIBUTIONUNIT");
        items.push_back("MASSDENSITYUNIT");
        items.push_back("MASSFLOWRATEUNIT");
        items.push_back("MASSPERLENGTHUNIT");
        items.push_back("MODULUSOFELASTICITYUNIT");
        items.push_back("MODULUSOFLINEARSUBGRADEREACTIONUNIT");
        items.push_back("MODULUSOFROTATIONALSUBGRADEREACTIONUNIT");
        items.push_back("MODULUSOFSUBGRADEREACTIONUNIT");
        items.push_back("MOISTUREDIFFUSIVITYUNIT");
        items.push_back("MOLECULARWEIGHTUNIT");
        items.push_back("MOMENTOFINERTIAUNIT");
        items.push_back("PHUNIT");
        items.push_back("PLANARFORCEUNIT");
        items.push_back("ROTATIONALFREQUENCYUNIT");
        items.push_back("ROTATIONALMASSUNIT");
        items.push_back("ROTATIONALSTIFFNESSUNIT");
        items.push_back("SECTIONAREAINTEGRALUNIT");
        items.push_back("SECTIONMODULUSUNIT");
        items.push_back("SHEARMODULUSUNIT");
        items.push_back("SOUNDPOWERLEVELUNIT");
        items.push_back("SOUNDPOWERUNIT");
        items.push_back("SOUNDPRESSURELEVELUNIT");
        items.push_back("SOUNDPRESSUREUNIT");
        items.push_back("SPECIFICHEATCAPACITYUNIT");
        items.push_back("TEMPERATUREGRADIENTUNIT");
        items.push_back("TEMPERATURERATEOFCHANGEUNIT");
        items.push_back("THERMALADMITTANCEUNIT");
        items.push_back("THERMALCONDUCTANCEUNIT");
        items.push_back("THERMALEXPANSIONCOEFFICIENTUNIT");
        items.push_back("THERMALRESISTANCEUNIT");
        items.push_back("THERMALTRANSMITTANCEUNIT");
        items.push_back("TORQUEUNIT");
        items.push_back("USERDEFINED");
        items.push_back("VAPORPERMEABILITYUNIT");
        items.push_back("VOLUMETRICFLOWRATEUNIT");
        items.push_back("WARPINGCONSTANTUNIT");
        items.push_back("WARPINGMOMENTUNIT");
        IFC4X3_RC3_types[303] = new enumeration_type("IfcDerivedUnitEnum", 303, items);
    }
    IFC4X3_RC3_types[304] = new type_declaration("IfcDescriptiveMeasure", 304, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[306] = new type_declaration("IfcDimensionCount", 306, new simple_type(simple_type::integer_type));
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NEGATIVE");
        items.push_back("POSITIVE");
        IFC4X3_RC3_types[308] = new enumeration_type("IfcDirectionSenseEnum", 308, items);
    }
    {
        std::vector<std::string> items; items.reserve(21);
        items.push_back("ANCHORPLATE");
        items.push_back("BIRDPROTECTION");
        items.push_back("BRACKET");
        items.push_back("CABLEARRANGER");
        items.push_back("ELASTIC_CUSHION");
        items.push_back("EXPANSION_JOINT_DEVICE");
        items.push_back("INSULATOR");
        items.push_back("LOCK");
        items.push_back("NOTDEFINED");
        items.push_back("PANEL_STRENGTHENING");
        items.push_back("POINTMACHINEMOUNTINGDEVICE");
        items.push_back("POINT_MACHINE_LOCKING_DEVICE");
        items.push_back("RAILBRACE");
        items.push_back("RAILPAD");
        items.push_back("RAIL_LUBRICATION");
        items.push_back("RAIL_MECHANICAL_EQUIPMENT");
        items.push_back("SHOE");
        items.push_back("SLIDINGCHAIR");
        items.push_back("SOUNDABSORPTION");
        items.push_back("TENSIONINGEQUIPMENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[314] = new enumeration_type("IfcDiscreteAccessoryTypeEnum", 314, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CONSUMERUNIT");
        items.push_back("DISTRIBUTIONBOARD");
        items.push_back("DISTRIBUTIONFRAME");
        items.push_back("MOTORCONTROLCENTRE");
        items.push_back("NOTDEFINED");
        items.push_back("SWITCHBOARD");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[317] = new enumeration_type("IfcDistributionBoardTypeEnum", 317, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("FORMEDDUCT");
        items.push_back("INSPECTIONCHAMBER");
        items.push_back("INSPECTIONPIT");
        items.push_back("MANHOLE");
        items.push_back("METERCHAMBER");
        items.push_back("NOTDEFINED");
        items.push_back("SUMP");
        items.push_back("TRENCH");
        items.push_back("USERDEFINED");
        items.push_back("VALVECHAMBER");
        IFC4X3_RC3_types[320] = new enumeration_type("IfcDistributionChamberElementTypeEnum", 320, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CABLE");
        items.push_back("CABLECARRIER");
        items.push_back("DUCT");
        items.push_back("NOTDEFINED");
        items.push_back("PIPE");
        items.push_back("USERDEFINED");
        items.push_back("WIRELESS");
        IFC4X3_RC3_types[329] = new enumeration_type("IfcDistributionPortTypeEnum", 329, items);
    }
    {
        std::vector<std::string> items; items.reserve(47);
        items.push_back("AIRCONDITIONING");
        items.push_back("AUDIOVISUAL");
        items.push_back("CATENARY_SYSTEM");
        items.push_back("CHEMICAL");
        items.push_back("CHILLEDWATER");
        items.push_back("COMMUNICATION");
        items.push_back("COMPRESSEDAIR");
        items.push_back("CONDENSERWATER");
        items.push_back("CONTROL");
        items.push_back("CONVEYING");
        items.push_back("DATA");
        items.push_back("DISPOSAL");
        items.push_back("DOMESTICCOLDWATER");
        items.push_back("DOMESTICHOTWATER");
        items.push_back("DRAINAGE");
        items.push_back("EARTHING");
        items.push_back("ELECTRICAL");
        items.push_back("ELECTROACOUSTIC");
        items.push_back("EXHAUST");
        items.push_back("FIREPROTECTION");
        items.push_back("FUEL");
        items.push_back("GAS");
        items.push_back("HAZARDOUS");
        items.push_back("HEATING");
        items.push_back("LIGHTING");
        items.push_back("LIGHTNINGPROTECTION");
        items.push_back("MUNICIPALSOLIDWASTE");
        items.push_back("NOTDEFINED");
        items.push_back("OIL");
        items.push_back("OPERATIONAL");
        items.push_back("OVERHEAD_CONTACTLINE_SYSTEM");
        items.push_back("POWERGENERATION");
        items.push_back("RAINWATER");
        items.push_back("REFRIGERATION");
        items.push_back("RETURN_CIRCUIT");
        items.push_back("SECURITY");
        items.push_back("SEWAGE");
        items.push_back("SIGNAL");
        items.push_back("STORMWATER");
        items.push_back("TELEPHONE");
        items.push_back("TV");
        items.push_back("USERDEFINED");
        items.push_back("VACUUM");
        items.push_back("VENT");
        items.push_back("VENTILATION");
        items.push_back("WASTEWATER");
        items.push_back("WATERSUPPLY");
        IFC4X3_RC3_types[331] = new enumeration_type("IfcDistributionSystemEnum", 331, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("CONFIDENTIAL");
        items.push_back("NOTDEFINED");
        items.push_back("PERSONAL");
        items.push_back("PUBLIC");
        items.push_back("RESTRICTED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[332] = new enumeration_type("IfcDocumentConfidentialityEnum", 332, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("DRAFT");
        items.push_back("FINAL");
        items.push_back("FINALDRAFT");
        items.push_back("NOTDEFINED");
        items.push_back("REVISION");
        IFC4X3_RC3_types[337] = new enumeration_type("IfcDocumentStatusEnum", 337, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("DOUBLE_ACTING");
        items.push_back("FIXEDPANEL");
        items.push_back("FOLDING");
        items.push_back("NOTDEFINED");
        items.push_back("REVOLVING");
        items.push_back("ROLLINGUP");
        items.push_back("SLIDING");
        items.push_back("SWINGING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[340] = new enumeration_type("IfcDoorPanelOperationEnum", 340, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("LEFT");
        items.push_back("MIDDLE");
        items.push_back("NOTDEFINED");
        items.push_back("RIGHT");
        IFC4X3_RC3_types[341] = new enumeration_type("IfcDoorPanelPositionEnum", 341, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("ALUMINIUM");
        items.push_back("ALUMINIUM_PLASTIC");
        items.push_back("ALUMINIUM_WOOD");
        items.push_back("HIGH_GRADE_STEEL");
        items.push_back("NOTDEFINED");
        items.push_back("PLASTIC");
        items.push_back("STEEL");
        items.push_back("USERDEFINED");
        items.push_back("WOOD");
        IFC4X3_RC3_types[345] = new enumeration_type("IfcDoorStyleConstructionEnum", 345, items);
    }
    {
        std::vector<std::string> items; items.reserve(18);
        items.push_back("DOUBLE_DOOR_DOUBLE_SWING");
        items.push_back("DOUBLE_DOOR_FOLDING");
        items.push_back("DOUBLE_DOOR_SINGLE_SWING");
        items.push_back("DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT");
        items.push_back("DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT");
        items.push_back("DOUBLE_DOOR_SLIDING");
        items.push_back("DOUBLE_SWING_LEFT");
        items.push_back("DOUBLE_SWING_RIGHT");
        items.push_back("FOLDING_TO_LEFT");
        items.push_back("FOLDING_TO_RIGHT");
        items.push_back("NOTDEFINED");
        items.push_back("REVOLVING");
        items.push_back("ROLLINGUP");
        items.push_back("SINGLE_SWING_LEFT");
        items.push_back("SINGLE_SWING_RIGHT");
        items.push_back("SLIDING_TO_LEFT");
        items.push_back("SLIDING_TO_RIGHT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[346] = new enumeration_type("IfcDoorStyleOperationEnum", 346, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("BOOM_BARRIER");
        items.push_back("DOOR");
        items.push_back("GATE");
        items.push_back("NOTDEFINED");
        items.push_back("TRAPDOOR");
        items.push_back("TURNSTILE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[348] = new enumeration_type("IfcDoorTypeEnum", 348, items);
    }
    {
        std::vector<std::string> items; items.reserve(25);
        items.push_back("DOUBLE_PANEL_DOUBLE_SWING");
        items.push_back("DOUBLE_PANEL_FOLDING");
        items.push_back("DOUBLE_PANEL_LIFTING_VERTICAL");
        items.push_back("DOUBLE_PANEL_SINGLE_SWING");
        items.push_back("DOUBLE_PANEL_SINGLE_SWING_OPPOSITE_LEFT");
        items.push_back("DOUBLE_PANEL_SINGLE_SWING_OPPOSITE_RIGHT");
        items.push_back("DOUBLE_PANEL_SLIDING");
        items.push_back("DOUBLE_SWING_LEFT");
        items.push_back("DOUBLE_SWING_RIGHT");
        items.push_back("FOLDING_TO_LEFT");
        items.push_back("FOLDING_TO_RIGHT");
        items.push_back("LIFTING_HORIZONTAL");
        items.push_back("LIFTING_VERTICAL_LEFT");
        items.push_back("LIFTING_VERTICAL_RIGHT");
        items.push_back("NOTDEFINED");
        items.push_back("REVOLVING_HORIZONTAL");
        items.push_back("REVOLVING_VERTICAL");
        items.push_back("ROLLINGUP");
        items.push_back("SINGLE_SWING_LEFT");
        items.push_back("SINGLE_SWING_RIGHT");
        items.push_back("SLIDING_TO_LEFT");
        items.push_back("SLIDING_TO_RIGHT");
        items.push_back("SWING_FIXED_LEFT");
        items.push_back("SWING_FIXED_RIGHT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[349] = new enumeration_type("IfcDoorTypeOperationEnum", 349, items);
    }
    IFC4X3_RC3_types[350] = new type_declaration("IfcDoseEquivalentMeasure", 350, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("BEND");
        items.push_back("CONNECTOR");
        items.push_back("ENTRY");
        items.push_back("EXIT");
        items.push_back("JUNCTION");
        items.push_back("NOTDEFINED");
        items.push_back("OBSTRUCTION");
        items.push_back("TRANSITION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[355] = new enumeration_type("IfcDuctFittingTypeEnum", 355, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("FLEXIBLESEGMENT");
        items.push_back("NOTDEFINED");
        items.push_back("RIGIDSEGMENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[358] = new enumeration_type("IfcDuctSegmentTypeEnum", 358, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("FLATOVAL");
        items.push_back("NOTDEFINED");
        items.push_back("RECTANGULAR");
        items.push_back("ROUND");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[361] = new enumeration_type("IfcDuctSilencerTypeEnum", 361, items);
    }
    IFC4X3_RC3_types[362] = new type_declaration("IfcDuration", 362, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[363] = new type_declaration("IfcDynamicViscosityMeasure", 363, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("BASE_EXCAVATION");
        items.push_back("CUT");
        items.push_back("DREDGING");
        items.push_back("EXCAVATION");
        items.push_back("NOTDEFINED");
        items.push_back("OVEREXCAVATION");
        items.push_back("PAVEMENTMILLING");
        items.push_back("STEPEXCAVATION");
        items.push_back("TOPSOILREMOVAL");
        items.push_back("TRENCH");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[365] = new enumeration_type("IfcEarthworksCutTypeEnum", 365, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("BACKFILL");
        items.push_back("COUNTERWEIGHT");
        items.push_back("EMBANKMENT");
        items.push_back("NOTDEFINED");
        items.push_back("SLOPEFILL");
        items.push_back("SUBGRADE");
        items.push_back("SUBGRADEBED");
        items.push_back("TRANSITIONSECTION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[368] = new enumeration_type("IfcEarthworksFillTypeEnum", 368, items);
    }
    {
        std::vector<std::string> items; items.reserve(18);
        items.push_back("DISHWASHER");
        items.push_back("ELECTRICCOOKER");
        items.push_back("FREESTANDINGELECTRICHEATER");
        items.push_back("FREESTANDINGFAN");
        items.push_back("FREESTANDINGWATERCOOLER");
        items.push_back("FREESTANDINGWATERHEATER");
        items.push_back("FREEZER");
        items.push_back("FRIDGE_FREEZER");
        items.push_back("HANDDRYER");
        items.push_back("KITCHENMACHINE");
        items.push_back("MICROWAVE");
        items.push_back("NOTDEFINED");
        items.push_back("PHOTOCOPIER");
        items.push_back("REFRIGERATOR");
        items.push_back("TUMBLEDRYER");
        items.push_back("USERDEFINED");
        items.push_back("VENDINGMACHINE");
        items.push_back("WASHINGMACHINE");
        IFC4X3_RC3_types[374] = new enumeration_type("IfcElectricApplianceTypeEnum", 374, items);
    }
    IFC4X3_RC3_types[375] = new type_declaration("IfcElectricCapacitanceMeasure", 375, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[376] = new type_declaration("IfcElectricChargeMeasure", 376, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[377] = new type_declaration("IfcElectricConductanceMeasure", 377, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[378] = new type_declaration("IfcElectricCurrentMeasure", 378, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("CONSUMERUNIT");
        items.push_back("DISTRIBUTIONBOARD");
        items.push_back("MOTORCONTROLCENTRE");
        items.push_back("NOTDEFINED");
        items.push_back("SWITCHBOARD");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[381] = new enumeration_type("IfcElectricDistributionBoardTypeEnum", 381, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("BATTERY");
        items.push_back("CAPACITOR");
        items.push_back("CAPACITORBANK");
        items.push_back("COMPENSATOR");
        items.push_back("HARMONICFILTER");
        items.push_back("INDUCTOR");
        items.push_back("INDUCTORBANK");
        items.push_back("NOTDEFINED");
        items.push_back("RECHARGER");
        items.push_back("UPS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[384] = new enumeration_type("IfcElectricFlowStorageDeviceTypeEnum", 384, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("ELECTRONICFILTER");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[387] = new enumeration_type("IfcElectricFlowTreatmentDeviceTypeEnum", 387, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("CHP");
        items.push_back("ENGINEGENERATOR");
        items.push_back("NOTDEFINED");
        items.push_back("STANDALONE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[390] = new enumeration_type("IfcElectricGeneratorTypeEnum", 390, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("DC");
        items.push_back("INDUCTION");
        items.push_back("NOTDEFINED");
        items.push_back("POLYPHASE");
        items.push_back("RELUCTANCESYNCHRONOUS");
        items.push_back("SYNCHRONOUS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[393] = new enumeration_type("IfcElectricMotorTypeEnum", 393, items);
    }
    IFC4X3_RC3_types[394] = new type_declaration("IfcElectricResistanceMeasure", 394, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("NOTDEFINED");
        items.push_back("RELAY");
        items.push_back("TIMECLOCK");
        items.push_back("TIMEDELAY");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[397] = new enumeration_type("IfcElectricTimeControlTypeEnum", 397, items);
    }
    IFC4X3_RC3_types[398] = new type_declaration("IfcElectricVoltageMeasure", 398, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(30);
        items.push_back("ABUTMENT");
        items.push_back("ACCESSORY_ASSEMBLY");
        items.push_back("ARCH");
        items.push_back("BEAM_GRID");
        items.push_back("BRACED_FRAME");
        items.push_back("CROSS_BRACING");
        items.push_back("DECK");
        items.push_back("DILATATIONPANEL");
        items.push_back("ENTRANCEWORKS");
        items.push_back("GIRDER");
        items.push_back("GRID");
        items.push_back("MAST");
        items.push_back("NOTDEFINED");
        items.push_back("PIER");
        items.push_back("PYLON");
        items.push_back("RAIL_MECHANICAL_EQUIPMENT_ASSEMBLY");
        items.push_back("REINFORCEMENT_UNIT");
        items.push_back("RIGID_FRAME");
        items.push_back("SHELTER");
        items.push_back("SIGNALASSEMBLY");
        items.push_back("SLAB_FIELD");
        items.push_back("SUMPBUSTER");
        items.push_back("SUPPORTINGASSEMBLY");
        items.push_back("SUSPENSIONASSEMBLY");
        items.push_back("TRACKPANEL");
        items.push_back("TRACTION_SWITCHING_ASSEMBLY");
        items.push_back("TRAFFIC_CALMING_DEVICE");
        items.push_back("TRUSS");
        items.push_back("TURNOUTPANEL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[403] = new enumeration_type("IfcElementAssemblyTypeEnum", 403, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("COMPLEX");
        items.push_back("ELEMENT");
        items.push_back("PARTIAL");
        IFC4X3_RC3_types[406] = new enumeration_type("IfcElementCompositionEnum", 406, items);
    }
    IFC4X3_RC3_types[413] = new type_declaration("IfcEnergyMeasure", 413, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("EXTERNALCOMBUSTION");
        items.push_back("INTERNALCOMBUSTION");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[416] = new enumeration_type("IfcEngineTypeEnum", 416, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("DIRECTEVAPORATIVEAIRWASHER");
        items.push_back("DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER");
        items.push_back("DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER");
        items.push_back("DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER");
        items.push_back("DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER");
        items.push_back("INDIRECTDIRECTCOMBINATION");
        items.push_back("INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER");
        items.push_back("INDIRECTEVAPORATIVEPACKAGEAIRCOOLER");
        items.push_back("INDIRECTEVAPORATIVEWETCOIL");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[419] = new enumeration_type("IfcEvaporativeCoolerTypeEnum", 419, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("DIRECTEXPANSION");
        items.push_back("DIRECTEXPANSIONBRAZEDPLATE");
        items.push_back("DIRECTEXPANSIONSHELLANDTUBE");
        items.push_back("DIRECTEXPANSIONTUBEINTUBE");
        items.push_back("FLOODEDSHELLANDTUBE");
        items.push_back("NOTDEFINED");
        items.push_back("SHELLANDCOIL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[422] = new enumeration_type("IfcEvaporatorTypeEnum", 422, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("EVENTCOMPLEX");
        items.push_back("EVENTMESSAGE");
        items.push_back("EVENTRULE");
        items.push_back("EVENTTIME");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[425] = new enumeration_type("IfcEventTriggerTypeEnum", 425, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ENDEVENT");
        items.push_back("INTERMEDIATEEVENT");
        items.push_back("NOTDEFINED");
        items.push_back("STARTEVENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[427] = new enumeration_type("IfcEventTypeEnum", 427, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("EXTERNAL");
        items.push_back("EXTERNAL_EARTH");
        items.push_back("EXTERNAL_FIRE");
        items.push_back("EXTERNAL_WATER");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[436] = new enumeration_type("IfcExternalSpatialElementTypeEnum", 436, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("ABOVEGROUND");
        items.push_back("BELOWGROUND");
        items.push_back("JUNCTION");
        items.push_back("LEVELCROSSING");
        items.push_back("NOTDEFINED");
        items.push_back("SEGMENT");
        items.push_back("SUBSTRUCTURE");
        items.push_back("SUPERSTRUCTURE");
        items.push_back("TERMINAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[449] = new enumeration_type("IfcFacilityPartCommonTypeEnum", 449, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("LATERAL");
        items.push_back("LONGITUDINAL");
        items.push_back("NOTDEFINED");
        items.push_back("REGION");
        items.push_back("USERDEFINED");
        items.push_back("VERTICAL");
        IFC4X3_RC3_types[451] = new enumeration_type("IfcFacilityUsageEnum", 451, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CENTRIFUGALAIRFOIL");
        items.push_back("CENTRIFUGALBACKWARDINCLINEDCURVED");
        items.push_back("CENTRIFUGALFORWARDCURVED");
        items.push_back("CENTRIFUGALRADIAL");
        items.push_back("NOTDEFINED");
        items.push_back("PROPELLORAXIAL");
        items.push_back("TUBEAXIAL");
        items.push_back("USERDEFINED");
        items.push_back("VANEAXIAL");
        IFC4X3_RC3_types[455] = new enumeration_type("IfcFanTypeEnum", 455, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("GLUE");
        items.push_back("MORTAR");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("WELD");
        IFC4X3_RC3_types[458] = new enumeration_type("IfcFastenerTypeEnum", 458, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("AIRPARTICLEFILTER");
        items.push_back("COMPRESSEDAIRFILTER");
        items.push_back("NOTDEFINED");
        items.push_back("ODORFILTER");
        items.push_back("OILFILTER");
        items.push_back("STRAINER");
        items.push_back("USERDEFINED");
        items.push_back("WATERFILTER");
        IFC4X3_RC3_types[468] = new enumeration_type("IfcFilterTypeEnum", 468, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("BREECHINGINLET");
        items.push_back("FIREHYDRANT");
        items.push_back("FIREMONITOR");
        items.push_back("HOSEREEL");
        items.push_back("NOTDEFINED");
        items.push_back("SPRINKLER");
        items.push_back("SPRINKLERDEFLECTOR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[471] = new enumeration_type("IfcFireSuppressionTerminalTypeEnum", 471, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("SINK");
        items.push_back("SOURCE");
        items.push_back("SOURCEANDSINK");
        IFC4X3_RC3_types[475] = new enumeration_type("IfcFlowDirectionEnum", 475, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("AMMETER");
        items.push_back("COMBINED");
        items.push_back("FREQUENCYMETER");
        items.push_back("NOTDEFINED");
        items.push_back("PHASEANGLEMETER");
        items.push_back("POWERFACTORMETER");
        items.push_back("PRESSUREGAUGE");
        items.push_back("THERMOMETER");
        items.push_back("USERDEFINED");
        items.push_back("VOLTMETER");
        items.push_back("VOLTMETER_PEAK");
        items.push_back("VOLTMETER_RMS");
        IFC4X3_RC3_types[480] = new enumeration_type("IfcFlowInstrumentTypeEnum", 480, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("ENERGYMETER");
        items.push_back("GASMETER");
        items.push_back("NOTDEFINED");
        items.push_back("OILMETER");
        items.push_back("USERDEFINED");
        items.push_back("WATERMETER");
        IFC4X3_RC3_types[483] = new enumeration_type("IfcFlowMeterTypeEnum", 483, items);
    }
    IFC4X3_RC3_types[494] = new type_declaration("IfcFontStyle", 494, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[495] = new type_declaration("IfcFontVariant", 495, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[496] = new type_declaration("IfcFontWeight", 496, new simple_type(simple_type::string_type));
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CAISSON_FOUNDATION");
        items.push_back("FOOTING_BEAM");
        items.push_back("NOTDEFINED");
        items.push_back("PAD_FOOTING");
        items.push_back("PILE_CAP");
        items.push_back("STRIP_FOOTING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[499] = new enumeration_type("IfcFootingTypeEnum", 499, items);
    }
    IFC4X3_RC3_types[500] = new type_declaration("IfcForceMeasure", 500, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[501] = new type_declaration("IfcFrequencyMeasure", 501, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BED");
        items.push_back("CHAIR");
        items.push_back("DESK");
        items.push_back("FILECABINET");
        items.push_back("NOTDEFINED");
        items.push_back("SHELF");
        items.push_back("SOFA");
        items.push_back("TABLE");
        items.push_back("TECHNICALCABINET");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[506] = new enumeration_type("IfcFurnitureTypeEnum", 506, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("SOIL_BORING_POINT");
        items.push_back("TERRAIN");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[509] = new enumeration_type("IfcGeographicElementTypeEnum", 509, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("ELEVATION_VIEW");
        items.push_back("GRAPH_VIEW");
        items.push_back("MODEL_VIEW");
        items.push_back("NOTDEFINED");
        items.push_back("PLAN_VIEW");
        items.push_back("REFLECTED_PLAN_VIEW");
        items.push_back("SECTION_VIEW");
        items.push_back("SKETCH_VIEW");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[511] = new enumeration_type("IfcGeometricProjectionEnum", 511, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("GLOBAL_COORDS");
        items.push_back("LOCAL_COORDS");
        IFC4X3_RC3_types[523] = new enumeration_type("IfcGlobalOrLocalEnum", 523, items);
    }
    IFC4X3_RC3_types[522] = new type_declaration("IfcGloballyUniqueId", 522, new simple_type(simple_type::string_type));
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("IRREGULAR");
        items.push_back("NOTDEFINED");
        items.push_back("RADIAL");
        items.push_back("RECTANGULAR");
        items.push_back("TRIANGULAR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[529] = new enumeration_type("IfcGridTypeEnum", 529, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("NOTDEFINED");
        items.push_back("PLATE");
        items.push_back("SHELLANDTUBE");
        items.push_back("TURNOUTHEATING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[535] = new enumeration_type("IfcHeatExchangerTypeEnum", 535, items);
    }
    IFC4X3_RC3_types[536] = new type_declaration("IfcHeatFluxDensityMeasure", 536, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[537] = new type_declaration("IfcHeatingValueMeasure", 537, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(15);
        items.push_back("ADIABATICAIRWASHER");
        items.push_back("ADIABATICATOMIZING");
        items.push_back("ADIABATICCOMPRESSEDAIRNOZZLE");
        items.push_back("ADIABATICPAN");
        items.push_back("ADIABATICRIGIDMEDIA");
        items.push_back("ADIABATICULTRASONIC");
        items.push_back("ADIABATICWETTEDELEMENT");
        items.push_back("ASSISTEDBUTANE");
        items.push_back("ASSISTEDELECTRIC");
        items.push_back("ASSISTEDNATURALGAS");
        items.push_back("ASSISTEDPROPANE");
        items.push_back("ASSISTEDSTEAM");
        items.push_back("NOTDEFINED");
        items.push_back("STEAMINJECTION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[540] = new enumeration_type("IfcHumidifierTypeEnum", 540, items);
    }
    IFC4X3_RC3_types[541] = new type_declaration("IfcIdentifier", 541, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[542] = new type_declaration("IfcIlluminanceMeasure", 542, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BUMPER");
        items.push_back("CRASHCUSHION");
        items.push_back("DAMPINGSYSTEM");
        items.push_back("FENDER");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[546] = new enumeration_type("IfcImpactProtectionDeviceTypeEnum", 546, items);
    }
    IFC4X3_RC3_types[555] = new type_declaration("IfcInductanceMeasure", 555, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[556] = new type_declaration("IfcInteger", 556, new simple_type(simple_type::integer_type));
    IFC4X3_RC3_types[557] = new type_declaration("IfcIntegerCountRateMeasure", 557, new simple_type(simple_type::integer_type));
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("CYCLONIC");
        items.push_back("GREASE");
        items.push_back("NOTDEFINED");
        items.push_back("OIL");
        items.push_back("PETROL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[560] = new enumeration_type("IfcInterceptorTypeEnum", 560, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("EXTERNAL");
        items.push_back("EXTERNAL_EARTH");
        items.push_back("EXTERNAL_FIRE");
        items.push_back("EXTERNAL_WATER");
        items.push_back("INTERNAL");
        items.push_back("NOTDEFINED");
        IFC4X3_RC3_types[562] = new enumeration_type("IfcInternalOrExternalEnum", 562, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ASSETINVENTORY");
        items.push_back("FURNITUREINVENTORY");
        items.push_back("NOTDEFINED");
        items.push_back("SPACEINVENTORY");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[565] = new enumeration_type("IfcInventoryTypeEnum", 565, items);
    }
    IFC4X3_RC3_types[566] = new type_declaration("IfcIonConcentrationMeasure", 566, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[570] = new type_declaration("IfcIsothermalMoistureCapacityMeasure", 570, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("DATA");
        items.push_back("NOTDEFINED");
        items.push_back("POWER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[573] = new enumeration_type("IfcJunctionBoxTypeEnum", 573, items);
    }
    IFC4X3_RC3_types[576] = new type_declaration("IfcKinematicViscosityMeasure", 576, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("PIECEWISE_BEZIER_KNOTS");
        items.push_back("QUASI_UNIFORM_KNOTS");
        items.push_back("UNIFORM_KNOTS");
        items.push_back("UNSPECIFIED");
        IFC4X3_RC3_types[577] = new enumeration_type("IfcKnotType", 577, items);
    }
    IFC4X3_RC3_types[578] = new type_declaration("IfcLabel", 578, new simple_type(simple_type::string_type));
    {
        std::vector<std::string> items; items.reserve(21);
        items.push_back("ADMINISTRATION");
        items.push_back("CARPENTRY");
        items.push_back("CLEANING");
        items.push_back("CONCRETE");
        items.push_back("DRYWALL");
        items.push_back("ELECTRIC");
        items.push_back("FINISHING");
        items.push_back("FLOORING");
        items.push_back("GENERAL");
        items.push_back("HVAC");
        items.push_back("LANDSCAPING");
        items.push_back("MASONRY");
        items.push_back("NOTDEFINED");
        items.push_back("PAINTING");
        items.push_back("PAVING");
        items.push_back("PLUMBING");
        items.push_back("ROOFING");
        items.push_back("SITEGRADING");
        items.push_back("STEELWORK");
        items.push_back("SURVEYING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[581] = new enumeration_type("IfcLaborResourceTypeEnum", 581, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("COMPACTFLUORESCENT");
        items.push_back("FLUORESCENT");
        items.push_back("HALOGEN");
        items.push_back("HIGHPRESSUREMERCURY");
        items.push_back("HIGHPRESSURESODIUM");
        items.push_back("LED");
        items.push_back("METALHALIDE");
        items.push_back("NOTDEFINED");
        items.push_back("OLED");
        items.push_back("TUNGSTENFILAMENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[585] = new enumeration_type("IfcLampTypeEnum", 585, items);
    }
    IFC4X3_RC3_types[586] = new type_declaration("IfcLanguageId", 586, new named_type(IFC4X3_RC3_types[541]));
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("AXIS1");
        items.push_back("AXIS2");
        items.push_back("AXIS3");
        IFC4X3_RC3_types[588] = new enumeration_type("IfcLayerSetDirectionEnum", 588, items);
    }
    IFC4X3_RC3_types[589] = new type_declaration("IfcLengthMeasure", 589, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("TYPE_A");
        items.push_back("TYPE_B");
        items.push_back("TYPE_C");
        IFC4X3_RC3_types[593] = new enumeration_type("IfcLightDistributionCurveEnum", 593, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("COMPACTFLUORESCENT");
        items.push_back("FLUORESCENT");
        items.push_back("HIGHPRESSUREMERCURY");
        items.push_back("HIGHPRESSURESODIUM");
        items.push_back("LIGHTEMITTINGDIODE");
        items.push_back("LOWPRESSURESODIUM");
        items.push_back("LOWVOLTAGEHALOGEN");
        items.push_back("MAINVOLTAGEHALOGEN");
        items.push_back("METALHALIDE");
        items.push_back("NOTDEFINED");
        items.push_back("TUNGSTENFILAMENT");
        IFC4X3_RC3_types[596] = new enumeration_type("IfcLightEmissionSourceEnum", 596, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("DIRECTIONSOURCE");
        items.push_back("NOTDEFINED");
        items.push_back("POINTSOURCE");
        items.push_back("SECURITYLIGHTING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[599] = new enumeration_type("IfcLightFixtureTypeEnum", 599, items);
    }
    IFC4X3_RC3_types[609] = new type_declaration("IfcLinearForceMeasure", 609, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[610] = new type_declaration("IfcLinearMomentMeasure", 610, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[613] = new type_declaration("IfcLinearStiffnessMeasure", 613, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[614] = new type_declaration("IfcLinearVelocityMeasure", 614, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("HOSEREEL");
        items.push_back("LOADINGARM");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[618] = new enumeration_type("IfcLiquidTerminalTypeEnum", 618, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("LOAD_CASE");
        items.push_back("LOAD_COMBINATION");
        items.push_back("LOAD_GROUP");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[619] = new enumeration_type("IfcLoadGroupTypeEnum", 619, items);
    }
    IFC4X3_RC3_types[621] = new type_declaration("IfcLogical", 621, new simple_type(simple_type::logical_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("LOGICALAND");
        items.push_back("LOGICALNOTAND");
        items.push_back("LOGICALNOTOR");
        items.push_back("LOGICALOR");
        items.push_back("LOGICALXOR");
        IFC4X3_RC3_types[622] = new enumeration_type("IfcLogicalOperatorEnum", 622, items);
    }
    IFC4X3_RC3_types[625] = new type_declaration("IfcLuminousFluxMeasure", 625, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[626] = new type_declaration("IfcLuminousIntensityDistributionMeasure", 626, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[627] = new type_declaration("IfcLuminousIntensityMeasure", 627, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[628] = new type_declaration("IfcMagneticFluxDensityMeasure", 628, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[629] = new type_declaration("IfcMagneticFluxMeasure", 629, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(21);
        items.push_back("BARRIERBEACH");
        items.push_back("BREAKWATER");
        items.push_back("CANAL");
        items.push_back("DRYDOCK");
        items.push_back("FLOATINGDOCK");
        items.push_back("HYDROLIFT");
        items.push_back("JETTY");
        items.push_back("LAUNCHRECOVERY");
        items.push_back("MARINEDEFENCE");
        items.push_back("NAVIGATIONALCHANNEL");
        items.push_back("NOTDEFINED");
        items.push_back("PORT");
        items.push_back("QUAY");
        items.push_back("REVETMENT");
        items.push_back("SHIPLIFT");
        items.push_back("SHIPLOCK");
        items.push_back("SHIPYARD");
        items.push_back("SLIPWAY");
        items.push_back("USERDEFINED");
        items.push_back("WATERWAY");
        items.push_back("WATERWAYSHIPLIFT");
        IFC4X3_RC3_types[634] = new enumeration_type("IfcMarineFacilityTypeEnum", 634, items);
    }
    {
        std::vector<std::string> items; items.reserve(26);
        items.push_back("ABOVEWATERLINE");
        items.push_back("ANCHORAGE");
        items.push_back("APPROACHCHANNEL");
        items.push_back("BELOWWATERLINE");
        items.push_back("BERTHINGSTRUCTURE");
        items.push_back("CHAMBER");
        items.push_back("CILL_LEVEL");
        items.push_back("COPELEVEL");
        items.push_back("CORE");
        items.push_back("CREST");
        items.push_back("GATEHEAD");
        items.push_back("GUDINGSTRUCTURE");
        items.push_back("HIGHWATERLINE");
        items.push_back("LANDFIELD");
        items.push_back("LEEWARDSIDE");
        items.push_back("LOWWATERLINE");
        items.push_back("MANUFACTURING");
        items.push_back("NAVIGATIONALAREA");
        items.push_back("NOTDEFINED");
        items.push_back("PROTECTION");
        items.push_back("SHIPTRANSFER");
        items.push_back("STORAGE");
        items.push_back("USERDEFINED");
        items.push_back("VEHICLESERVICING");
        items.push_back("WATERFIELD");
        items.push_back("WEATHERSIDE");
        IFC4X3_RC3_types[635] = new enumeration_type("IfcMarinePartTypeEnum", 635, items);
    }
    IFC4X3_RC3_types[636] = new type_declaration("IfcMassDensityMeasure", 636, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[637] = new type_declaration("IfcMassFlowRateMeasure", 637, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[638] = new type_declaration("IfcMassMeasure", 638, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[639] = new type_declaration("IfcMassPerLengthMeasure", 639, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(17);
        items.push_back("ANCHORBOLT");
        items.push_back("BOLT");
        items.push_back("CHAIN");
        items.push_back("COUPLER");
        items.push_back("DOWEL");
        items.push_back("NAIL");
        items.push_back("NAILPLATE");
        items.push_back("NOTDEFINED");
        items.push_back("RAILFASTENING");
        items.push_back("RAILJOINT");
        items.push_back("RIVET");
        items.push_back("ROPE");
        items.push_back("SCREW");
        items.push_back("SHEARCONNECTOR");
        items.push_back("STAPLE");
        items.push_back("STUDSHEARCONNECTOR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[664] = new enumeration_type("IfcMechanicalFastenerTypeEnum", 664, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("AIRSTATION");
        items.push_back("FEEDAIRUNIT");
        items.push_back("NOTDEFINED");
        items.push_back("OXYGENGENERATOR");
        items.push_back("OXYGENPLANT");
        items.push_back("USERDEFINED");
        items.push_back("VACUUMSTATION");
        IFC4X3_RC3_types[667] = new enumeration_type("IfcMedicalDeviceTypeEnum", 667, items);
    }
    {
        std::vector<std::string> items; items.reserve(21);
        items.push_back("ARCH_SEGMENT");
        items.push_back("BRACE");
        items.push_back("CHORD");
        items.push_back("COLLAR");
        items.push_back("MEMBER");
        items.push_back("MULLION");
        items.push_back("NOTDEFINED");
        items.push_back("PLATE");
        items.push_back("POST");
        items.push_back("PURLIN");
        items.push_back("RAFTER");
        items.push_back("STAY_CABLE");
        items.push_back("STIFFENING_RIB");
        items.push_back("STRINGER");
        items.push_back("STRUCTURALCABLE");
        items.push_back("STRUT");
        items.push_back("STUD");
        items.push_back("SUSPENDER");
        items.push_back("SUSPENSION_CABLE");
        items.push_back("TIEBAR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[671] = new enumeration_type("IfcMemberTypeEnum", 671, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("ACCESSPOINT");
        items.push_back("BASEBANDUNIT");
        items.push_back("BASETRANSCEIVERSTATION");
        items.push_back("E_UTRAN_NODE_B");
        items.push_back("MASTERUNIT");
        items.push_back("NOTDEFINED");
        items.push_back("REMOTEUNIT");
        items.push_back("REMOTE_RADIO_UNIT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[677] = new enumeration_type("IfcMobileTelecommunicationsApplianceTypeEnum", 677, items);
    }
    IFC4X3_RC3_types[678] = new type_declaration("IfcModulusOfElasticityMeasure", 678, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[679] = new type_declaration("IfcModulusOfLinearSubgradeReactionMeasure", 679, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[680] = new type_declaration("IfcModulusOfRotationalSubgradeReactionMeasure", 680, new simple_type(simple_type::real_type));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[680]);
        IFC4X3_RC3_types[681] = new select_type("IfcModulusOfRotationalSubgradeReactionSelect", 681, items);
    }
    IFC4X3_RC3_types[682] = new type_declaration("IfcModulusOfSubgradeReactionMeasure", 682, new simple_type(simple_type::real_type));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[682]);
        IFC4X3_RC3_types[683] = new select_type("IfcModulusOfSubgradeReactionSelect", 683, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[679]);
        IFC4X3_RC3_types[684] = new select_type("IfcModulusOfTranslationalSubgradeReactionSelect", 684, items);
    }
    IFC4X3_RC3_types[685] = new type_declaration("IfcMoistureDiffusivityMeasure", 685, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[686] = new type_declaration("IfcMolecularWeightMeasure", 686, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[687] = new type_declaration("IfcMomentOfInertiaMeasure", 687, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[688] = new type_declaration("IfcMonetaryMeasure", 688, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[690] = new type_declaration("IfcMonthInYearNumber", 690, new simple_type(simple_type::integer_type));
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("BOLLARD");
        items.push_back("LINETENSIONER");
        items.push_back("MAGNETICDEVICE");
        items.push_back("MOORINGHOOKS");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("VACUUMDEVICE");
        IFC4X3_RC3_types[693] = new enumeration_type("IfcMooringDeviceTypeEnum", 693, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("BELTDRIVE");
        items.push_back("COUPLING");
        items.push_back("DIRECTDRIVE");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[696] = new enumeration_type("IfcMotorConnectionTypeEnum", 696, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("BEACON");
        items.push_back("BUOY");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[700] = new enumeration_type("IfcNavigationElementTypeEnum", 700, items);
    }
    IFC4X3_RC3_types[701] = new type_declaration("IfcNonNegativeLengthMeasure", 701, new named_type(IFC4X3_RC3_types[589]));
    IFC4X3_RC3_types[703] = new type_declaration("IfcNumericMeasure", 703, new simple_type(simple_type::number_type));
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("ACTOR");
        items.push_back("CONTROL");
        items.push_back("GROUP");
        items.push_back("NOTDEFINED");
        items.push_back("PROCESS");
        items.push_back("PRODUCT");
        items.push_back("PROJECT");
        items.push_back("RESOURCE");
        IFC4X3_RC3_types[710] = new enumeration_type("IfcObjectTypeEnum", 710, items);
    }
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("CODECOMPLIANCE");
        items.push_back("CODEWAIVER");
        items.push_back("DESIGNINTENT");
        items.push_back("EXTERNAL");
        items.push_back("HEALTHANDSAFETY");
        items.push_back("MERGECONFLICT");
        items.push_back("MODELVIEW");
        items.push_back("NOTDEFINED");
        items.push_back("PARAMETER");
        items.push_back("REQUIREMENT");
        items.push_back("SPECIFICATION");
        items.push_back("TRIGGERCONDITION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[707] = new enumeration_type("IfcObjectiveEnum", 707, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("ASSIGNEE");
        items.push_back("ASSIGNOR");
        items.push_back("LESSEE");
        items.push_back("LESSOR");
        items.push_back("LETTINGAGENT");
        items.push_back("NOTDEFINED");
        items.push_back("OWNER");
        items.push_back("TENANT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[712] = new enumeration_type("IfcOccupantTypeEnum", 712, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("OPENING");
        items.push_back("RECESS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[719] = new enumeration_type("IfcOpeningElementTypeEnum", 719, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("AUDIOVISUALOUTLET");
        items.push_back("COMMUNICATIONSOUTLET");
        items.push_back("DATAOUTLET");
        items.push_back("NOTDEFINED");
        items.push_back("POWEROUTLET");
        items.push_back("TELEPHONEOUTLET");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[728] = new enumeration_type("IfcOutletTypeEnum", 728, items);
    }
    IFC4X3_RC3_types[745] = new type_declaration("IfcPHMeasure", 745, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[731] = new type_declaration("IfcParameterValue", 731, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("FLEXIBLE");
        items.push_back("NOTDEFINED");
        items.push_back("RIGID");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[735] = new enumeration_type("IfcPavementTypeEnum", 735, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[738] = new enumeration_type("IfcPerformanceHistoryTypeEnum", 738, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("GRILL");
        items.push_back("LOUVER");
        items.push_back("NOTDEFINED");
        items.push_back("SCREEN");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[739] = new enumeration_type("IfcPermeableCoveringOperationEnum", 739, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ACCESS");
        items.push_back("BUILDING");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("WORK");
        IFC4X3_RC3_types[742] = new enumeration_type("IfcPermitTypeEnum", 742, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("NOTDEFINED");
        items.push_back("PHYSICAL");
        items.push_back("VIRTUAL");
        IFC4X3_RC3_types[747] = new enumeration_type("IfcPhysicalOrVirtualEnum", 747, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("CAST_IN_PLACE");
        items.push_back("COMPOSITE");
        items.push_back("NOTDEFINED");
        items.push_back("PRECAST_CONCRETE");
        items.push_back("PREFAB_STEEL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[751] = new enumeration_type("IfcPileConstructionEnum", 751, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("BORED");
        items.push_back("COHESION");
        items.push_back("DRIVEN");
        items.push_back("FRICTION");
        items.push_back("JETGROUTING");
        items.push_back("NOTDEFINED");
        items.push_back("SUPPORT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[753] = new enumeration_type("IfcPileTypeEnum", 753, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("BEND");
        items.push_back("CONNECTOR");
        items.push_back("ENTRY");
        items.push_back("EXIT");
        items.push_back("JUNCTION");
        items.push_back("NOTDEFINED");
        items.push_back("OBSTRUCTION");
        items.push_back("TRANSITION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[756] = new enumeration_type("IfcPipeFittingTypeEnum", 756, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CULVERT");
        items.push_back("FLEXIBLESEGMENT");
        items.push_back("GUTTER");
        items.push_back("NOTDEFINED");
        items.push_back("RIGIDSEGMENT");
        items.push_back("SPOOL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[759] = new enumeration_type("IfcPipeSegmentTypeEnum", 759, items);
    }
    IFC4X3_RC3_types[764] = new type_declaration("IfcPlanarForceMeasure", 764, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[766] = new type_declaration("IfcPlaneAngleMeasure", 766, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("BASE_PLATE");
        items.push_back("COVER_PLATE");
        items.push_back("CURTAIN_PANEL");
        items.push_back("FLANGE_PLATE");
        items.push_back("GUSSET_PLATE");
        items.push_back("NOTDEFINED");
        items.push_back("SHEET");
        items.push_back("SPLICE_PLATE");
        items.push_back("STIFFENER_PLATE");
        items.push_back("USERDEFINED");
        items.push_back("WEB_PLATE");
        IFC4X3_RC3_types[771] = new enumeration_type("IfcPlateTypeEnum", 771, items);
    }
    IFC4X3_RC3_types[784] = new type_declaration("IfcPositiveInteger", 784, new named_type(IFC4X3_RC3_types[556]));
    IFC4X3_RC3_types[785] = new type_declaration("IfcPositiveLengthMeasure", 785, new named_type(IFC4X3_RC3_types[589]));
    IFC4X3_RC3_types[786] = new type_declaration("IfcPositivePlaneAngleMeasure", 786, new named_type(IFC4X3_RC3_types[766]));
    IFC4X3_RC3_types[789] = new type_declaration("IfcPowerMeasure", 789, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("CURVE3D");
        items.push_back("PCURVE_S1");
        items.push_back("PCURVE_S2");
        IFC4X3_RC3_types[796] = new enumeration_type("IfcPreferredSurfaceCurveRepresentation", 796, items);
    }
    IFC4X3_RC3_types[797] = new type_declaration("IfcPresentableText", 797, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[802] = new type_declaration("IfcPressureMeasure", 802, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("ADVICE_CAUTION");
        items.push_back("ADVICE_NOTE");
        items.push_back("ADVICE_WARNING");
        items.push_back("CALIBRATION");
        items.push_back("DIAGNOSTIC");
        items.push_back("NOTDEFINED");
        items.push_back("SHUTDOWN");
        items.push_back("STARTUP");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[805] = new enumeration_type("IfcProcedureTypeEnum", 805, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("AREA");
        items.push_back("CURVE");
        IFC4X3_RC3_types[815] = new enumeration_type("IfcProfileTypeEnum", 815, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CHANGEORDER");
        items.push_back("MAINTENANCEWORKORDER");
        items.push_back("MOVEORDER");
        items.push_back("NOTDEFINED");
        items.push_back("PURCHASEORDER");
        items.push_back("USERDEFINED");
        items.push_back("WORKORDER");
        IFC4X3_RC3_types[823] = new enumeration_type("IfcProjectOrderTypeEnum", 823, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("PROJECTED_LENGTH");
        items.push_back("TRUE_LENGTH");
        IFC4X3_RC3_types[818] = new enumeration_type("IfcProjectedOrTrueLengthEnum", 818, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("BLISTER");
        items.push_back("DEVIATOR");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[820] = new enumeration_type("IfcProjectionElementTypeEnum", 820, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("NOTDEFINED");
        items.push_back("PSET_OCCURRENCEDRIVEN");
        items.push_back("PSET_PERFORMANCEDRIVEN");
        items.push_back("PSET_TYPEDRIVENONLY");
        items.push_back("PSET_TYPEDRIVENOVERRIDE");
        items.push_back("QTO_OCCURRENCEDRIVEN");
        items.push_back("QTO_TYPEDRIVENONLY");
        items.push_back("QTO_TYPEDRIVENOVERRIDE");
        IFC4X3_RC3_types[838] = new enumeration_type("IfcPropertySetTemplateTypeEnum", 838, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("ELECTROMAGNETIC");
        items.push_back("ELECTRONIC");
        items.push_back("NOTDEFINED");
        items.push_back("RESIDUALCURRENT");
        items.push_back("THERMAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[846] = new enumeration_type("IfcProtectiveDeviceTrippingUnitTypeEnum", 846, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("ANTI_ARCING_DEVICE");
        items.push_back("CIRCUITBREAKER");
        items.push_back("EARTHINGSWITCH");
        items.push_back("EARTHLEAKAGECIRCUITBREAKER");
        items.push_back("FUSEDISCONNECTOR");
        items.push_back("NOTDEFINED");
        items.push_back("RESIDUALCURRENTCIRCUITBREAKER");
        items.push_back("RESIDUALCURRENTSWITCH");
        items.push_back("SPARKGAP");
        items.push_back("USERDEFINED");
        items.push_back("VARISTOR");
        items.push_back("VOLTAGELIMITER");
        IFC4X3_RC3_types[848] = new enumeration_type("IfcProtectiveDeviceTypeEnum", 848, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CIRCULATOR");
        items.push_back("ENDSUCTION");
        items.push_back("NOTDEFINED");
        items.push_back("SPLITCASE");
        items.push_back("SUBMERSIBLEPUMP");
        items.push_back("SUMPPUMP");
        items.push_back("USERDEFINED");
        items.push_back("VERTICALINLINE");
        items.push_back("VERTICALTURBINE");
        IFC4X3_RC3_types[852] = new enumeration_type("IfcPumpTypeEnum", 852, items);
    }
    IFC4X3_RC3_types[860] = new type_declaration("IfcRadioActivityMeasure", 860, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("BLADE");
        items.push_back("CHECKRAIL");
        items.push_back("GUARDRAIL");
        items.push_back("NOTDEFINED");
        items.push_back("RACKRAIL");
        items.push_back("RAIL");
        items.push_back("STOCKRAIL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[866] = new enumeration_type("IfcRailTypeEnum", 866, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BALUSTRADE");
        items.push_back("FENCE");
        items.push_back("GUARDRAIL");
        items.push_back("HANDRAIL");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[864] = new enumeration_type("IfcRailingTypeEnum", 864, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("DILATATIONSUPERSTRUCTURE");
        items.push_back("LINESIDESTRUCTURE");
        items.push_back("LINESIDESTRUCTUREPART");
        items.push_back("NOTDEFINED");
        items.push_back("PLAINTRACKSUPESTRUCTURE");
        items.push_back("SUPERSTRUCTURE");
        items.push_back("TRACKSTRUCTURE");
        items.push_back("TRACKSTRUCTUREPART");
        items.push_back("TURNOUTSUPERSTRUCTURE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[868] = new enumeration_type("IfcRailwayPartTypeEnum", 868, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[869] = new enumeration_type("IfcRailwayTypeEnum", 869, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("SPIRAL");
        items.push_back("STRAIGHT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[873] = new enumeration_type("IfcRampFlightTypeEnum", 873, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("HALF_TURN_RAMP");
        items.push_back("NOTDEFINED");
        items.push_back("QUARTER_TURN_RAMP");
        items.push_back("SPIRAL_RAMP");
        items.push_back("STRAIGHT_RUN_RAMP");
        items.push_back("TWO_QUARTER_TURN_RAMP");
        items.push_back("TWO_STRAIGHT_RUN_RAMP");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[875] = new enumeration_type("IfcRampTypeEnum", 875, items);
    }
    IFC4X3_RC3_types[876] = new type_declaration("IfcRatioMeasure", 876, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[879] = new type_declaration("IfcReal", 879, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("BY_DAY_COUNT");
        items.push_back("BY_WEEKDAY_COUNT");
        items.push_back("DAILY");
        items.push_back("MONTHLY_BY_DAY_OF_MONTH");
        items.push_back("MONTHLY_BY_POSITION");
        items.push_back("WEEKLY");
        items.push_back("YEARLY_BY_DAY_OF_MONTH");
        items.push_back("YEARLY_BY_POSITION");
        IFC4X3_RC3_types[885] = new enumeration_type("IfcRecurrenceTypeEnum", 885, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("KILOPOINT");
        items.push_back("MILEPOINT");
        items.push_back("NOTDEFINED");
        items.push_back("REFERENCEMARKER");
        items.push_back("STATION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[888] = new enumeration_type("IfcReferentTypeEnum", 888, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BLINN");
        items.push_back("FLAT");
        items.push_back("GLASS");
        items.push_back("MATT");
        items.push_back("METAL");
        items.push_back("MIRROR");
        items.push_back("NOTDEFINED");
        items.push_back("PHONG");
        items.push_back("PLASTIC");
        items.push_back("STRAUSS");
        IFC4X3_RC3_types[889] = new enumeration_type("IfcReflectanceMethodEnum", 889, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("DYNAMICALLYCOMPACTED");
        items.push_back("GROUTED");
        items.push_back("NOTDEFINED");
        items.push_back("REPLACED");
        items.push_back("ROLLERCOMPACTED");
        items.push_back("SURCHARGEPRELOADED");
        items.push_back("USERDEFINED");
        items.push_back("VERTICALLYDRAINED");
        IFC4X3_RC3_types[892] = new enumeration_type("IfcReinforcedSoilTypeEnum", 892, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("ANCHORING");
        items.push_back("EDGE");
        items.push_back("LIGATURE");
        items.push_back("MAIN");
        items.push_back("NOTDEFINED");
        items.push_back("PUNCHING");
        items.push_back("RING");
        items.push_back("SHEAR");
        items.push_back("STUD");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[896] = new enumeration_type("IfcReinforcingBarRoleEnum", 896, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("PLAIN");
        items.push_back("TEXTURED");
        IFC4X3_RC3_types[897] = new enumeration_type("IfcReinforcingBarSurfaceEnum", 897, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("ANCHORING");
        items.push_back("EDGE");
        items.push_back("LIGATURE");
        items.push_back("MAIN");
        items.push_back("NOTDEFINED");
        items.push_back("PUNCHING");
        items.push_back("RING");
        items.push_back("SHEAR");
        items.push_back("SPACEBAR");
        items.push_back("STUD");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[899] = new enumeration_type("IfcReinforcingBarTypeEnum", 899, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[904] = new enumeration_type("IfcReinforcingMeshTypeEnum", 904, items);
    }
    {
        std::vector<std::string> items; items.reserve(26);
        items.push_back("BICYCLECROSSING");
        items.push_back("BUS_STOP");
        items.push_back("CARRIAGEWAY");
        items.push_back("CENTRALISLAND");
        items.push_back("CENTRALRESERVE");
        items.push_back("HARDSHOULDER");
        items.push_back("INTERSECTION");
        items.push_back("LAYBY");
        items.push_back("NOTDEFINED");
        items.push_back("PARKINGBAY");
        items.push_back("PASSINGBAY");
        items.push_back("PEDESTRIAN_CROSSING");
        items.push_back("RAILWAYCROSSING");
        items.push_back("REFUGEISLAND");
        items.push_back("ROADSEGMENT");
        items.push_back("ROADSIDE");
        items.push_back("ROADSIDEPART");
        items.push_back("ROADWAYPLATEAU");
        items.push_back("ROUNDABOUT");
        items.push_back("SHOULDER");
        items.push_back("SIDEWALK");
        items.push_back("SOFTSHOULDER");
        items.push_back("TOLLPLAZA");
        items.push_back("TRAFFICISLAND");
        items.push_back("TRAFFICLANE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[972] = new enumeration_type("IfcRoadPartTypeEnum", 972, items);
    }
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[973] = new enumeration_type("IfcRoadTypeEnum", 973, items);
    }
    {
        std::vector<std::string> items; items.reserve(23);
        items.push_back("ARCHITECT");
        items.push_back("BUILDINGOPERATOR");
        items.push_back("BUILDINGOWNER");
        items.push_back("CIVILENGINEER");
        items.push_back("CLIENT");
        items.push_back("COMMISSIONINGENGINEER");
        items.push_back("CONSTRUCTIONMANAGER");
        items.push_back("CONSULTANT");
        items.push_back("CONTRACTOR");
        items.push_back("COSTENGINEER");
        items.push_back("ELECTRICALENGINEER");
        items.push_back("ENGINEER");
        items.push_back("FACILITIESMANAGER");
        items.push_back("FIELDCONSTRUCTIONMANAGER");
        items.push_back("MANUFACTURER");
        items.push_back("MECHANICALENGINEER");
        items.push_back("OWNER");
        items.push_back("PROJECTMANAGER");
        items.push_back("RESELLER");
        items.push_back("STRUCTURALENGINEER");
        items.push_back("SUBCONTRACTOR");
        items.push_back("SUPPLIER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[974] = new enumeration_type("IfcRoleEnum", 974, items);
    }
    {
        std::vector<std::string> items; items.reserve(15);
        items.push_back("BARREL_ROOF");
        items.push_back("BUTTERFLY_ROOF");
        items.push_back("DOME_ROOF");
        items.push_back("FLAT_ROOF");
        items.push_back("FREEFORM");
        items.push_back("GABLE_ROOF");
        items.push_back("GAMBREL_ROOF");
        items.push_back("HIPPED_GABLE_ROOF");
        items.push_back("HIP_ROOF");
        items.push_back("MANSARD_ROOF");
        items.push_back("NOTDEFINED");
        items.push_back("PAVILION_ROOF");
        items.push_back("RAINBOW_ROOF");
        items.push_back("SHED_ROOF");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[977] = new enumeration_type("IfcRoofTypeEnum", 977, items);
    }
    IFC4X3_RC3_types[979] = new type_declaration("IfcRotationalFrequencyMeasure", 979, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[980] = new type_declaration("IfcRotationalMassMeasure", 980, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[981] = new type_declaration("IfcRotationalStiffnessMeasure", 981, new simple_type(simple_type::real_type));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[981]);
        IFC4X3_RC3_types[982] = new select_type("IfcRotationalStiffnessSelect", 982, items);
    }
    {
        std::vector<std::string> items; items.reserve(16);
        items.push_back("ATTO");
        items.push_back("CENTI");
        items.push_back("DECA");
        items.push_back("DECI");
        items.push_back("EXA");
        items.push_back("FEMTO");
        items.push_back("GIGA");
        items.push_back("HECTO");
        items.push_back("KILO");
        items.push_back("MEGA");
        items.push_back("MICRO");
        items.push_back("MILLI");
        items.push_back("NANO");
        items.push_back("PETA");
        items.push_back("PICO");
        items.push_back("TERA");
        IFC4X3_RC3_types[1026] = new enumeration_type("IfcSIPrefix", 1026, items);
    }
    {
        std::vector<std::string> items; items.reserve(30);
        items.push_back("AMPERE");
        items.push_back("BECQUEREL");
        items.push_back("CANDELA");
        items.push_back("COULOMB");
        items.push_back("CUBIC_METRE");
        items.push_back("DEGREE_CELSIUS");
        items.push_back("FARAD");
        items.push_back("GRAM");
        items.push_back("GRAY");
        items.push_back("HENRY");
        items.push_back("HERTZ");
        items.push_back("JOULE");
        items.push_back("KELVIN");
        items.push_back("LUMEN");
        items.push_back("LUX");
        items.push_back("METRE");
        items.push_back("MOLE");
        items.push_back("NEWTON");
        items.push_back("OHM");
        items.push_back("PASCAL");
        items.push_back("RADIAN");
        items.push_back("SECOND");
        items.push_back("SIEMENS");
        items.push_back("SIEVERT");
        items.push_back("SQUARE_METRE");
        items.push_back("STERADIAN");
        items.push_back("TESLA");
        items.push_back("VOLT");
        items.push_back("WATT");
        items.push_back("WEBER");
        IFC4X3_RC3_types[1029] = new enumeration_type("IfcSIUnitName", 1029, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("BATH");
        items.push_back("BIDET");
        items.push_back("CISTERN");
        items.push_back("NOTDEFINED");
        items.push_back("SANITARYFOUNTAIN");
        items.push_back("SHOWER");
        items.push_back("SINK");
        items.push_back("TOILETPAN");
        items.push_back("URINAL");
        items.push_back("USERDEFINED");
        items.push_back("WASHHANDBASIN");
        items.push_back("WCSEAT");
        IFC4X3_RC3_types[986] = new enumeration_type("IfcSanitaryTerminalTypeEnum", 986, items);
    }
    IFC4X3_RC3_types[995] = new type_declaration("IfcSectionModulusMeasure", 995, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(2);
        items.push_back("TAPERED");
        items.push_back("UNIFORM");
        IFC4X3_RC3_types[998] = new enumeration_type("IfcSectionTypeEnum", 998, items);
    }
    IFC4X3_RC3_types[990] = new type_declaration("IfcSectionalAreaIntegralMeasure", 990, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(34);
        items.push_back("CO2SENSOR");
        items.push_back("CONDUCTANCESENSOR");
        items.push_back("CONTACTSENSOR");
        items.push_back("COSENSOR");
        items.push_back("EARTHQUAKESENSOR");
        items.push_back("FIRESENSOR");
        items.push_back("FLOWSENSOR");
        items.push_back("FOREIGNOBJECTDETECTIONSENSOR");
        items.push_back("FROSTSENSOR");
        items.push_back("GASSENSOR");
        items.push_back("HEATSENSOR");
        items.push_back("HUMIDITYSENSOR");
        items.push_back("IDENTIFIERSENSOR");
        items.push_back("IONCONCENTRATIONSENSOR");
        items.push_back("LEVELSENSOR");
        items.push_back("LIGHTSENSOR");
        items.push_back("MOISTURESENSOR");
        items.push_back("MOVEMENTSENSOR");
        items.push_back("NOTDEFINED");
        items.push_back("OBSTACLESENSOR");
        items.push_back("PHSENSOR");
        items.push_back("PRESSURESENSOR");
        items.push_back("RADIATIONSENSOR");
        items.push_back("RADIOACTIVITYSENSOR");
        items.push_back("RAINSENSOR");
        items.push_back("SMOKESENSOR");
        items.push_back("SNOWDEPTHSENSOR");
        items.push_back("SOUNDSENSOR");
        items.push_back("TEMPERATURESENSOR");
        items.push_back("TRAINSENSOR");
        items.push_back("TURNOUTCLOSURESENSOR");
        items.push_back("USERDEFINED");
        items.push_back("WHEELSENSOR");
        items.push_back("WINDSENSOR");
        IFC4X3_RC3_types[1004] = new enumeration_type("IfcSensorTypeEnum", 1004, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("FINISH_FINISH");
        items.push_back("FINISH_START");
        items.push_back("NOTDEFINED");
        items.push_back("START_FINISH");
        items.push_back("START_START");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1005] = new enumeration_type("IfcSequenceEnum", 1005, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("AWNING");
        items.push_back("JALOUSIE");
        items.push_back("NOTDEFINED");
        items.push_back("SHUTTER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1008] = new enumeration_type("IfcShadingDeviceTypeEnum", 1008, items);
    }
    IFC4X3_RC3_types[1012] = new type_declaration("IfcShearModulusMeasure", 1012, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("MARKER");
        items.push_back("MIRROR");
        items.push_back("NOTDEFINED");
        items.push_back("PICTORAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1020] = new enumeration_type("IfcSignTypeEnum", 1020, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("AUDIO");
        items.push_back("MIXED");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        items.push_back("VISUAL");
        IFC4X3_RC3_types[1018] = new enumeration_type("IfcSignalTypeEnum", 1018, items);
    }
    {
        std::vector<std::string> items; items.reserve(12);
        items.push_back("P_BOUNDEDVALUE");
        items.push_back("P_ENUMERATEDVALUE");
        items.push_back("P_LISTVALUE");
        items.push_back("P_REFERENCEVALUE");
        items.push_back("P_SINGLEVALUE");
        items.push_back("P_TABLEVALUE");
        items.push_back("Q_AREA");
        items.push_back("Q_COUNT");
        items.push_back("Q_LENGTH");
        items.push_back("Q_TIME");
        items.push_back("Q_VOLUME");
        items.push_back("Q_WEIGHT");
        IFC4X3_RC3_types[1023] = new enumeration_type("IfcSimplePropertyTemplateTypeEnum", 1023, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("APPROACH_SLAB");
        items.push_back("BASESLAB");
        items.push_back("FLOOR");
        items.push_back("LANDING");
        items.push_back("NOTDEFINED");
        items.push_back("PAVING");
        items.push_back("ROOF");
        items.push_back("SIDEWALK");
        items.push_back("TRACKSLAB");
        items.push_back("USERDEFINED");
        items.push_back("WEARING");
        IFC4X3_RC3_types[1035] = new enumeration_type("IfcSlabTypeEnum", 1035, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("SOLARCOLLECTOR");
        items.push_back("SOLARPANEL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1039] = new enumeration_type("IfcSolarDeviceTypeEnum", 1039, items);
    }
    IFC4X3_RC3_types[1040] = new type_declaration("IfcSolidAngleMeasure", 1040, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1044] = new type_declaration("IfcSoundPowerLevelMeasure", 1044, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1045] = new type_declaration("IfcSoundPowerMeasure", 1045, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1046] = new type_declaration("IfcSoundPressureLevelMeasure", 1046, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1047] = new type_declaration("IfcSoundPressureMeasure", 1047, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("CONVECTOR");
        items.push_back("NOTDEFINED");
        items.push_back("RADIATOR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1052] = new enumeration_type("IfcSpaceHeaterTypeEnum", 1052, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("BERTH");
        items.push_back("EXTERNAL");
        items.push_back("GFA");
        items.push_back("INTERNAL");
        items.push_back("NOTDEFINED");
        items.push_back("PARKING");
        items.push_back("SPACE");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1054] = new enumeration_type("IfcSpaceTypeEnum", 1054, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("CONSTRUCTION");
        items.push_back("FIRESAFETY");
        items.push_back("LIGHTING");
        items.push_back("NOTDEFINED");
        items.push_back("OCCUPANCY");
        items.push_back("RESERVATION");
        items.push_back("SECURITY");
        items.push_back("THERMAL");
        items.push_back("TRANSPORT");
        items.push_back("USERDEFINED");
        items.push_back("VENTILATION");
        IFC4X3_RC3_types[1062] = new enumeration_type("IfcSpatialZoneTypeEnum", 1062, items);
    }
    IFC4X3_RC3_types[1063] = new type_declaration("IfcSpecificHeatCapacityMeasure", 1063, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1064] = new type_declaration("IfcSpecularExponent", 1064, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1066] = new type_declaration("IfcSpecularRoughness", 1066, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("BIRDCAGE");
        items.push_back("COWL");
        items.push_back("NOTDEFINED");
        items.push_back("RAINWATERHOPPER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1072] = new enumeration_type("IfcStackTerminalTypeEnum", 1072, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CURVED");
        items.push_back("FREEFORM");
        items.push_back("NOTDEFINED");
        items.push_back("SPIRAL");
        items.push_back("STRAIGHT");
        items.push_back("USERDEFINED");
        items.push_back("WINDER");
        IFC4X3_RC3_types[1076] = new enumeration_type("IfcStairFlightTypeEnum", 1076, items);
    }
    {
        std::vector<std::string> items; items.reserve(17);
        items.push_back("CURVED_RUN_STAIR");
        items.push_back("DOUBLE_RETURN_STAIR");
        items.push_back("HALF_TURN_STAIR");
        items.push_back("HALF_WINDING_STAIR");
        items.push_back("LADDER");
        items.push_back("NOTDEFINED");
        items.push_back("QUARTER_TURN_STAIR");
        items.push_back("QUARTER_WINDING_STAIR");
        items.push_back("SPIRAL_STAIR");
        items.push_back("STRAIGHT_RUN_STAIR");
        items.push_back("THREE_QUARTER_TURN_STAIR");
        items.push_back("THREE_QUARTER_WINDING_STAIR");
        items.push_back("TWO_CURVED_RUN_STAIR");
        items.push_back("TWO_QUARTER_TURN_STAIR");
        items.push_back("TWO_QUARTER_WINDING_STAIR");
        items.push_back("TWO_STRAIGHT_RUN_STAIR");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1078] = new enumeration_type("IfcStairTypeEnum", 1078, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("LOCKED");
        items.push_back("READONLY");
        items.push_back("READONLYLOCKED");
        items.push_back("READWRITE");
        items.push_back("READWRITELOCKED");
        IFC4X3_RC3_types[1079] = new enumeration_type("IfcStateEnum", 1079, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CONST");
        items.push_back("DISCRETE");
        items.push_back("EQUIDISTANT");
        items.push_back("LINEAR");
        items.push_back("NOTDEFINED");
        items.push_back("PARABOLA");
        items.push_back("POLYGONAL");
        items.push_back("SINUS");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1087] = new enumeration_type("IfcStructuralCurveActivityTypeEnum", 1087, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CABLE");
        items.push_back("COMPRESSION_MEMBER");
        items.push_back("NOTDEFINED");
        items.push_back("PIN_JOINED_MEMBER");
        items.push_back("RIGID_JOINED_MEMBER");
        items.push_back("TENSION_MEMBER");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1090] = new enumeration_type("IfcStructuralCurveMemberTypeEnum", 1090, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BILINEAR");
        items.push_back("CONST");
        items.push_back("DISCRETE");
        items.push_back("ISOCONTOUR");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1116] = new enumeration_type("IfcStructuralSurfaceActivityTypeEnum", 1116, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("BENDING_ELEMENT");
        items.push_back("MEMBRANE_ELEMENT");
        items.push_back("NOTDEFINED");
        items.push_back("SHELL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1119] = new enumeration_type("IfcStructuralSurfaceMemberTypeEnum", 1119, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("NOTDEFINED");
        items.push_back("PURCHASE");
        items.push_back("USERDEFINED");
        items.push_back("WORK");
        IFC4X3_RC3_types[1127] = new enumeration_type("IfcSubContractResourceTypeEnum", 1127, items);
    }
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("DEFECT");
        items.push_back("HATCHMARKING");
        items.push_back("LINEMARKING");
        items.push_back("MARK");
        items.push_back("NONSKIDSURFACING");
        items.push_back("NOTDEFINED");
        items.push_back("PAVEMENTSURFACEMARKING");
        items.push_back("RUMBLESTRIP");
        items.push_back("SYMBOLMARKING");
        items.push_back("TAG");
        items.push_back("TRANSVERSERUMBLESTRIP");
        items.push_back("TREATMENT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1133] = new enumeration_type("IfcSurfaceFeatureTypeEnum", 1133, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("BOTH");
        items.push_back("NEGATIVE");
        items.push_back("POSITIVE");
        IFC4X3_RC3_types[1138] = new enumeration_type("IfcSurfaceSide", 1138, items);
    }
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("CONTACTOR");
        items.push_back("DIMMERSWITCH");
        items.push_back("EMERGENCYSTOP");
        items.push_back("KEYPAD");
        items.push_back("MOMENTARYSWITCH");
        items.push_back("NOTDEFINED");
        items.push_back("RELAY");
        items.push_back("SELECTORSWITCH");
        items.push_back("STARTER");
        items.push_back("START_AND_STOP_EQUIPMENT");
        items.push_back("SWITCHDISCONNECTOR");
        items.push_back("TOGGLESWITCH");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1153] = new enumeration_type("IfcSwitchingDeviceTypeEnum", 1153, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("NOTDEFINED");
        items.push_back("PANEL");
        items.push_back("SUBRACK");
        items.push_back("USERDEFINED");
        items.push_back("WORKSURFACE");
        IFC4X3_RC3_types[1157] = new enumeration_type("IfcSystemFurnitureElementTypeEnum", 1157, items);
    }
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BASIN");
        items.push_back("BREAKPRESSURE");
        items.push_back("EXPANSION");
        items.push_back("FEEDANDEXPANSION");
        items.push_back("NOTDEFINED");
        items.push_back("OILRETENTIONTRAY");
        items.push_back("PRESSUREVESSEL");
        items.push_back("STORAGE");
        items.push_back("USERDEFINED");
        items.push_back("VESSEL");
        IFC4X3_RC3_types[1163] = new enumeration_type("IfcTankTypeEnum", 1163, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("ELAPSEDTIME");
        items.push_back("NOTDEFINED");
        items.push_back("WORKTIME");
        IFC4X3_RC3_types[1165] = new enumeration_type("IfcTaskDurationEnum", 1165, items);
    }
    {
        std::vector<std::string> items; items.reserve(14);
        items.push_back("ATTENDANCE");
        items.push_back("CONSTRUCTION");
        items.push_back("DEMOLITION");
        items.push_back("DISMANTLE");
        items.push_back("DISPOSAL");
        items.push_back("INSTALLATION");
        items.push_back("LOGISTIC");
        items.push_back("MAINTENANCE");
        items.push_back("MOVE");
        items.push_back("NOTDEFINED");
        items.push_back("OPERATION");
        items.push_back("REMOVAL");
        items.push_back("RENOVATION");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1169] = new enumeration_type("IfcTaskTypeEnum", 1169, items);
    }
    IFC4X3_RC3_types[1171] = new type_declaration("IfcTemperatureGradientMeasure", 1171, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1172] = new type_declaration("IfcTemperatureRateOfChangeMeasure", 1172, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("COUPLER");
        items.push_back("FIXED_END");
        items.push_back("NOTDEFINED");
        items.push_back("TENSIONING_END");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1176] = new enumeration_type("IfcTendonAnchorTypeEnum", 1176, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("COUPLER");
        items.push_back("DIABOLO");
        items.push_back("DUCT");
        items.push_back("GROUTING_DUCT");
        items.push_back("NOTDEFINED");
        items.push_back("TRUMPET");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1179] = new enumeration_type("IfcTendonConduitTypeEnum", 1179, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BAR");
        items.push_back("COATED");
        items.push_back("NOTDEFINED");
        items.push_back("STRAND");
        items.push_back("USERDEFINED");
        items.push_back("WIRE");
        IFC4X3_RC3_types[1181] = new enumeration_type("IfcTendonTypeEnum", 1181, items);
    }
    IFC4X3_RC3_types[1184] = new type_declaration("IfcText", 1184, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[1185] = new type_declaration("IfcTextAlignment", 1185, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[1186] = new type_declaration("IfcTextDecoration", 1186, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[1187] = new type_declaration("IfcTextFontName", 1187, new simple_type(simple_type::string_type));
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("DOWN");
        items.push_back("LEFT");
        items.push_back("RIGHT");
        items.push_back("UP");
        IFC4X3_RC3_types[1191] = new enumeration_type("IfcTextPath", 1191, items);
    }
    IFC4X3_RC3_types[1196] = new type_declaration("IfcTextTransformation", 1196, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[1202] = new type_declaration("IfcThermalAdmittanceMeasure", 1202, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1203] = new type_declaration("IfcThermalConductivityMeasure", 1203, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1204] = new type_declaration("IfcThermalExpansionCoefficientMeasure", 1204, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1205] = new type_declaration("IfcThermalResistanceMeasure", 1205, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1206] = new type_declaration("IfcThermalTransmittanceMeasure", 1206, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1207] = new type_declaration("IfcThermodynamicTemperatureMeasure", 1207, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1209] = new type_declaration("IfcTime", 1209, new simple_type(simple_type::string_type));
    IFC4X3_RC3_types[1210] = new type_declaration("IfcTimeMeasure", 1210, new simple_type(simple_type::real_type));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[362]);
        items.push_back(IFC4X3_RC3_types[876]);
        IFC4X3_RC3_types[1211] = new select_type("IfcTimeOrRatioSelect", 1211, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("CONTINUOUS");
        items.push_back("DISCRETE");
        items.push_back("DISCRETEBINARY");
        items.push_back("NOTDEFINED");
        items.push_back("PIECEWISEBINARY");
        items.push_back("PIECEWISECONSTANT");
        items.push_back("PIECEWISECONTINUOUS");
        IFC4X3_RC3_types[1214] = new enumeration_type("IfcTimeSeriesDataTypeEnum", 1214, items);
    }
    IFC4X3_RC3_types[1216] = new type_declaration("IfcTimeStamp", 1216, new simple_type(simple_type::integer_type));
    IFC4X3_RC3_types[1220] = new type_declaration("IfcTorqueMeasure", 1220, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(10);
        items.push_back("BLOCKINGDEVICE");
        items.push_back("DERAILER");
        items.push_back("FROG");
        items.push_back("HALF_SET_OF_BLADES");
        items.push_back("NOTDEFINED");
        items.push_back("SLEEPER");
        items.push_back("SPEEDREGULATOR");
        items.push_back("TRACKENDOFALIGNMENT");
        items.push_back("USERDEFINED");
        items.push_back("VEHICLESTOP");
        IFC4X3_RC3_types[1223] = new enumeration_type("IfcTrackElementTypeEnum", 1223, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CHOPPER");
        items.push_back("COMBINED");
        items.push_back("CURRENT");
        items.push_back("FREQUENCY");
        items.push_back("INVERTER");
        items.push_back("NOTDEFINED");
        items.push_back("RECTIFIER");
        items.push_back("USERDEFINED");
        items.push_back("VOLTAGE");
        IFC4X3_RC3_types[1226] = new enumeration_type("IfcTransformerTypeEnum", 1226, items);
    }
    {
        std::vector<std::string> items; items.reserve(4);
        items.push_back("CONTINUOUS");
        items.push_back("CONTSAMEGRADIENT");
        items.push_back("CONTSAMEGRADIENTSAMECURVATURE");
        items.push_back("DISCONTINUOUS");
        IFC4X3_RC3_types[1227] = new enumeration_type("IfcTransitionCode", 1227, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[613]);
        IFC4X3_RC3_types[1228] = new select_type("IfcTranslationalStiffnessSelect", 1228, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("CRANEWAY");
        items.push_back("ELEVATOR");
        items.push_back("ESCALATOR");
        items.push_back("HAULINGGEAR");
        items.push_back("LIFTINGGEAR");
        items.push_back("MOVINGWALKWAY");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1230] = new enumeration_type("IfcTransportElementFixedTypeEnum", 1230, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("CARGO");
        items.push_back("NOTDEFINED");
        items.push_back("ROLLINGSTOCK");
        items.push_back("USERDEFINED");
        items.push_back("VEHICLE");
        items.push_back("VEHICLEAIR");
        items.push_back("VEHICLEMARINE");
        items.push_back("VEHICLETRACKED");
        items.push_back("VEHICLEWHEELED");
        IFC4X3_RC3_types[1231] = new enumeration_type("IfcTransportElementNonFixedTypeEnum", 1231, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[1230]);
        items.push_back(IFC4X3_RC3_types[1231]);
        IFC4X3_RC3_types[1233] = new select_type("IfcTransportElementTypeSelect", 1233, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("CARTESIAN");
        items.push_back("PARAMETER");
        items.push_back("UNSPECIFIED");
        IFC4X3_RC3_types[1238] = new enumeration_type("IfcTrimmingPreference", 1238, items);
    }
    {
        std::vector<std::string> items; items.reserve(3);
        items.push_back("FINNED");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1243] = new enumeration_type("IfcTubeBundleTypeEnum", 1243, items);
    }
    IFC4X3_RC3_types[1257] = new type_declaration("IfcURIReference", 1257, new simple_type(simple_type::string_type));
    {
        std::vector<std::string> items; items.reserve(30);
        items.push_back("ABSORBEDDOSEUNIT");
        items.push_back("AMOUNTOFSUBSTANCEUNIT");
        items.push_back("AREAUNIT");
        items.push_back("DOSEEQUIVALENTUNIT");
        items.push_back("ELECTRICCAPACITANCEUNIT");
        items.push_back("ELECTRICCHARGEUNIT");
        items.push_back("ELECTRICCONDUCTANCEUNIT");
        items.push_back("ELECTRICCURRENTUNIT");
        items.push_back("ELECTRICRESISTANCEUNIT");
        items.push_back("ELECTRICVOLTAGEUNIT");
        items.push_back("ENERGYUNIT");
        items.push_back("FORCEUNIT");
        items.push_back("FREQUENCYUNIT");
        items.push_back("ILLUMINANCEUNIT");
        items.push_back("INDUCTANCEUNIT");
        items.push_back("LENGTHUNIT");
        items.push_back("LUMINOUSFLUXUNIT");
        items.push_back("LUMINOUSINTENSITYUNIT");
        items.push_back("MAGNETICFLUXDENSITYUNIT");
        items.push_back("MAGNETICFLUXUNIT");
        items.push_back("MASSUNIT");
        items.push_back("PLANEANGLEUNIT");
        items.push_back("POWERUNIT");
        items.push_back("PRESSUREUNIT");
        items.push_back("RADIOACTIVITYUNIT");
        items.push_back("SOLIDANGLEUNIT");
        items.push_back("THERMODYNAMICTEMPERATUREUNIT");
        items.push_back("TIMEUNIT");
        items.push_back("USERDEFINED");
        items.push_back("VOLUMEUNIT");
        IFC4X3_RC3_types[1256] = new enumeration_type("IfcUnitEnum", 1256, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("ALARMPANEL");
        items.push_back("COMBINED");
        items.push_back("CONTROLPANEL");
        items.push_back("GASDETECTIONPANEL");
        items.push_back("HUMIDISTAT");
        items.push_back("INDICATORPANEL");
        items.push_back("MIMICPANEL");
        items.push_back("NOTDEFINED");
        items.push_back("THERMOSTAT");
        items.push_back("USERDEFINED");
        items.push_back("WEATHERSTATION");
        IFC4X3_RC3_types[1251] = new enumeration_type("IfcUnitaryControlElementTypeEnum", 1251, items);
    }
    {
        std::vector<std::string> items; items.reserve(7);
        items.push_back("AIRCONDITIONINGUNIT");
        items.push_back("AIRHANDLER");
        items.push_back("DEHUMIDIFIER");
        items.push_back("NOTDEFINED");
        items.push_back("ROOFTOPUNIT");
        items.push_back("SPLITSYSTEM");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1254] = new enumeration_type("IfcUnitaryEquipmentTypeEnum", 1254, items);
    }
    {
        std::vector<std::string> items; items.reserve(23);
        items.push_back("AIRRELEASE");
        items.push_back("ANTIVACUUM");
        items.push_back("CHANGEOVER");
        items.push_back("CHECK");
        items.push_back("COMMISSIONING");
        items.push_back("DIVERTING");
        items.push_back("DOUBLECHECK");
        items.push_back("DOUBLEREGULATING");
        items.push_back("DRAWOFFCOCK");
        items.push_back("FAUCET");
        items.push_back("FLUSHING");
        items.push_back("GASCOCK");
        items.push_back("GASTAP");
        items.push_back("ISOLATING");
        items.push_back("MIXING");
        items.push_back("NOTDEFINED");
        items.push_back("PRESSUREREDUCING");
        items.push_back("PRESSURERELIEF");
        items.push_back("REGULATING");
        items.push_back("SAFETYCUTOFF");
        items.push_back("STEAMTRAP");
        items.push_back("STOPCOCK");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1262] = new enumeration_type("IfcValveTypeEnum", 1262, items);
    }
    IFC4X3_RC3_types[1263] = new type_declaration("IfcVaporPermeabilityMeasure", 1263, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("AXIAL_YIELD");
        items.push_back("BENDING_YIELD");
        items.push_back("FRICTION");
        items.push_back("NOTDEFINED");
        items.push_back("RUBBER");
        items.push_back("SHEAR_YIELD");
        items.push_back("USERDEFINED");
        items.push_back("VISCOUS");
        IFC4X3_RC3_types[1271] = new enumeration_type("IfcVibrationDamperTypeEnum", 1271, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("BASE");
        items.push_back("COMPRESSION");
        items.push_back("NOTDEFINED");
        items.push_back("SPRING");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1274] = new enumeration_type("IfcVibrationIsolatorTypeEnum", 1274, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("CHAMFER");
        items.push_back("CUTOUT");
        items.push_back("EDGE");
        items.push_back("HOLE");
        items.push_back("MITER");
        items.push_back("NOTCH");
        items.push_back("NOTDEFINED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1279] = new enumeration_type("IfcVoidingFeatureTypeEnum", 1279, items);
    }
    IFC4X3_RC3_types[1281] = new type_declaration("IfcVolumeMeasure", 1281, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1282] = new type_declaration("IfcVolumetricFlowRateMeasure", 1282, new simple_type(simple_type::real_type));
    {
        std::vector<std::string> items; items.reserve(13);
        items.push_back("ELEMENTEDWALL");
        items.push_back("MOVABLE");
        items.push_back("NOTDEFINED");
        items.push_back("PARAPET");
        items.push_back("PARTITIONING");
        items.push_back("PLUMBINGWALL");
        items.push_back("POLYGONAL");
        items.push_back("RETAININGWALL");
        items.push_back("SHEAR");
        items.push_back("SOLIDWALL");
        items.push_back("STANDARD");
        items.push_back("USERDEFINED");
        items.push_back("WAVEWALL");
        IFC4X3_RC3_types[1287] = new enumeration_type("IfcWallTypeEnum", 1287, items);
    }
    IFC4X3_RC3_types[1288] = new type_declaration("IfcWarpingConstantMeasure", 1288, new simple_type(simple_type::real_type));
    IFC4X3_RC3_types[1289] = new type_declaration("IfcWarpingMomentMeasure", 1289, new simple_type(simple_type::real_type));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[1289]);
        IFC4X3_RC3_types[1290] = new select_type("IfcWarpingStiffnessSelect", 1290, items);
    }
    {
        std::vector<std::string> items; items.reserve(9);
        items.push_back("FLOORTRAP");
        items.push_back("FLOORWASTE");
        items.push_back("GULLYSUMP");
        items.push_back("GULLYTRAP");
        items.push_back("NOTDEFINED");
        items.push_back("ROOFDRAIN");
        items.push_back("USERDEFINED");
        items.push_back("WASTEDISPOSALUNIT");
        items.push_back("WASTETRAP");
        IFC4X3_RC3_types[1293] = new enumeration_type("IfcWasteTerminalTypeEnum", 1293, items);
    }
    {
        std::vector<std::string> items; items.reserve(14);
        items.push_back("BOTTOMHUNG");
        items.push_back("FIXEDCASEMENT");
        items.push_back("NOTDEFINED");
        items.push_back("OTHEROPERATION");
        items.push_back("PIVOTHORIZONTAL");
        items.push_back("PIVOTVERTICAL");
        items.push_back("REMOVABLECASEMENT");
        items.push_back("SIDEHUNGLEFTHAND");
        items.push_back("SIDEHUNGRIGHTHAND");
        items.push_back("SLIDINGHORIZONTAL");
        items.push_back("SLIDINGVERTICAL");
        items.push_back("TILTANDTURNLEFTHAND");
        items.push_back("TILTANDTURNRIGHTHAND");
        items.push_back("TOPHUNG");
        IFC4X3_RC3_types[1297] = new enumeration_type("IfcWindowPanelOperationEnum", 1297, items);
    }
    {
        std::vector<std::string> items; items.reserve(6);
        items.push_back("BOTTOM");
        items.push_back("LEFT");
        items.push_back("MIDDLE");
        items.push_back("NOTDEFINED");
        items.push_back("RIGHT");
        items.push_back("TOP");
        IFC4X3_RC3_types[1298] = new enumeration_type("IfcWindowPanelPositionEnum", 1298, items);
    }
    {
        std::vector<std::string> items; items.reserve(8);
        items.push_back("ALUMINIUM");
        items.push_back("ALUMINIUM_WOOD");
        items.push_back("HIGH_GRADE_STEEL");
        items.push_back("NOTDEFINED");
        items.push_back("OTHER_CONSTRUCTION");
        items.push_back("PLASTIC");
        items.push_back("STEEL");
        items.push_back("WOOD");
        IFC4X3_RC3_types[1302] = new enumeration_type("IfcWindowStyleConstructionEnum", 1302, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("DOUBLE_PANEL_HORIZONTAL");
        items.push_back("DOUBLE_PANEL_VERTICAL");
        items.push_back("NOTDEFINED");
        items.push_back("SINGLE_PANEL");
        items.push_back("TRIPLE_PANEL_BOTTOM");
        items.push_back("TRIPLE_PANEL_HORIZONTAL");
        items.push_back("TRIPLE_PANEL_LEFT");
        items.push_back("TRIPLE_PANEL_RIGHT");
        items.push_back("TRIPLE_PANEL_TOP");
        items.push_back("TRIPLE_PANEL_VERTICAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1303] = new enumeration_type("IfcWindowStyleOperationEnum", 1303, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("LIGHTDOME");
        items.push_back("NOTDEFINED");
        items.push_back("SKYLIGHT");
        items.push_back("USERDEFINED");
        items.push_back("WINDOW");
        IFC4X3_RC3_types[1305] = new enumeration_type("IfcWindowTypeEnum", 1305, items);
    }
    {
        std::vector<std::string> items; items.reserve(11);
        items.push_back("DOUBLE_PANEL_HORIZONTAL");
        items.push_back("DOUBLE_PANEL_VERTICAL");
        items.push_back("NOTDEFINED");
        items.push_back("SINGLE_PANEL");
        items.push_back("TRIPLE_PANEL_BOTTOM");
        items.push_back("TRIPLE_PANEL_HORIZONTAL");
        items.push_back("TRIPLE_PANEL_LEFT");
        items.push_back("TRIPLE_PANEL_RIGHT");
        items.push_back("TRIPLE_PANEL_TOP");
        items.push_back("TRIPLE_PANEL_VERTICAL");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1306] = new enumeration_type("IfcWindowTypePartitioningEnum", 1306, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("FIRSTSHIFT");
        items.push_back("NOTDEFINED");
        items.push_back("SECONDSHIFT");
        items.push_back("THIRDSHIFT");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1308] = new enumeration_type("IfcWorkCalendarTypeEnum", 1308, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ACTUAL");
        items.push_back("BASELINE");
        items.push_back("NOTDEFINED");
        items.push_back("PLANNED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1311] = new enumeration_type("IfcWorkPlanTypeEnum", 1311, items);
    }
    {
        std::vector<std::string> items; items.reserve(5);
        items.push_back("ACTUAL");
        items.push_back("BASELINE");
        items.push_back("NOTDEFINED");
        items.push_back("PLANNED");
        items.push_back("USERDEFINED");
        IFC4X3_RC3_types[1313] = new enumeration_type("IfcWorkScheduleTypeEnum", 1313, items);
    }
    IFC4X3_RC3_types[7] = new entity("IfcActorRole", false, 7, (entity*) 0);
    IFC4X3_RC3_types[12] = new entity("IfcAddress", true, 12, (entity*) 0);
    IFC4X3_RC3_types[36] = new entity("IfcAlignmentParameterSegment", true, 36, (entity*) 0);
    IFC4X3_RC3_types[40] = new entity("IfcAlignmentVerticalSegment", false, 40, (entity*) IFC4X3_RC3_types[36]);
    IFC4X3_RC3_types[49] = new entity("IfcApplication", false, 49, (entity*) 0);
    IFC4X3_RC3_types[50] = new entity("IfcAppliedValue", false, 50, (entity*) 0);
    IFC4X3_RC3_types[52] = new entity("IfcApproval", false, 52, (entity*) 0);
    IFC4X3_RC3_types[94] = new entity("IfcBoundaryCondition", true, 94, (entity*) 0);
    IFC4X3_RC3_types[96] = new entity("IfcBoundaryEdgeCondition", false, 96, (entity*) IFC4X3_RC3_types[94]);
    IFC4X3_RC3_types[97] = new entity("IfcBoundaryFaceCondition", false, 97, (entity*) IFC4X3_RC3_types[94]);
    IFC4X3_RC3_types[98] = new entity("IfcBoundaryNodeCondition", false, 98, (entity*) IFC4X3_RC3_types[94]);
    IFC4X3_RC3_types[99] = new entity("IfcBoundaryNodeConditionWarping", false, 99, (entity*) IFC4X3_RC3_types[98]);
    IFC4X3_RC3_types[208] = new entity("IfcConnectionGeometry", true, 208, (entity*) 0);
    IFC4X3_RC3_types[210] = new entity("IfcConnectionPointGeometry", false, 210, (entity*) IFC4X3_RC3_types[208]);
    IFC4X3_RC3_types[211] = new entity("IfcConnectionSurfaceGeometry", false, 211, (entity*) IFC4X3_RC3_types[208]);
    IFC4X3_RC3_types[213] = new entity("IfcConnectionVolumeGeometry", false, 213, (entity*) IFC4X3_RC3_types[208]);
    IFC4X3_RC3_types[214] = new entity("IfcConstraint", true, 214, (entity*) 0);
    IFC4X3_RC3_types[245] = new entity("IfcCoordinateOperation", true, 245, (entity*) 0);
    IFC4X3_RC3_types[246] = new entity("IfcCoordinateReferenceSystem", true, 246, (entity*) 0);
    IFC4X3_RC3_types[253] = new entity("IfcCostValue", false, 253, (entity*) IFC4X3_RC3_types[50]);
    IFC4X3_RC3_types[301] = new entity("IfcDerivedUnit", false, 301, (entity*) 0);
    IFC4X3_RC3_types[302] = new entity("IfcDerivedUnitElement", false, 302, (entity*) 0);
    IFC4X3_RC3_types[305] = new entity("IfcDimensionalExponents", false, 305, (entity*) 0);
    IFC4X3_RC3_types[429] = new entity("IfcExternalInformation", true, 429, (entity*) 0);
    IFC4X3_RC3_types[433] = new entity("IfcExternalReference", true, 433, (entity*) 0);
    IFC4X3_RC3_types[430] = new entity("IfcExternallyDefinedHatchStyle", false, 430, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[431] = new entity("IfcExternallyDefinedSurfaceStyle", false, 431, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[432] = new entity("IfcExternallyDefinedTextFont", false, 432, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[526] = new entity("IfcGridAxis", false, 526, (entity*) 0);
    IFC4X3_RC3_types[568] = new entity("IfcIrregularTimeSeriesValue", false, 568, (entity*) 0);
    IFC4X3_RC3_types[590] = new entity("IfcLibraryInformation", false, 590, (entity*) IFC4X3_RC3_types[429]);
    IFC4X3_RC3_types[591] = new entity("IfcLibraryReference", false, 591, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[594] = new entity("IfcLightDistributionData", false, 594, (entity*) 0);
    IFC4X3_RC3_types[600] = new entity("IfcLightIntensityDistribution", false, 600, (entity*) 0);
    IFC4X3_RC3_types[631] = new entity("IfcMapConversion", false, 631, (entity*) IFC4X3_RC3_types[245]);
    IFC4X3_RC3_types[641] = new entity("IfcMaterialClassificationRelationship", false, 641, (entity*) 0);
    IFC4X3_RC3_types[644] = new entity("IfcMaterialDefinition", true, 644, (entity*) 0);
    IFC4X3_RC3_types[646] = new entity("IfcMaterialLayer", false, 646, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[647] = new entity("IfcMaterialLayerSet", false, 647, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[649] = new entity("IfcMaterialLayerWithOffsets", false, 649, (entity*) IFC4X3_RC3_types[646]);
    IFC4X3_RC3_types[650] = new entity("IfcMaterialList", false, 650, (entity*) 0);
    IFC4X3_RC3_types[651] = new entity("IfcMaterialProfile", false, 651, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[652] = new entity("IfcMaterialProfileSet", false, 652, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[655] = new entity("IfcMaterialProfileWithOffsets", false, 655, (entity*) IFC4X3_RC3_types[651]);
    IFC4X3_RC3_types[659] = new entity("IfcMaterialUsageDefinition", true, 659, (entity*) 0);
    IFC4X3_RC3_types[661] = new entity("IfcMeasureWithUnit", false, 661, (entity*) 0);
    IFC4X3_RC3_types[672] = new entity("IfcMetric", false, 672, (entity*) IFC4X3_RC3_types[214]);
    IFC4X3_RC3_types[689] = new entity("IfcMonetaryUnit", false, 689, (entity*) 0);
    IFC4X3_RC3_types[697] = new entity("IfcNamedUnit", true, 697, (entity*) 0);
    IFC4X3_RC3_types[708] = new entity("IfcObjectPlacement", true, 708, (entity*) 0);
    IFC4X3_RC3_types[706] = new entity("IfcObjective", false, 706, (entity*) IFC4X3_RC3_types[214]);
    IFC4X3_RC3_types[722] = new entity("IfcOrganization", false, 722, (entity*) 0);
    IFC4X3_RC3_types[729] = new entity("IfcOwnerHistory", false, 729, (entity*) 0);
    IFC4X3_RC3_types[743] = new entity("IfcPerson", false, 743, (entity*) 0);
    IFC4X3_RC3_types[744] = new entity("IfcPersonAndOrganization", false, 744, (entity*) 0);
    IFC4X3_RC3_types[748] = new entity("IfcPhysicalQuantity", true, 748, (entity*) 0);
    IFC4X3_RC3_types[749] = new entity("IfcPhysicalSimpleQuantity", true, 749, (entity*) IFC4X3_RC3_types[748]);
    IFC4X3_RC3_types[788] = new entity("IfcPostalAddress", false, 788, (entity*) IFC4X3_RC3_types[12]);
    IFC4X3_RC3_types[798] = new entity("IfcPresentationItem", true, 798, (entity*) 0);
    IFC4X3_RC3_types[799] = new entity("IfcPresentationLayerAssignment", false, 799, (entity*) 0);
    IFC4X3_RC3_types[800] = new entity("IfcPresentationLayerWithStyle", false, 800, (entity*) IFC4X3_RC3_types[799]);
    IFC4X3_RC3_types[801] = new entity("IfcPresentationStyle", true, 801, (entity*) 0);
    IFC4X3_RC3_types[810] = new entity("IfcProductRepresentation", true, 810, (entity*) 0);
    IFC4X3_RC3_types[813] = new entity("IfcProfileDef", false, 813, (entity*) 0);
    IFC4X3_RC3_types[817] = new entity("IfcProjectedCRS", false, 817, (entity*) IFC4X3_RC3_types[246]);
    IFC4X3_RC3_types[825] = new entity("IfcPropertyAbstraction", true, 825, (entity*) 0);
    IFC4X3_RC3_types[830] = new entity("IfcPropertyEnumeration", false, 830, (entity*) IFC4X3_RC3_types[825]);
    IFC4X3_RC3_types[853] = new entity("IfcQuantityArea", false, 853, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[854] = new entity("IfcQuantityCount", false, 854, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[855] = new entity("IfcQuantityLength", false, 855, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[857] = new entity("IfcQuantityTime", false, 857, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[858] = new entity("IfcQuantityVolume", false, 858, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[859] = new entity("IfcQuantityWeight", false, 859, (entity*) IFC4X3_RC3_types[749]);
    IFC4X3_RC3_types[884] = new entity("IfcRecurrencePattern", false, 884, (entity*) 0);
    IFC4X3_RC3_types[886] = new entity("IfcReference", false, 886, (entity*) 0);
    IFC4X3_RC3_types[956] = new entity("IfcRepresentation", true, 956, (entity*) 0);
    IFC4X3_RC3_types[957] = new entity("IfcRepresentationContext", true, 957, (entity*) 0);
    IFC4X3_RC3_types[958] = new entity("IfcRepresentationItem", true, 958, (entity*) 0);
    IFC4X3_RC3_types[959] = new entity("IfcRepresentationMap", false, 959, (entity*) 0);
    IFC4X3_RC3_types[963] = new entity("IfcResourceLevelRelationship", true, 963, (entity*) 0);
    IFC4X3_RC3_types[978] = new entity("IfcRoot", true, 978, (entity*) 0);
    IFC4X3_RC3_types[1028] = new entity("IfcSIUnit", false, 1028, (entity*) IFC4X3_RC3_types[697]);
    IFC4X3_RC3_types[987] = new entity("IfcSchedulingTime", true, 987, (entity*) 0);
    IFC4X3_RC3_types[1009] = new entity("IfcShapeAspect", false, 1009, (entity*) 0);
    IFC4X3_RC3_types[1010] = new entity("IfcShapeModel", true, 1010, (entity*) IFC4X3_RC3_types[956]);
    IFC4X3_RC3_types[1011] = new entity("IfcShapeRepresentation", false, 1011, (entity*) IFC4X3_RC3_types[1010]);
    IFC4X3_RC3_types[1085] = new entity("IfcStructuralConnectionCondition", true, 1085, (entity*) 0);
    IFC4X3_RC3_types[1095] = new entity("IfcStructuralLoad", true, 1095, (entity*) 0);
    IFC4X3_RC3_types[1097] = new entity("IfcStructuralLoadConfiguration", false, 1097, (entity*) IFC4X3_RC3_types[1095]);
    IFC4X3_RC3_types[1100] = new entity("IfcStructuralLoadOrResult", true, 1100, (entity*) IFC4X3_RC3_types[1095]);
    IFC4X3_RC3_types[1106] = new entity("IfcStructuralLoadStatic", true, 1106, (entity*) IFC4X3_RC3_types[1100]);
    IFC4X3_RC3_types[1107] = new entity("IfcStructuralLoadTemperature", false, 1107, (entity*) IFC4X3_RC3_types[1106]);
    IFC4X3_RC3_types[1124] = new entity("IfcStyleModel", true, 1124, (entity*) IFC4X3_RC3_types[956]);
    IFC4X3_RC3_types[1122] = new entity("IfcStyledItem", false, 1122, (entity*) IFC4X3_RC3_types[958]);
    IFC4X3_RC3_types[1123] = new entity("IfcStyledRepresentation", false, 1123, (entity*) IFC4X3_RC3_types[1124]);
    IFC4X3_RC3_types[1137] = new entity("IfcSurfaceReinforcementArea", false, 1137, (entity*) IFC4X3_RC3_types[1100]);
    IFC4X3_RC3_types[1139] = new entity("IfcSurfaceStyle", false, 1139, (entity*) IFC4X3_RC3_types[801]);
    IFC4X3_RC3_types[1141] = new entity("IfcSurfaceStyleLighting", false, 1141, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1142] = new entity("IfcSurfaceStyleRefraction", false, 1142, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1144] = new entity("IfcSurfaceStyleShading", false, 1144, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1145] = new entity("IfcSurfaceStyleWithTextures", false, 1145, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1146] = new entity("IfcSurfaceTexture", true, 1146, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1158] = new entity("IfcTable", false, 1158, (entity*) 0);
    IFC4X3_RC3_types[1159] = new entity("IfcTableColumn", false, 1159, (entity*) 0);
    IFC4X3_RC3_types[1160] = new entity("IfcTableRow", false, 1160, (entity*) 0);
    IFC4X3_RC3_types[1166] = new entity("IfcTaskTime", false, 1166, (entity*) IFC4X3_RC3_types[987]);
    IFC4X3_RC3_types[1167] = new entity("IfcTaskTimeRecurring", false, 1167, (entity*) IFC4X3_RC3_types[1166]);
    IFC4X3_RC3_types[1170] = new entity("IfcTelecomAddress", false, 1170, (entity*) IFC4X3_RC3_types[12]);
    IFC4X3_RC3_types[1192] = new entity("IfcTextStyle", false, 1192, (entity*) IFC4X3_RC3_types[801]);
    IFC4X3_RC3_types[1194] = new entity("IfcTextStyleForDefinedFont", false, 1194, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1195] = new entity("IfcTextStyleTextModel", false, 1195, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1197] = new entity("IfcTextureCoordinate", true, 1197, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1198] = new entity("IfcTextureCoordinateGenerator", false, 1198, (entity*) IFC4X3_RC3_types[1197]);
    IFC4X3_RC3_types[1199] = new entity("IfcTextureMap", false, 1199, (entity*) IFC4X3_RC3_types[1197]);
    IFC4X3_RC3_types[1200] = new entity("IfcTextureVertex", false, 1200, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1201] = new entity("IfcTextureVertexList", false, 1201, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[1212] = new entity("IfcTimePeriod", false, 1212, (entity*) 0);
    IFC4X3_RC3_types[1213] = new entity("IfcTimeSeries", true, 1213, (entity*) 0);
    IFC4X3_RC3_types[1215] = new entity("IfcTimeSeriesValue", false, 1215, (entity*) 0);
    IFC4X3_RC3_types[1217] = new entity("IfcTopologicalRepresentationItem", true, 1217, (entity*) IFC4X3_RC3_types[958]);
    IFC4X3_RC3_types[1218] = new entity("IfcTopologyRepresentation", false, 1218, (entity*) IFC4X3_RC3_types[1010]);
    IFC4X3_RC3_types[1255] = new entity("IfcUnitAssignment", false, 1255, (entity*) 0);
    IFC4X3_RC3_types[1266] = new entity("IfcVertex", false, 1266, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[1268] = new entity("IfcVertexPoint", false, 1268, (entity*) IFC4X3_RC3_types[1266]);
    IFC4X3_RC3_types[1277] = new entity("IfcVirtualGridIntersection", false, 1277, (entity*) 0);
    IFC4X3_RC3_types[1314] = new entity("IfcWorkTime", false, 1314, (entity*) IFC4X3_RC3_types[987]);
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[722]);
        items.push_back(IFC4X3_RC3_types[743]);
        items.push_back(IFC4X3_RC3_types[744]);
        IFC4X3_RC3_types[8] = new select_type("IfcActorSelect", 8, items);
    }
    IFC4X3_RC3_types[57] = new type_declaration("IfcArcIndex", 57, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[784])));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[589]);
        items.push_back(IFC4X3_RC3_types[766]);
        IFC4X3_RC3_types[81] = new select_type("IfcBendingParameterSelect", 81, items);
    }
    IFC4X3_RC3_types[103] = new type_declaration("IfcBoxAlignment", 103, new named_type(IFC4X3_RC3_types[578]));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[701]);
        items.push_back(IFC4X3_RC3_types[731]);
        IFC4X3_RC3_types[278] = new select_type("IfcCurveMeasureSelect", 278, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(71);
        items.push_back(IFC4X3_RC3_types[0]);
        items.push_back(IFC4X3_RC3_types[1]);
        items.push_back(IFC4X3_RC3_types[45]);
        items.push_back(IFC4X3_RC3_types[58]);
        items.push_back(IFC4X3_RC3_types[198]);
        items.push_back(IFC4X3_RC3_types[272]);
        items.push_back(IFC4X3_RC3_types[350]);
        items.push_back(IFC4X3_RC3_types[363]);
        items.push_back(IFC4X3_RC3_types[375]);
        items.push_back(IFC4X3_RC3_types[376]);
        items.push_back(IFC4X3_RC3_types[377]);
        items.push_back(IFC4X3_RC3_types[394]);
        items.push_back(IFC4X3_RC3_types[398]);
        items.push_back(IFC4X3_RC3_types[413]);
        items.push_back(IFC4X3_RC3_types[500]);
        items.push_back(IFC4X3_RC3_types[501]);
        items.push_back(IFC4X3_RC3_types[536]);
        items.push_back(IFC4X3_RC3_types[537]);
        items.push_back(IFC4X3_RC3_types[542]);
        items.push_back(IFC4X3_RC3_types[555]);
        items.push_back(IFC4X3_RC3_types[557]);
        items.push_back(IFC4X3_RC3_types[566]);
        items.push_back(IFC4X3_RC3_types[570]);
        items.push_back(IFC4X3_RC3_types[576]);
        items.push_back(IFC4X3_RC3_types[609]);
        items.push_back(IFC4X3_RC3_types[610]);
        items.push_back(IFC4X3_RC3_types[613]);
        items.push_back(IFC4X3_RC3_types[614]);
        items.push_back(IFC4X3_RC3_types[625]);
        items.push_back(IFC4X3_RC3_types[626]);
        items.push_back(IFC4X3_RC3_types[628]);
        items.push_back(IFC4X3_RC3_types[629]);
        items.push_back(IFC4X3_RC3_types[636]);
        items.push_back(IFC4X3_RC3_types[637]);
        items.push_back(IFC4X3_RC3_types[639]);
        items.push_back(IFC4X3_RC3_types[678]);
        items.push_back(IFC4X3_RC3_types[679]);
        items.push_back(IFC4X3_RC3_types[680]);
        items.push_back(IFC4X3_RC3_types[682]);
        items.push_back(IFC4X3_RC3_types[685]);
        items.push_back(IFC4X3_RC3_types[686]);
        items.push_back(IFC4X3_RC3_types[687]);
        items.push_back(IFC4X3_RC3_types[688]);
        items.push_back(IFC4X3_RC3_types[745]);
        items.push_back(IFC4X3_RC3_types[764]);
        items.push_back(IFC4X3_RC3_types[789]);
        items.push_back(IFC4X3_RC3_types[802]);
        items.push_back(IFC4X3_RC3_types[860]);
        items.push_back(IFC4X3_RC3_types[979]);
        items.push_back(IFC4X3_RC3_types[980]);
        items.push_back(IFC4X3_RC3_types[981]);
        items.push_back(IFC4X3_RC3_types[995]);
        items.push_back(IFC4X3_RC3_types[990]);
        items.push_back(IFC4X3_RC3_types[1012]);
        items.push_back(IFC4X3_RC3_types[1044]);
        items.push_back(IFC4X3_RC3_types[1045]);
        items.push_back(IFC4X3_RC3_types[1046]);
        items.push_back(IFC4X3_RC3_types[1047]);
        items.push_back(IFC4X3_RC3_types[1063]);
        items.push_back(IFC4X3_RC3_types[1171]);
        items.push_back(IFC4X3_RC3_types[1172]);
        items.push_back(IFC4X3_RC3_types[1202]);
        items.push_back(IFC4X3_RC3_types[1203]);
        items.push_back(IFC4X3_RC3_types[1204]);
        items.push_back(IFC4X3_RC3_types[1205]);
        items.push_back(IFC4X3_RC3_types[1206]);
        items.push_back(IFC4X3_RC3_types[1220]);
        items.push_back(IFC4X3_RC3_types[1263]);
        items.push_back(IFC4X3_RC3_types[1282]);
        items.push_back(IFC4X3_RC3_types[1288]);
        items.push_back(IFC4X3_RC3_types[1289]);
        IFC4X3_RC3_types[299] = new select_type("IfcDerivedMeasureValue", 299, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(5);
        items.push_back(IFC4X3_RC3_types[106]);
        items.push_back(IFC4X3_RC3_types[449]);
        items.push_back(IFC4X3_RC3_types[635]);
        items.push_back(IFC4X3_RC3_types[868]);
        items.push_back(IFC4X3_RC3_types[972]);
        IFC4X3_RC3_types[450] = new select_type("IfcFacilityPartTypeSelect", 450, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[546]);
        items.push_back(IFC4X3_RC3_types[1271]);
        items.push_back(IFC4X3_RC3_types[1274]);
        IFC4X3_RC3_types[547] = new select_type("IfcImpactProtectionDeviceTypeSelect", 547, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[956]);
        items.push_back(IFC4X3_RC3_types[958]);
        IFC4X3_RC3_types[587] = new select_type("IfcLayeredItem", 587, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[590]);
        items.push_back(IFC4X3_RC3_types[591]);
        IFC4X3_RC3_types[592] = new select_type("IfcLibrarySelect", 592, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[433]);
        items.push_back(IFC4X3_RC3_types[600]);
        IFC4X3_RC3_types[595] = new select_type("IfcLightDistributionDataSourceSelect", 595, items);
    }
    IFC4X3_RC3_types[615] = new type_declaration("IfcLineIndex", 615, new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[784])));
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[644]);
        items.push_back(IFC4X3_RC3_types[650]);
        items.push_back(IFC4X3_RC3_types[659]);
        IFC4X3_RC3_types[658] = new select_type("IfcMaterialSelect", 658, items);
    }
    IFC4X3_RC3_types[702] = new type_declaration("IfcNormalisedRatioMeasure", 702, new named_type(IFC4X3_RC3_types[876]));
    {
        std::vector<const declaration*> items; items.reserve(9);
        items.push_back(IFC4X3_RC3_types[12]);
        items.push_back(IFC4X3_RC3_types[50]);
        items.push_back(IFC4X3_RC3_types[433]);
        items.push_back(IFC4X3_RC3_types[644]);
        items.push_back(IFC4X3_RC3_types[722]);
        items.push_back(IFC4X3_RC3_types[743]);
        items.push_back(IFC4X3_RC3_types[744]);
        items.push_back(IFC4X3_RC3_types[1158]);
        items.push_back(IFC4X3_RC3_types[1213]);
        IFC4X3_RC3_types[709] = new select_type("IfcObjectReferenceSelect", 709, items);
    }
    IFC4X3_RC3_types[787] = new type_declaration("IfcPositiveRatioMeasure", 787, new named_type(IFC4X3_RC3_types[876]));
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[57]);
        items.push_back(IFC4X3_RC3_types[615]);
        IFC4X3_RC3_types[1001] = new select_type("IfcSegmentIndexSelect", 1001, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(14);
        items.push_back(IFC4X3_RC3_types[82]);
        items.push_back(IFC4X3_RC3_types[88]);
        items.push_back(IFC4X3_RC3_types[292]);
        items.push_back(IFC4X3_RC3_types[293]);
        items.push_back(IFC4X3_RC3_types[362]);
        items.push_back(IFC4X3_RC3_types[541]);
        items.push_back(IFC4X3_RC3_types[556]);
        items.push_back(IFC4X3_RC3_types[578]);
        items.push_back(IFC4X3_RC3_types[621]);
        items.push_back(IFC4X3_RC3_types[784]);
        items.push_back(IFC4X3_RC3_types[879]);
        items.push_back(IFC4X3_RC3_types[1184]);
        items.push_back(IFC4X3_RC3_types[1209]);
        items.push_back(IFC4X3_RC3_types[1216]);
        IFC4X3_RC3_types[1024] = new select_type("IfcSimpleValue", 1024, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(6);
        items.push_back(IFC4X3_RC3_types[304]);
        items.push_back(IFC4X3_RC3_types[589]);
        items.push_back(IFC4X3_RC3_types[702]);
        items.push_back(IFC4X3_RC3_types[785]);
        items.push_back(IFC4X3_RC3_types[787]);
        items.push_back(IFC4X3_RC3_types[876]);
        IFC4X3_RC3_types[1030] = new select_type("IfcSizeSelect", 1030, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[1064]);
        items.push_back(IFC4X3_RC3_types[1066]);
        IFC4X3_RC3_types[1065] = new select_type("IfcSpecularHighlightSelect", 1065, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(5);
        items.push_back(IFC4X3_RC3_types[431]);
        items.push_back(IFC4X3_RC3_types[1141]);
        items.push_back(IFC4X3_RC3_types[1142]);
        items.push_back(IFC4X3_RC3_types[1144]);
        items.push_back(IFC4X3_RC3_types[1145]);
        IFC4X3_RC3_types[1140] = new select_type("IfcSurfaceStyleElementSelect", 1140, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[301]);
        items.push_back(IFC4X3_RC3_types[689]);
        items.push_back(IFC4X3_RC3_types[697]);
        IFC4X3_RC3_types[1248] = new select_type("IfcUnit", 1248, items);
    }
    IFC4X3_RC3_types[31] = new entity("IfcAlignmentCantSegment", false, 31, (entity*) IFC4X3_RC3_types[36]);
    IFC4X3_RC3_types[34] = new entity("IfcAlignmentHorizontalSegment", false, 34, (entity*) IFC4X3_RC3_types[36]);
    IFC4X3_RC3_types[53] = new entity("IfcApprovalRelationship", false, 53, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[54] = new entity("IfcArbitraryClosedProfileDef", false, 54, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[55] = new entity("IfcArbitraryOpenProfileDef", false, 55, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[56] = new entity("IfcArbitraryProfileDefWithVoids", false, 56, (entity*) IFC4X3_RC3_types[54]);
    IFC4X3_RC3_types[83] = new entity("IfcBlobTexture", false, 83, (entity*) IFC4X3_RC3_types[1146]);
    IFC4X3_RC3_types[156] = new entity("IfcCenterLineProfileDef", false, 156, (entity*) IFC4X3_RC3_types[55]);
    IFC4X3_RC3_types[169] = new entity("IfcClassification", false, 169, (entity*) IFC4X3_RC3_types[429]);
    IFC4X3_RC3_types[170] = new entity("IfcClassificationReference", false, 170, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[181] = new entity("IfcColourRgbList", false, 181, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[182] = new entity("IfcColourSpecification", true, 182, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[197] = new entity("IfcCompositeProfileDef", false, 197, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[206] = new entity("IfcConnectedFaceSet", false, 206, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[207] = new entity("IfcConnectionCurveGeometry", false, 207, (entity*) IFC4X3_RC3_types[208]);
    IFC4X3_RC3_types[209] = new entity("IfcConnectionPointEccentricity", false, 209, (entity*) IFC4X3_RC3_types[210]);
    IFC4X3_RC3_types[229] = new entity("IfcContextDependentUnit", false, 229, (entity*) IFC4X3_RC3_types[697]);
    IFC4X3_RC3_types[234] = new entity("IfcConversionBasedUnit", false, 234, (entity*) IFC4X3_RC3_types[697]);
    IFC4X3_RC3_types[235] = new entity("IfcConversionBasedUnitWithOffset", false, 235, (entity*) IFC4X3_RC3_types[234]);
    IFC4X3_RC3_types[268] = new entity("IfcCurrencyRelationship", false, 268, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[282] = new entity("IfcCurveStyle", false, 282, (entity*) IFC4X3_RC3_types[801]);
    IFC4X3_RC3_types[283] = new entity("IfcCurveStyleFont", false, 283, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[284] = new entity("IfcCurveStyleFontAndScaling", false, 284, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[285] = new entity("IfcCurveStyleFontPattern", false, 285, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[300] = new entity("IfcDerivedProfileDef", false, 300, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[333] = new entity("IfcDocumentInformation", false, 333, (entity*) IFC4X3_RC3_types[429]);
    IFC4X3_RC3_types[334] = new entity("IfcDocumentInformationRelationship", false, 334, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[335] = new entity("IfcDocumentReference", false, 335, (entity*) IFC4X3_RC3_types[433]);
    IFC4X3_RC3_types[369] = new entity("IfcEdge", false, 369, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[370] = new entity("IfcEdgeCurve", false, 370, (entity*) IFC4X3_RC3_types[369]);
    IFC4X3_RC3_types[424] = new entity("IfcEventTime", false, 424, (entity*) IFC4X3_RC3_types[987]);
    IFC4X3_RC3_types[428] = new entity("IfcExtendedProperties", true, 428, (entity*) IFC4X3_RC3_types[825]);
    IFC4X3_RC3_types[434] = new entity("IfcExternalReferenceRelationship", false, 434, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[440] = new entity("IfcFace", false, 440, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[442] = new entity("IfcFaceBound", false, 442, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[443] = new entity("IfcFaceOuterBound", false, 443, (entity*) IFC4X3_RC3_types[442]);
    IFC4X3_RC3_types[444] = new entity("IfcFaceSurface", false, 444, (entity*) IFC4X3_RC3_types[440]);
    IFC4X3_RC3_types[452] = new entity("IfcFailureConnectionCondition", false, 452, (entity*) IFC4X3_RC3_types[1085]);
    IFC4X3_RC3_types[462] = new entity("IfcFillAreaStyle", false, 462, (entity*) IFC4X3_RC3_types[801]);
    IFC4X3_RC3_types[512] = new entity("IfcGeometricRepresentationContext", false, 512, (entity*) IFC4X3_RC3_types[957]);
    IFC4X3_RC3_types[513] = new entity("IfcGeometricRepresentationItem", true, 513, (entity*) IFC4X3_RC3_types[958]);
    IFC4X3_RC3_types[514] = new entity("IfcGeometricRepresentationSubContext", false, 514, (entity*) IFC4X3_RC3_types[512]);
    IFC4X3_RC3_types[515] = new entity("IfcGeometricSet", false, 515, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[527] = new entity("IfcGridPlacement", false, 527, (entity*) IFC4X3_RC3_types[708]);
    IFC4X3_RC3_types[531] = new entity("IfcHalfSpaceSolid", false, 531, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[543] = new entity("IfcImageTexture", false, 543, (entity*) IFC4X3_RC3_types[1146]);
    IFC4X3_RC3_types[549] = new entity("IfcIndexedColourMap", false, 549, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[553] = new entity("IfcIndexedTextureMap", true, 553, (entity*) IFC4X3_RC3_types[1197]);
    IFC4X3_RC3_types[554] = new entity("IfcIndexedTriangleTextureMap", false, 554, (entity*) IFC4X3_RC3_types[553]);
    IFC4X3_RC3_types[567] = new entity("IfcIrregularTimeSeries", false, 567, (entity*) IFC4X3_RC3_types[1213]);
    IFC4X3_RC3_types[582] = new entity("IfcLagTime", false, 582, (entity*) IFC4X3_RC3_types[987]);
    IFC4X3_RC3_types[601] = new entity("IfcLightSource", true, 601, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[602] = new entity("IfcLightSourceAmbient", false, 602, (entity*) IFC4X3_RC3_types[601]);
    IFC4X3_RC3_types[603] = new entity("IfcLightSourceDirectional", false, 603, (entity*) IFC4X3_RC3_types[601]);
    IFC4X3_RC3_types[604] = new entity("IfcLightSourceGoniometric", false, 604, (entity*) IFC4X3_RC3_types[601]);
    IFC4X3_RC3_types[605] = new entity("IfcLightSourcePositional", false, 605, (entity*) IFC4X3_RC3_types[601]);
    IFC4X3_RC3_types[606] = new entity("IfcLightSourceSpot", false, 606, (entity*) IFC4X3_RC3_types[605]);
    IFC4X3_RC3_types[611] = new entity("IfcLinearPlacement", false, 611, (entity*) IFC4X3_RC3_types[708]);
    IFC4X3_RC3_types[620] = new entity("IfcLocalPlacement", false, 620, (entity*) IFC4X3_RC3_types[708]);
    IFC4X3_RC3_types[623] = new entity("IfcLoop", false, 623, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[632] = new entity("IfcMappedItem", false, 632, (entity*) IFC4X3_RC3_types[958]);
    IFC4X3_RC3_types[640] = new entity("IfcMaterial", false, 640, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[642] = new entity("IfcMaterialConstituent", false, 642, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[643] = new entity("IfcMaterialConstituentSet", false, 643, (entity*) IFC4X3_RC3_types[644]);
    IFC4X3_RC3_types[645] = new entity("IfcMaterialDefinitionRepresentation", false, 645, (entity*) IFC4X3_RC3_types[810]);
    IFC4X3_RC3_types[648] = new entity("IfcMaterialLayerSetUsage", false, 648, (entity*) IFC4X3_RC3_types[659]);
    IFC4X3_RC3_types[653] = new entity("IfcMaterialProfileSetUsage", false, 653, (entity*) IFC4X3_RC3_types[659]);
    IFC4X3_RC3_types[654] = new entity("IfcMaterialProfileSetUsageTapering", false, 654, (entity*) IFC4X3_RC3_types[653]);
    IFC4X3_RC3_types[656] = new entity("IfcMaterialProperties", false, 656, (entity*) IFC4X3_RC3_types[428]);
    IFC4X3_RC3_types[657] = new entity("IfcMaterialRelationship", false, 657, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[674] = new entity("IfcMirroredProfileDef", false, 674, (entity*) IFC4X3_RC3_types[300]);
    IFC4X3_RC3_types[705] = new entity("IfcObjectDefinition", true, 705, (entity*) IFC4X3_RC3_types[978]);
    IFC4X3_RC3_types[717] = new entity("IfcOpenCrossProfileDef", false, 717, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[721] = new entity("IfcOpenShell", false, 721, (entity*) IFC4X3_RC3_types[206]);
    IFC4X3_RC3_types[723] = new entity("IfcOrganizationRelationship", false, 723, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[724] = new entity("IfcOrientedEdge", false, 724, (entity*) IFC4X3_RC3_types[369]);
    IFC4X3_RC3_types[730] = new entity("IfcParameterizedProfileDef", true, 730, (entity*) IFC4X3_RC3_types[813]);
    IFC4X3_RC3_types[732] = new entity("IfcPath", false, 732, (entity*) IFC4X3_RC3_types[1217]);
    IFC4X3_RC3_types[746] = new entity("IfcPhysicalComplexQuantity", false, 746, (entity*) IFC4X3_RC3_types[748]);
    IFC4X3_RC3_types[760] = new entity("IfcPixelTexture", false, 760, (entity*) IFC4X3_RC3_types[1146]);
    IFC4X3_RC3_types[761] = new entity("IfcPlacement", true, 761, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[763] = new entity("IfcPlanarExtent", false, 763, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[772] = new entity("IfcPoint", true, 772, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[773] = new entity("IfcPointByDistanceExpression", false, 773, (entity*) IFC4X3_RC3_types[772]);
    IFC4X3_RC3_types[774] = new entity("IfcPointOnCurve", false, 774, (entity*) IFC4X3_RC3_types[772]);
    IFC4X3_RC3_types[775] = new entity("IfcPointOnSurface", false, 775, (entity*) IFC4X3_RC3_types[772]);
    IFC4X3_RC3_types[780] = new entity("IfcPolyLoop", false, 780, (entity*) IFC4X3_RC3_types[623]);
    IFC4X3_RC3_types[777] = new entity("IfcPolygonalBoundedHalfSpace", false, 777, (entity*) IFC4X3_RC3_types[531]);
    IFC4X3_RC3_types[792] = new entity("IfcPreDefinedItem", true, 792, (entity*) IFC4X3_RC3_types[798]);
    IFC4X3_RC3_types[793] = new entity("IfcPreDefinedProperties", true, 793, (entity*) IFC4X3_RC3_types[825]);
    IFC4X3_RC3_types[795] = new entity("IfcPreDefinedTextFont", true, 795, (entity*) IFC4X3_RC3_types[792]);
    IFC4X3_RC3_types[809] = new entity("IfcProductDefinitionShape", false, 809, (entity*) IFC4X3_RC3_types[810]);
    IFC4X3_RC3_types[814] = new entity("IfcProfileProperties", false, 814, (entity*) IFC4X3_RC3_types[428]);
    IFC4X3_RC3_types[824] = new entity("IfcProperty", true, 824, (entity*) IFC4X3_RC3_types[825]);
    IFC4X3_RC3_types[827] = new entity("IfcPropertyDefinition", true, 827, (entity*) IFC4X3_RC3_types[978]);
    IFC4X3_RC3_types[828] = new entity("IfcPropertyDependencyRelationship", false, 828, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[834] = new entity("IfcPropertySetDefinition", true, 834, (entity*) IFC4X3_RC3_types[827]);
    IFC4X3_RC3_types[842] = new entity("IfcPropertyTemplateDefinition", true, 842, (entity*) IFC4X3_RC3_types[827]);
    IFC4X3_RC3_types[856] = new entity("IfcQuantitySet", true, 856, (entity*) IFC4X3_RC3_types[834]);
    IFC4X3_RC3_types[881] = new entity("IfcRectangleProfileDef", false, 881, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[890] = new entity("IfcRegularTimeSeries", false, 890, (entity*) IFC4X3_RC3_types[1213]);
    IFC4X3_RC3_types[893] = new entity("IfcReinforcementBarProperties", false, 893, (entity*) IFC4X3_RC3_types[793]);
    IFC4X3_RC3_types[922] = new entity("IfcRelationship", true, 922, (entity*) IFC4X3_RC3_types[978]);
    IFC4X3_RC3_types[961] = new entity("IfcResourceApprovalRelationship", false, 961, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[962] = new entity("IfcResourceConstraintRelationship", false, 962, (entity*) IFC4X3_RC3_types[963]);
    IFC4X3_RC3_types[966] = new entity("IfcResourceTime", false, 966, (entity*) IFC4X3_RC3_types[987]);
    IFC4X3_RC3_types[983] = new entity("IfcRoundedRectangleProfileDef", false, 983, (entity*) IFC4X3_RC3_types[881]);
    IFC4X3_RC3_types[996] = new entity("IfcSectionProperties", false, 996, (entity*) IFC4X3_RC3_types[793]);
    IFC4X3_RC3_types[997] = new entity("IfcSectionReinforcementProperties", false, 997, (entity*) IFC4X3_RC3_types[793]);
    IFC4X3_RC3_types[993] = new entity("IfcSectionedSpine", false, 993, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[999] = new entity("IfcSegment", true, 999, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1014] = new entity("IfcShellBasedSurfaceModel", false, 1014, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1021] = new entity("IfcSimpleProperty", true, 1021, (entity*) IFC4X3_RC3_types[824]);
    IFC4X3_RC3_types[1036] = new entity("IfcSlippageConnectionCondition", false, 1036, (entity*) IFC4X3_RC3_types[1085]);
    IFC4X3_RC3_types[1041] = new entity("IfcSolidModel", true, 1041, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1099] = new entity("IfcStructuralLoadLinearForce", false, 1099, (entity*) IFC4X3_RC3_types[1106]);
    IFC4X3_RC3_types[1101] = new entity("IfcStructuralLoadPlanarForce", false, 1101, (entity*) IFC4X3_RC3_types[1106]);
    IFC4X3_RC3_types[1102] = new entity("IfcStructuralLoadSingleDisplacement", false, 1102, (entity*) IFC4X3_RC3_types[1106]);
    IFC4X3_RC3_types[1103] = new entity("IfcStructuralLoadSingleDisplacementDistortion", false, 1103, (entity*) IFC4X3_RC3_types[1102]);
    IFC4X3_RC3_types[1104] = new entity("IfcStructuralLoadSingleForce", false, 1104, (entity*) IFC4X3_RC3_types[1106]);
    IFC4X3_RC3_types[1105] = new entity("IfcStructuralLoadSingleForceWarping", false, 1105, (entity*) IFC4X3_RC3_types[1104]);
    IFC4X3_RC3_types[1128] = new entity("IfcSubedge", false, 1128, (entity*) IFC4X3_RC3_types[369]);
    IFC4X3_RC3_types[1129] = new entity("IfcSurface", true, 1129, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1143] = new entity("IfcSurfaceStyleRendering", false, 1143, (entity*) IFC4X3_RC3_types[1144]);
    IFC4X3_RC3_types[1147] = new entity("IfcSweptAreaSolid", true, 1147, (entity*) IFC4X3_RC3_types[1041]);
    IFC4X3_RC3_types[1148] = new entity("IfcSweptDiskSolid", false, 1148, (entity*) IFC4X3_RC3_types[1041]);
    IFC4X3_RC3_types[1149] = new entity("IfcSweptDiskSolidPolygonal", false, 1149, (entity*) IFC4X3_RC3_types[1148]);
    IFC4X3_RC3_types[1150] = new entity("IfcSweptSurface", true, 1150, (entity*) IFC4X3_RC3_types[1129]);
    IFC4X3_RC3_types[1240] = new entity("IfcTShapeProfileDef", false, 1240, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[1183] = new entity("IfcTessellatedItem", true, 1183, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1189] = new entity("IfcTextLiteral", false, 1189, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1190] = new entity("IfcTextLiteralWithExtent", false, 1190, (entity*) IFC4X3_RC3_types[1189]);
    IFC4X3_RC3_types[1193] = new entity("IfcTextStyleFontModel", false, 1193, (entity*) IFC4X3_RC3_types[795]);
    IFC4X3_RC3_types[1234] = new entity("IfcTrapeziumProfileDef", false, 1234, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[1244] = new entity("IfcTypeObject", false, 1244, (entity*) IFC4X3_RC3_types[705]);
    IFC4X3_RC3_types[1245] = new entity("IfcTypeProcess", true, 1245, (entity*) IFC4X3_RC3_types[1244]);
    IFC4X3_RC3_types[1246] = new entity("IfcTypeProduct", false, 1246, (entity*) IFC4X3_RC3_types[1244]);
    IFC4X3_RC3_types[1247] = new entity("IfcTypeResource", true, 1247, (entity*) IFC4X3_RC3_types[1244]);
    IFC4X3_RC3_types[1258] = new entity("IfcUShapeProfileDef", false, 1258, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[1264] = new entity("IfcVector", false, 1264, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[1267] = new entity("IfcVertexLoop", false, 1267, (entity*) IFC4X3_RC3_types[623]);
    IFC4X3_RC3_types[1301] = new entity("IfcWindowStyle", false, 1301, (entity*) IFC4X3_RC3_types[1246]);
    IFC4X3_RC3_types[1316] = new entity("IfcZShapeProfileDef", false, 1316, (entity*) IFC4X3_RC3_types[730]);
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[169]);
        items.push_back(IFC4X3_RC3_types[170]);
        IFC4X3_RC3_types[171] = new select_type("IfcClassificationReferenceSelect", 171, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[169]);
        items.push_back(IFC4X3_RC3_types[170]);
        IFC4X3_RC3_types[172] = new select_type("IfcClassificationSelect", 172, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[246]);
        items.push_back(IFC4X3_RC3_types[512]);
        IFC4X3_RC3_types[247] = new select_type("IfcCoordinateReferenceSystemSelect", 247, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[705]);
        items.push_back(IFC4X3_RC3_types[827]);
        IFC4X3_RC3_types[298] = new select_type("IfcDefinitionSelect", 298, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[333]);
        items.push_back(IFC4X3_RC3_types[335]);
        IFC4X3_RC3_types[336] = new select_type("IfcDocumentSelect", 336, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[785]);
        items.push_back(IFC4X3_RC3_types[1264]);
        IFC4X3_RC3_types[532] = new select_type("IfcHatchLineDistanceSelect", 532, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(23);
        items.push_back(IFC4X3_RC3_types[42]);
        items.push_back(IFC4X3_RC3_types[59]);
        items.push_back(IFC4X3_RC3_types[190]);
        items.push_back(IFC4X3_RC3_types[228]);
        items.push_back(IFC4X3_RC3_types[254]);
        items.push_back(IFC4X3_RC3_types[304]);
        items.push_back(IFC4X3_RC3_types[378]);
        items.push_back(IFC4X3_RC3_types[589]);
        items.push_back(IFC4X3_RC3_types[627]);
        items.push_back(IFC4X3_RC3_types[638]);
        items.push_back(IFC4X3_RC3_types[701]);
        items.push_back(IFC4X3_RC3_types[702]);
        items.push_back(IFC4X3_RC3_types[703]);
        items.push_back(IFC4X3_RC3_types[731]);
        items.push_back(IFC4X3_RC3_types[766]);
        items.push_back(IFC4X3_RC3_types[785]);
        items.push_back(IFC4X3_RC3_types[786]);
        items.push_back(IFC4X3_RC3_types[787]);
        items.push_back(IFC4X3_RC3_types[876]);
        items.push_back(IFC4X3_RC3_types[1040]);
        items.push_back(IFC4X3_RC3_types[1207]);
        items.push_back(IFC4X3_RC3_types[1210]);
        items.push_back(IFC4X3_RC3_types[1281]);
        IFC4X3_RC3_types[660] = new select_type("IfcMeasureValue", 660, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[772]);
        items.push_back(IFC4X3_RC3_types[1268]);
        IFC4X3_RC3_types[776] = new select_type("IfcPointOrVertexPoint", 776, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[809]);
        items.push_back(IFC4X3_RC3_types[959]);
        IFC4X3_RC3_types[811] = new select_type("IfcProductRepresentationSelect", 811, items);
    }
    IFC4X3_RC3_types[836] = new type_declaration("IfcPropertySetDefinitionSet", 836, new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[834])));
    {
        std::vector<const declaration*> items; items.reserve(17);
        items.push_back(IFC4X3_RC3_types[7]);
        items.push_back(IFC4X3_RC3_types[50]);
        items.push_back(IFC4X3_RC3_types[52]);
        items.push_back(IFC4X3_RC3_types[214]);
        items.push_back(IFC4X3_RC3_types[229]);
        items.push_back(IFC4X3_RC3_types[234]);
        items.push_back(IFC4X3_RC3_types[429]);
        items.push_back(IFC4X3_RC3_types[433]);
        items.push_back(IFC4X3_RC3_types[644]);
        items.push_back(IFC4X3_RC3_types[722]);
        items.push_back(IFC4X3_RC3_types[743]);
        items.push_back(IFC4X3_RC3_types[744]);
        items.push_back(IFC4X3_RC3_types[748]);
        items.push_back(IFC4X3_RC3_types[813]);
        items.push_back(IFC4X3_RC3_types[825]);
        items.push_back(IFC4X3_RC3_types[1009]);
        items.push_back(IFC4X3_RC3_types[1213]);
        IFC4X3_RC3_types[964] = new select_type("IfcResourceObjectSelect", 964, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[432]);
        items.push_back(IFC4X3_RC3_types[795]);
        IFC4X3_RC3_types[1188] = new select_type("IfcTextFontSelect", 1188, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[299]);
        items.push_back(IFC4X3_RC3_types[660]);
        items.push_back(IFC4X3_RC3_types[1024]);
        IFC4X3_RC3_types[1259] = new select_type("IfcValue", 1259, items);
    }
    IFC4X3_RC3_types[16] = new entity("IfcAdvancedFace", false, 16, (entity*) IFC4X3_RC3_types[444]);
    IFC4X3_RC3_types[47] = new entity("IfcAnnotationFillArea", false, 47, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[63] = new entity("IfcAsymmetricIShapeProfileDef", false, 63, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[67] = new entity("IfcAxis1Placement", false, 67, (entity*) IFC4X3_RC3_types[761]);
    IFC4X3_RC3_types[69] = new entity("IfcAxis2Placement2D", false, 69, (entity*) IFC4X3_RC3_types[761]);
    IFC4X3_RC3_types[70] = new entity("IfcAxis2Placement3D", false, 70, (entity*) IFC4X3_RC3_types[761]);
    IFC4X3_RC3_types[71] = new entity("IfcAxis2PlacementLinear", false, 71, (entity*) IFC4X3_RC3_types[761]);
    IFC4X3_RC3_types[92] = new entity("IfcBooleanResult", false, 92, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[101] = new entity("IfcBoundedSurface", true, 101, (entity*) IFC4X3_RC3_types[1129]);
    IFC4X3_RC3_types[102] = new entity("IfcBoundingBox", false, 102, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[104] = new entity("IfcBoxedHalfSpace", false, 104, (entity*) IFC4X3_RC3_types[531]);
    IFC4X3_RC3_types[267] = new entity("IfcCShapeProfileDef", false, 267, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[147] = new entity("IfcCartesianPoint", false, 147, (entity*) IFC4X3_RC3_types[772]);
    IFC4X3_RC3_types[148] = new entity("IfcCartesianPointList", true, 148, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[149] = new entity("IfcCartesianPointList2D", false, 149, (entity*) IFC4X3_RC3_types[148]);
    IFC4X3_RC3_types[150] = new entity("IfcCartesianPointList3D", false, 150, (entity*) IFC4X3_RC3_types[148]);
    IFC4X3_RC3_types[151] = new entity("IfcCartesianTransformationOperator", true, 151, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[152] = new entity("IfcCartesianTransformationOperator2D", false, 152, (entity*) IFC4X3_RC3_types[151]);
    IFC4X3_RC3_types[153] = new entity("IfcCartesianTransformationOperator2DnonUniform", false, 153, (entity*) IFC4X3_RC3_types[152]);
    IFC4X3_RC3_types[154] = new entity("IfcCartesianTransformationOperator3D", false, 154, (entity*) IFC4X3_RC3_types[151]);
    IFC4X3_RC3_types[155] = new entity("IfcCartesianTransformationOperator3DnonUniform", false, 155, (entity*) IFC4X3_RC3_types[154]);
    IFC4X3_RC3_types[166] = new entity("IfcCircleProfileDef", false, 166, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[173] = new entity("IfcClosedShell", false, 173, (entity*) IFC4X3_RC3_types[206]);
    IFC4X3_RC3_types[180] = new entity("IfcColourRgb", false, 180, (entity*) IFC4X3_RC3_types[182]);
    IFC4X3_RC3_types[191] = new entity("IfcComplexProperty", false, 191, (entity*) IFC4X3_RC3_types[824]);
    IFC4X3_RC3_types[196] = new entity("IfcCompositeCurveSegment", false, 196, (entity*) IFC4X3_RC3_types[999]);
    IFC4X3_RC3_types[226] = new entity("IfcConstructionResourceType", true, 226, (entity*) IFC4X3_RC3_types[1247]);
    IFC4X3_RC3_types[227] = new entity("IfcContext", true, 227, (entity*) IFC4X3_RC3_types[705]);
    IFC4X3_RC3_types[262] = new entity("IfcCrewResourceType", false, 262, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[264] = new entity("IfcCsgPrimitive3D", true, 264, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[266] = new entity("IfcCsgSolid", false, 266, (entity*) IFC4X3_RC3_types[1041]);
    IFC4X3_RC3_types[273] = new entity("IfcCurve", true, 273, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[274] = new entity("IfcCurveBoundedPlane", false, 274, (entity*) IFC4X3_RC3_types[101]);
    IFC4X3_RC3_types[275] = new entity("IfcCurveBoundedSurface", false, 275, (entity*) IFC4X3_RC3_types[101]);
    IFC4X3_RC3_types[281] = new entity("IfcCurveSegment", false, 281, (entity*) IFC4X3_RC3_types[999]);
    IFC4X3_RC3_types[307] = new entity("IfcDirection", false, 307, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[309] = new entity("IfcDirectrixCurveSweptAreaSolid", true, 309, (entity*) IFC4X3_RC3_types[1147]);
    IFC4X3_RC3_types[311] = new entity("IfcDirectrixDistanceSweptAreaSolid", true, 311, (entity*) IFC4X3_RC3_types[1147]);
    IFC4X3_RC3_types[344] = new entity("IfcDoorStyle", false, 344, (entity*) IFC4X3_RC3_types[1246]);
    IFC4X3_RC3_types[371] = new entity("IfcEdgeLoop", false, 371, (entity*) IFC4X3_RC3_types[623]);
    IFC4X3_RC3_types[407] = new entity("IfcElementQuantity", false, 407, (entity*) IFC4X3_RC3_types[856]);
    IFC4X3_RC3_types[408] = new entity("IfcElementType", true, 408, (entity*) IFC4X3_RC3_types[1246]);
    IFC4X3_RC3_types[400] = new entity("IfcElementarySurface", true, 400, (entity*) IFC4X3_RC3_types[1129]);
    IFC4X3_RC3_types[410] = new entity("IfcEllipseProfileDef", false, 410, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[426] = new entity("IfcEventType", false, 426, (entity*) IFC4X3_RC3_types[1245]);
    IFC4X3_RC3_types[438] = new entity("IfcExtrudedAreaSolid", false, 438, (entity*) IFC4X3_RC3_types[1147]);
    IFC4X3_RC3_types[439] = new entity("IfcExtrudedAreaSolidTapered", false, 439, (entity*) IFC4X3_RC3_types[438]);
    IFC4X3_RC3_types[441] = new entity("IfcFaceBasedSurfaceModel", false, 441, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[463] = new entity("IfcFillAreaStyleHatching", false, 463, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[464] = new entity("IfcFillAreaStyleTiles", false, 464, (entity*) IFC4X3_RC3_types[513]);
    IFC4X3_RC3_types[472] = new entity("IfcFixedReferenceSweptAreaSolid", false, 472, (entity*) IFC4X3_RC3_types[309]);
    IFC4X3_RC3_types[503] = new entity("IfcFurnishingElementType", false, 503, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[505] = new entity("IfcFurnitureType", false, 505, (entity*) IFC4X3_RC3_types[503]);
    IFC4X3_RC3_types[508] = new entity("IfcGeographicElementType", false, 508, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[510] = new entity("IfcGeometricCurveSet", false, 510, (entity*) IFC4X3_RC3_types[515]);
    IFC4X3_RC3_types[569] = new entity("IfcIShapeProfileDef", false, 569, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[548] = new entity("IfcInclinedReferenceSweptAreaSolid", false, 548, (entity*) IFC4X3_RC3_types[311]);
    IFC4X3_RC3_types[551] = new entity("IfcIndexedPolygonalFace", false, 551, (entity*) IFC4X3_RC3_types[1183]);
    IFC4X3_RC3_types[552] = new entity("IfcIndexedPolygonalFaceWithVoids", false, 552, (entity*) IFC4X3_RC3_types[551]);
    IFC4X3_RC3_types[624] = new entity("IfcLShapeProfileDef", false, 624, (entity*) IFC4X3_RC3_types[730]);
    IFC4X3_RC3_types[580] = new entity("IfcLaborResourceType", false, 580, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[607] = new entity("IfcLine", false, 607, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[630] = new entity("IfcManifoldSolidBrep", true, 630, (entity*) IFC4X3_RC3_types[1041]);
    IFC4X3_RC3_types[704] = new entity("IfcObject", true, 704, (entity*) IFC4X3_RC3_types[705]);
    IFC4X3_RC3_types[713] = new entity("IfcOffsetCurve", true, 713, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[714] = new entity("IfcOffsetCurve2D", false, 714, (entity*) IFC4X3_RC3_types[713]);
    IFC4X3_RC3_types[715] = new entity("IfcOffsetCurve3D", false, 715, (entity*) IFC4X3_RC3_types[713]);
    IFC4X3_RC3_types[716] = new entity("IfcOffsetCurveByDistances", false, 716, (entity*) IFC4X3_RC3_types[713]);
    IFC4X3_RC3_types[736] = new entity("IfcPcurve", false, 736, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[762] = new entity("IfcPlanarBox", false, 762, (entity*) IFC4X3_RC3_types[763]);
    IFC4X3_RC3_types[765] = new entity("IfcPlane", false, 765, (entity*) IFC4X3_RC3_types[400]);
    IFC4X3_RC3_types[781] = new entity("IfcPolynomialCurve", false, 781, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[790] = new entity("IfcPreDefinedColour", true, 790, (entity*) IFC4X3_RC3_types[792]);
    IFC4X3_RC3_types[791] = new entity("IfcPreDefinedCurveFont", true, 791, (entity*) IFC4X3_RC3_types[792]);
    IFC4X3_RC3_types[794] = new entity("IfcPreDefinedPropertySet", true, 794, (entity*) IFC4X3_RC3_types[834]);
    IFC4X3_RC3_types[804] = new entity("IfcProcedureType", false, 804, (entity*) IFC4X3_RC3_types[1245]);
    IFC4X3_RC3_types[806] = new entity("IfcProcess", true, 806, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[808] = new entity("IfcProduct", true, 808, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[816] = new entity("IfcProject", false, 816, (entity*) IFC4X3_RC3_types[227]);
    IFC4X3_RC3_types[821] = new entity("IfcProjectLibrary", false, 821, (entity*) IFC4X3_RC3_types[227]);
    IFC4X3_RC3_types[826] = new entity("IfcPropertyBoundedValue", false, 826, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[829] = new entity("IfcPropertyEnumeratedValue", false, 829, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[831] = new entity("IfcPropertyListValue", false, 831, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[832] = new entity("IfcPropertyReferenceValue", false, 832, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[833] = new entity("IfcPropertySet", false, 833, (entity*) IFC4X3_RC3_types[834]);
    IFC4X3_RC3_types[837] = new entity("IfcPropertySetTemplate", false, 837, (entity*) IFC4X3_RC3_types[842]);
    IFC4X3_RC3_types[839] = new entity("IfcPropertySingleValue", false, 839, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[840] = new entity("IfcPropertyTableValue", false, 840, (entity*) IFC4X3_RC3_types[1021]);
    IFC4X3_RC3_types[841] = new entity("IfcPropertyTemplate", true, 841, (entity*) IFC4X3_RC3_types[842]);
    IFC4X3_RC3_types[849] = new entity("IfcProxy", false, 849, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[880] = new entity("IfcRectangleHollowProfileDef", false, 880, (entity*) IFC4X3_RC3_types[881]);
    IFC4X3_RC3_types[882] = new entity("IfcRectangularPyramid", false, 882, (entity*) IFC4X3_RC3_types[264]);
    IFC4X3_RC3_types[883] = new entity("IfcRectangularTrimmedSurface", false, 883, (entity*) IFC4X3_RC3_types[101]);
    IFC4X3_RC3_types[894] = new entity("IfcReinforcementDefinitionProperties", false, 894, (entity*) IFC4X3_RC3_types[794]);
    IFC4X3_RC3_types[906] = new entity("IfcRelAssigns", true, 906, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[907] = new entity("IfcRelAssignsToActor", false, 907, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[908] = new entity("IfcRelAssignsToControl", false, 908, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[909] = new entity("IfcRelAssignsToGroup", false, 909, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[910] = new entity("IfcRelAssignsToGroupByFactor", false, 910, (entity*) IFC4X3_RC3_types[909]);
    IFC4X3_RC3_types[911] = new entity("IfcRelAssignsToProcess", false, 911, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[912] = new entity("IfcRelAssignsToProduct", false, 912, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[913] = new entity("IfcRelAssignsToResource", false, 913, (entity*) IFC4X3_RC3_types[906]);
    IFC4X3_RC3_types[914] = new entity("IfcRelAssociates", true, 914, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[915] = new entity("IfcRelAssociatesApproval", false, 915, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[916] = new entity("IfcRelAssociatesClassification", false, 916, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[917] = new entity("IfcRelAssociatesConstraint", false, 917, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[918] = new entity("IfcRelAssociatesDocument", false, 918, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[919] = new entity("IfcRelAssociatesLibrary", false, 919, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[920] = new entity("IfcRelAssociatesMaterial", false, 920, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[921] = new entity("IfcRelAssociatesProfileDef", false, 921, (entity*) IFC4X3_RC3_types[914]);
    IFC4X3_RC3_types[923] = new entity("IfcRelConnects", true, 923, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[924] = new entity("IfcRelConnectsElements", false, 924, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[925] = new entity("IfcRelConnectsPathElements", false, 925, (entity*) IFC4X3_RC3_types[924]);
    IFC4X3_RC3_types[927] = new entity("IfcRelConnectsPortToElement", false, 927, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[926] = new entity("IfcRelConnectsPorts", false, 926, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[928] = new entity("IfcRelConnectsStructuralActivity", false, 928, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[929] = new entity("IfcRelConnectsStructuralMember", false, 929, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[930] = new entity("IfcRelConnectsWithEccentricity", false, 930, (entity*) IFC4X3_RC3_types[929]);
    IFC4X3_RC3_types[931] = new entity("IfcRelConnectsWithRealizingElements", false, 931, (entity*) IFC4X3_RC3_types[924]);
    IFC4X3_RC3_types[932] = new entity("IfcRelContainedInSpatialStructure", false, 932, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[933] = new entity("IfcRelCoversBldgElements", false, 933, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[934] = new entity("IfcRelCoversSpaces", false, 934, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[935] = new entity("IfcRelDeclares", false, 935, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[936] = new entity("IfcRelDecomposes", true, 936, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[937] = new entity("IfcRelDefines", true, 937, (entity*) IFC4X3_RC3_types[922]);
    IFC4X3_RC3_types[938] = new entity("IfcRelDefinesByObject", false, 938, (entity*) IFC4X3_RC3_types[937]);
    IFC4X3_RC3_types[939] = new entity("IfcRelDefinesByProperties", false, 939, (entity*) IFC4X3_RC3_types[937]);
    IFC4X3_RC3_types[940] = new entity("IfcRelDefinesByTemplate", false, 940, (entity*) IFC4X3_RC3_types[937]);
    IFC4X3_RC3_types[941] = new entity("IfcRelDefinesByType", false, 941, (entity*) IFC4X3_RC3_types[937]);
    IFC4X3_RC3_types[942] = new entity("IfcRelFillsElement", false, 942, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[943] = new entity("IfcRelFlowControlElements", false, 943, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[944] = new entity("IfcRelInterferesElements", false, 944, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[945] = new entity("IfcRelNests", false, 945, (entity*) IFC4X3_RC3_types[936]);
    IFC4X3_RC3_types[946] = new entity("IfcRelPositions", false, 946, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[947] = new entity("IfcRelProjectsElement", false, 947, (entity*) IFC4X3_RC3_types[936]);
    IFC4X3_RC3_types[948] = new entity("IfcRelReferencedInSpatialStructure", false, 948, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[949] = new entity("IfcRelSequence", false, 949, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[950] = new entity("IfcRelServicesBuildings", false, 950, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[951] = new entity("IfcRelSpaceBoundary", false, 951, (entity*) IFC4X3_RC3_types[923]);
    IFC4X3_RC3_types[952] = new entity("IfcRelSpaceBoundary1stLevel", false, 952, (entity*) IFC4X3_RC3_types[951]);
    IFC4X3_RC3_types[953] = new entity("IfcRelSpaceBoundary2ndLevel", false, 953, (entity*) IFC4X3_RC3_types[952]);
    IFC4X3_RC3_types[954] = new entity("IfcRelVoidsElement", false, 954, (entity*) IFC4X3_RC3_types[936]);
    IFC4X3_RC3_types[955] = new entity("IfcReparametrisedCompositeCurveSegment", false, 955, (entity*) IFC4X3_RC3_types[196]);
    IFC4X3_RC3_types[960] = new entity("IfcResource", true, 960, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[967] = new entity("IfcRevolvedAreaSolid", false, 967, (entity*) IFC4X3_RC3_types[1147]);
    IFC4X3_RC3_types[968] = new entity("IfcRevolvedAreaSolidTapered", false, 968, (entity*) IFC4X3_RC3_types[967]);
    IFC4X3_RC3_types[969] = new entity("IfcRightCircularCone", false, 969, (entity*) IFC4X3_RC3_types[264]);
    IFC4X3_RC3_types[970] = new entity("IfcRightCircularCylinder", false, 970, (entity*) IFC4X3_RC3_types[264]);
    IFC4X3_RC3_types[991] = new entity("IfcSectionedSolid", true, 991, (entity*) IFC4X3_RC3_types[1041]);
    IFC4X3_RC3_types[992] = new entity("IfcSectionedSolidHorizontal", false, 992, (entity*) IFC4X3_RC3_types[991]);
    IFC4X3_RC3_types[994] = new entity("IfcSectionedSurface", false, 994, (entity*) IFC4X3_RC3_types[1129]);
    IFC4X3_RC3_types[1022] = new entity("IfcSimplePropertyTemplate", false, 1022, (entity*) IFC4X3_RC3_types[841]);
    IFC4X3_RC3_types[1055] = new entity("IfcSpatialElement", true, 1055, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[1056] = new entity("IfcSpatialElementType", true, 1056, (entity*) IFC4X3_RC3_types[1246]);
    IFC4X3_RC3_types[1058] = new entity("IfcSpatialStructureElement", true, 1058, (entity*) IFC4X3_RC3_types[1055]);
    IFC4X3_RC3_types[1059] = new entity("IfcSpatialStructureElementType", true, 1059, (entity*) IFC4X3_RC3_types[1056]);
    IFC4X3_RC3_types[1060] = new entity("IfcSpatialZone", false, 1060, (entity*) IFC4X3_RC3_types[1055]);
    IFC4X3_RC3_types[1061] = new entity("IfcSpatialZoneType", false, 1061, (entity*) IFC4X3_RC3_types[1056]);
    IFC4X3_RC3_types[1067] = new entity("IfcSphere", false, 1067, (entity*) IFC4X3_RC3_types[264]);
    IFC4X3_RC3_types[1068] = new entity("IfcSphericalSurface", false, 1068, (entity*) IFC4X3_RC3_types[400]);
    IFC4X3_RC3_types[1069] = new entity("IfcSpiral", true, 1069, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[1081] = new entity("IfcStructuralActivity", true, 1081, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[1093] = new entity("IfcStructuralItem", true, 1093, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[1108] = new entity("IfcStructuralMember", true, 1108, (entity*) IFC4X3_RC3_types[1093]);
    IFC4X3_RC3_types[1113] = new entity("IfcStructuralReaction", true, 1113, (entity*) IFC4X3_RC3_types[1081]);
    IFC4X3_RC3_types[1118] = new entity("IfcStructuralSurfaceMember", false, 1118, (entity*) IFC4X3_RC3_types[1108]);
    IFC4X3_RC3_types[1120] = new entity("IfcStructuralSurfaceMemberVarying", false, 1120, (entity*) IFC4X3_RC3_types[1118]);
    IFC4X3_RC3_types[1121] = new entity("IfcStructuralSurfaceReaction", false, 1121, (entity*) IFC4X3_RC3_types[1113]);
    IFC4X3_RC3_types[1126] = new entity("IfcSubContractResourceType", false, 1126, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[1130] = new entity("IfcSurfaceCurve", false, 1130, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[1131] = new entity("IfcSurfaceCurveSweptAreaSolid", false, 1131, (entity*) IFC4X3_RC3_types[309]);
    IFC4X3_RC3_types[1134] = new entity("IfcSurfaceOfLinearExtrusion", false, 1134, (entity*) IFC4X3_RC3_types[1150]);
    IFC4X3_RC3_types[1135] = new entity("IfcSurfaceOfRevolution", false, 1135, (entity*) IFC4X3_RC3_types[1150]);
    IFC4X3_RC3_types[1156] = new entity("IfcSystemFurnitureElementType", false, 1156, (entity*) IFC4X3_RC3_types[503]);
    IFC4X3_RC3_types[1164] = new entity("IfcTask", false, 1164, (entity*) IFC4X3_RC3_types[806]);
    IFC4X3_RC3_types[1168] = new entity("IfcTaskType", false, 1168, (entity*) IFC4X3_RC3_types[1245]);
    IFC4X3_RC3_types[1182] = new entity("IfcTessellatedFaceSet", true, 1182, (entity*) IFC4X3_RC3_types[1183]);
    IFC4X3_RC3_types[1208] = new entity("IfcThirdOrderPolynomialSpiral", false, 1208, (entity*) IFC4X3_RC3_types[1069]);
    IFC4X3_RC3_types[1219] = new entity("IfcToroidalSurface", false, 1219, (entity*) IFC4X3_RC3_types[400]);
    IFC4X3_RC3_types[1232] = new entity("IfcTransportElementType", false, 1232, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[1235] = new entity("IfcTriangulatedFaceSet", false, 1235, (entity*) IFC4X3_RC3_types[1182]);
    IFC4X3_RC3_types[1236] = new entity("IfcTriangulatedIrregularNetwork", false, 1236, (entity*) IFC4X3_RC3_types[1235]);
    IFC4X3_RC3_types[1296] = new entity("IfcWindowLiningProperties", false, 1296, (entity*) IFC4X3_RC3_types[794]);
    IFC4X3_RC3_types[1299] = new entity("IfcWindowPanelProperties", false, 1299, (entity*) IFC4X3_RC3_types[794]);
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[661]);
        items.push_back(IFC4X3_RC3_types[886]);
        items.push_back(IFC4X3_RC3_types[1259]);
        IFC4X3_RC3_types[51] = new select_type("IfcAppliedValueSelect", 51, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[69]);
        items.push_back(IFC4X3_RC3_types[70]);
        IFC4X3_RC3_types[68] = new select_type("IfcAxis2Placement", 68, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(5);
        items.push_back(IFC4X3_RC3_types[92]);
        items.push_back(IFC4X3_RC3_types[264]);
        items.push_back(IFC4X3_RC3_types[531]);
        items.push_back(IFC4X3_RC3_types[1041]);
        items.push_back(IFC4X3_RC3_types[1182]);
        IFC4X3_RC3_types[90] = new select_type("IfcBooleanOperand", 90, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[182]);
        items.push_back(IFC4X3_RC3_types[790]);
        IFC4X3_RC3_types[178] = new select_type("IfcColour", 178, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[180]);
        items.push_back(IFC4X3_RC3_types[702]);
        IFC4X3_RC3_types[179] = new select_type("IfcColourOrFactor", 179, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[92]);
        items.push_back(IFC4X3_RC3_types[264]);
        IFC4X3_RC3_types[265] = new select_type("IfcCsgSelect", 265, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[283]);
        items.push_back(IFC4X3_RC3_types[791]);
        IFC4X3_RC3_types[286] = new select_type("IfcCurveStyleFontSelect", 286, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(4);
        items.push_back(IFC4X3_RC3_types[178]);
        items.push_back(IFC4X3_RC3_types[430]);
        items.push_back(IFC4X3_RC3_types[463]);
        items.push_back(IFC4X3_RC3_types[464]);
        IFC4X3_RC3_types[465] = new select_type("IfcFillStyleSelect", 465, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[273]);
        items.push_back(IFC4X3_RC3_types[772]);
        items.push_back(IFC4X3_RC3_types[1129]);
        IFC4X3_RC3_types[516] = new select_type("IfcGeometricSetSelect", 516, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[307]);
        items.push_back(IFC4X3_RC3_types[1277]);
        IFC4X3_RC3_types[528] = new select_type("IfcGridPlacementDirectionSelect", 528, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(6);
        items.push_back(IFC4X3_RC3_types[50]);
        items.push_back(IFC4X3_RC3_types[661]);
        items.push_back(IFC4X3_RC3_types[886]);
        items.push_back(IFC4X3_RC3_types[1158]);
        items.push_back(IFC4X3_RC3_types[1213]);
        items.push_back(IFC4X3_RC3_types[1259]);
        IFC4X3_RC3_types[673] = new select_type("IfcMetricValueSelect", 673, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[806]);
        items.push_back(IFC4X3_RC3_types[1245]);
        IFC4X3_RC3_types[807] = new select_type("IfcProcessSelect", 807, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[808]);
        items.push_back(IFC4X3_RC3_types[1246]);
        IFC4X3_RC3_types[812] = new select_type("IfcProductSelect", 812, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[834]);
        items.push_back(IFC4X3_RC3_types[836]);
        IFC4X3_RC3_types[835] = new select_type("IfcPropertySetDefinitionSelect", 835, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[960]);
        items.push_back(IFC4X3_RC3_types[1247]);
        IFC4X3_RC3_types[965] = new select_type("IfcResourceSelect", 965, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[173]);
        items.push_back(IFC4X3_RC3_types[721]);
        IFC4X3_RC3_types[1013] = new select_type("IfcShell", 1013, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[173]);
        items.push_back(IFC4X3_RC3_types[1041]);
        IFC4X3_RC3_types[1042] = new select_type("IfcSolidOrShell", 1042, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[441]);
        items.push_back(IFC4X3_RC3_types[444]);
        items.push_back(IFC4X3_RC3_types[1129]);
        IFC4X3_RC3_types[1136] = new select_type("IfcSurfaceOrFaceSurface", 1136, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[147]);
        items.push_back(IFC4X3_RC3_types[731]);
        IFC4X3_RC3_types[1239] = new select_type("IfcTrimmingSelect", 1239, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[307]);
        items.push_back(IFC4X3_RC3_types[1264]);
        IFC4X3_RC3_types[1265] = new select_type("IfcVectorOrDirection", 1265, items);
    }
    IFC4X3_RC3_types[6] = new entity("IfcActor", false, 6, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[14] = new entity("IfcAdvancedBrep", false, 14, (entity*) IFC4X3_RC3_types[630]);
    IFC4X3_RC3_types[15] = new entity("IfcAdvancedBrepWithVoids", false, 15, (entity*) IFC4X3_RC3_types[14]);
    IFC4X3_RC3_types[46] = new entity("IfcAnnotation", false, 46, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[111] = new entity("IfcBSplineSurface", true, 111, (entity*) IFC4X3_RC3_types[101]);
    IFC4X3_RC3_types[113] = new entity("IfcBSplineSurfaceWithKnots", false, 113, (entity*) IFC4X3_RC3_types[111]);
    IFC4X3_RC3_types[84] = new entity("IfcBlock", false, 84, (entity*) IFC4X3_RC3_types[264]);
    IFC4X3_RC3_types[89] = new entity("IfcBooleanClippingResult", false, 89, (entity*) IFC4X3_RC3_types[92]);
    IFC4X3_RC3_types[100] = new entity("IfcBoundedCurve", true, 100, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[121] = new entity("IfcBuildingStorey", false, 121, (entity*) IFC4X3_RC3_types[1058]);
    IFC4X3_RC3_types[125] = new entity("IfcBuiltElementType", false, 125, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[162] = new entity("IfcChimneyType", false, 162, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[165] = new entity("IfcCircleHollowProfileDef", false, 165, (entity*) IFC4X3_RC3_types[166]);
    IFC4X3_RC3_types[168] = new entity("IfcCivilElementType", false, 168, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[174] = new entity("IfcClothoid", false, 174, (entity*) IFC4X3_RC3_types[1069]);
    IFC4X3_RC3_types[185] = new entity("IfcColumnType", false, 185, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[192] = new entity("IfcComplexPropertyTemplate", false, 192, (entity*) IFC4X3_RC3_types[841]);
    IFC4X3_RC3_types[194] = new entity("IfcCompositeCurve", false, 194, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[195] = new entity("IfcCompositeCurveOnSurface", false, 195, (entity*) IFC4X3_RC3_types[194]);
    IFC4X3_RC3_types[205] = new entity("IfcConic", true, 205, (entity*) IFC4X3_RC3_types[273]);
    IFC4X3_RC3_types[217] = new entity("IfcConstructionEquipmentResourceType", false, 217, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[220] = new entity("IfcConstructionMaterialResourceType", false, 220, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[223] = new entity("IfcConstructionProductResourceType", false, 223, (entity*) IFC4X3_RC3_types[226]);
    IFC4X3_RC3_types[225] = new entity("IfcConstructionResource", true, 225, (entity*) IFC4X3_RC3_types[960]);
    IFC4X3_RC3_types[230] = new entity("IfcControl", true, 230, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[248] = new entity("IfcCosine", false, 248, (entity*) IFC4X3_RC3_types[1069]);
    IFC4X3_RC3_types[249] = new entity("IfcCostItem", false, 249, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[251] = new entity("IfcCostSchedule", false, 251, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[256] = new entity("IfcCourseType", false, 256, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[259] = new entity("IfcCoveringType", false, 259, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[261] = new entity("IfcCrewResource", false, 261, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[270] = new entity("IfcCurtainWallType", false, 270, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[287] = new entity("IfcCylindricalSurface", false, 287, (entity*) IFC4X3_RC3_types[400]);
    IFC4X3_RC3_types[297] = new entity("IfcDeepFoundationType", false, 297, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[310] = new entity("IfcDirectrixDerivedReferenceSweptAreaSolid", false, 310, (entity*) IFC4X3_RC3_types[472]);
    IFC4X3_RC3_types[325] = new entity("IfcDistributionElementType", false, 325, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[327] = new entity("IfcDistributionFlowElementType", true, 327, (entity*) IFC4X3_RC3_types[325]);
    IFC4X3_RC3_types[339] = new entity("IfcDoorLiningProperties", false, 339, (entity*) IFC4X3_RC3_types[794]);
    IFC4X3_RC3_types[342] = new entity("IfcDoorPanelProperties", false, 342, (entity*) IFC4X3_RC3_types[794]);
    IFC4X3_RC3_types[347] = new entity("IfcDoorType", false, 347, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[351] = new entity("IfcDraughtingPreDefinedColour", false, 351, (entity*) IFC4X3_RC3_types[790]);
    IFC4X3_RC3_types[352] = new entity("IfcDraughtingPreDefinedCurveFont", false, 352, (entity*) IFC4X3_RC3_types[791]);
    IFC4X3_RC3_types[399] = new entity("IfcElement", true, 399, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[401] = new entity("IfcElementAssembly", false, 401, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[402] = new entity("IfcElementAssemblyType", false, 402, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[404] = new entity("IfcElementComponent", true, 404, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[405] = new entity("IfcElementComponentType", true, 405, (entity*) IFC4X3_RC3_types[408]);
    IFC4X3_RC3_types[409] = new entity("IfcEllipse", false, 409, (entity*) IFC4X3_RC3_types[205]);
    IFC4X3_RC3_types[412] = new entity("IfcEnergyConversionDeviceType", true, 412, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[415] = new entity("IfcEngineType", false, 415, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[418] = new entity("IfcEvaporativeCoolerType", false, 418, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[421] = new entity("IfcEvaporatorType", false, 421, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[423] = new entity("IfcEvent", false, 423, (entity*) IFC4X3_RC3_types[806]);
    IFC4X3_RC3_types[437] = new entity("IfcExternalSpatialStructureElement", true, 437, (entity*) IFC4X3_RC3_types[1055]);
    IFC4X3_RC3_types[445] = new entity("IfcFacetedBrep", false, 445, (entity*) IFC4X3_RC3_types[630]);
    IFC4X3_RC3_types[446] = new entity("IfcFacetedBrepWithVoids", false, 446, (entity*) IFC4X3_RC3_types[445]);
    IFC4X3_RC3_types[447] = new entity("IfcFacility", false, 447, (entity*) IFC4X3_RC3_types[1058]);
    IFC4X3_RC3_types[448] = new entity("IfcFacilityPart", false, 448, (entity*) IFC4X3_RC3_types[1058]);
    IFC4X3_RC3_types[456] = new entity("IfcFastener", false, 456, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[457] = new entity("IfcFastenerType", false, 457, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[459] = new entity("IfcFeatureElement", true, 459, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[460] = new entity("IfcFeatureElementAddition", true, 460, (entity*) IFC4X3_RC3_types[459]);
    IFC4X3_RC3_types[461] = new entity("IfcFeatureElementSubtraction", true, 461, (entity*) IFC4X3_RC3_types[459]);
    IFC4X3_RC3_types[474] = new entity("IfcFlowControllerType", true, 474, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[477] = new entity("IfcFlowFittingType", true, 477, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[482] = new entity("IfcFlowMeterType", false, 482, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[485] = new entity("IfcFlowMovingDeviceType", true, 485, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[487] = new entity("IfcFlowSegmentType", true, 487, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[489] = new entity("IfcFlowStorageDeviceType", true, 489, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[491] = new entity("IfcFlowTerminalType", true, 491, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[493] = new entity("IfcFlowTreatmentDeviceType", true, 493, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[498] = new entity("IfcFootingType", false, 498, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[502] = new entity("IfcFurnishingElement", false, 502, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[504] = new entity("IfcFurniture", false, 504, (entity*) IFC4X3_RC3_types[502]);
    IFC4X3_RC3_types[507] = new entity("IfcGeographicElement", false, 507, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[520] = new entity("IfcGeotechnicalElement", true, 520, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[521] = new entity("IfcGeotechnicalStratum", true, 521, (entity*) IFC4X3_RC3_types[520]);
    IFC4X3_RC3_types[524] = new entity("IfcGradientCurve", false, 524, (entity*) IFC4X3_RC3_types[194]);
    IFC4X3_RC3_types[530] = new entity("IfcGroup", false, 530, (entity*) IFC4X3_RC3_types[704]);
    IFC4X3_RC3_types[534] = new entity("IfcHeatExchangerType", false, 534, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[539] = new entity("IfcHumidifierType", false, 539, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[544] = new entity("IfcImpactProtectionDevice", false, 544, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[545] = new entity("IfcImpactProtectionDeviceType", false, 545, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[550] = new entity("IfcIndexedPolyCurve", false, 550, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[559] = new entity("IfcInterceptorType", false, 559, (entity*) IFC4X3_RC3_types[493]);
    IFC4X3_RC3_types[563] = new entity("IfcIntersectionCurve", false, 563, (entity*) IFC4X3_RC3_types[1130]);
    IFC4X3_RC3_types[564] = new entity("IfcInventory", false, 564, (entity*) IFC4X3_RC3_types[530]);
    IFC4X3_RC3_types[572] = new entity("IfcJunctionBoxType", false, 572, (entity*) IFC4X3_RC3_types[477]);
    IFC4X3_RC3_types[575] = new entity("IfcKerbType", false, 575, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[579] = new entity("IfcLaborResource", false, 579, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[584] = new entity("IfcLampType", false, 584, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[598] = new entity("IfcLightFixtureType", false, 598, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[608] = new entity("IfcLinearElement", true, 608, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[617] = new entity("IfcLiquidTerminalType", false, 617, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[633] = new entity("IfcMarineFacility", false, 633, (entity*) IFC4X3_RC3_types[447]);
    IFC4X3_RC3_types[662] = new entity("IfcMechanicalFastener", false, 662, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[663] = new entity("IfcMechanicalFastenerType", false, 663, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[666] = new entity("IfcMedicalDeviceType", false, 666, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[670] = new entity("IfcMemberType", false, 670, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[676] = new entity("IfcMobileTelecommunicationsApplianceType", false, 676, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[692] = new entity("IfcMooringDeviceType", false, 692, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[695] = new entity("IfcMotorConnectionType", false, 695, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[699] = new entity("IfcNavigationElementType", false, 699, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[711] = new entity("IfcOccupant", false, 711, (entity*) IFC4X3_RC3_types[6]);
    IFC4X3_RC3_types[718] = new entity("IfcOpeningElement", false, 718, (entity*) IFC4X3_RC3_types[461]);
    IFC4X3_RC3_types[720] = new entity("IfcOpeningStandardCase", false, 720, (entity*) IFC4X3_RC3_types[718]);
    IFC4X3_RC3_types[727] = new entity("IfcOutletType", false, 727, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[734] = new entity("IfcPavementType", false, 734, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[737] = new entity("IfcPerformanceHistory", false, 737, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[740] = new entity("IfcPermeableCoveringProperties", false, 740, (entity*) IFC4X3_RC3_types[794]);
    IFC4X3_RC3_types[741] = new entity("IfcPermit", false, 741, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[752] = new entity("IfcPileType", false, 752, (entity*) IFC4X3_RC3_types[297]);
    IFC4X3_RC3_types[755] = new entity("IfcPipeFittingType", false, 755, (entity*) IFC4X3_RC3_types[477]);
    IFC4X3_RC3_types[758] = new entity("IfcPipeSegmentType", false, 758, (entity*) IFC4X3_RC3_types[487]);
    IFC4X3_RC3_types[767] = new entity("IfcPlant", false, 767, (entity*) IFC4X3_RC3_types[507]);
    IFC4X3_RC3_types[770] = new entity("IfcPlateType", false, 770, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[778] = new entity("IfcPolygonalFaceSet", false, 778, (entity*) IFC4X3_RC3_types[1182]);
    IFC4X3_RC3_types[779] = new entity("IfcPolyline", false, 779, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[782] = new entity("IfcPort", true, 782, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[783] = new entity("IfcPositioningElement", true, 783, (entity*) IFC4X3_RC3_types[808]);
    IFC4X3_RC3_types[803] = new entity("IfcProcedure", false, 803, (entity*) IFC4X3_RC3_types[806]);
    IFC4X3_RC3_types[822] = new entity("IfcProjectOrder", false, 822, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[819] = new entity("IfcProjectionElement", false, 819, (entity*) IFC4X3_RC3_types[460]);
    IFC4X3_RC3_types[847] = new entity("IfcProtectiveDeviceType", false, 847, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[851] = new entity("IfcPumpType", false, 851, (entity*) IFC4X3_RC3_types[485]);
    IFC4X3_RC3_types[865] = new entity("IfcRailType", false, 865, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[863] = new entity("IfcRailingType", false, 863, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[867] = new entity("IfcRailway", false, 867, (entity*) IFC4X3_RC3_types[447]);
    IFC4X3_RC3_types[872] = new entity("IfcRampFlightType", false, 872, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[874] = new entity("IfcRampType", false, 874, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[878] = new entity("IfcRationalBSplineSurfaceWithKnots", false, 878, (entity*) IFC4X3_RC3_types[113]);
    IFC4X3_RC3_types[887] = new entity("IfcReferent", false, 887, (entity*) IFC4X3_RC3_types[783]);
    IFC4X3_RC3_types[900] = new entity("IfcReinforcingElement", true, 900, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[901] = new entity("IfcReinforcingElementType", true, 901, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[902] = new entity("IfcReinforcingMesh", false, 902, (entity*) IFC4X3_RC3_types[900]);
    IFC4X3_RC3_types[903] = new entity("IfcReinforcingMeshType", false, 903, (entity*) IFC4X3_RC3_types[901]);
    IFC4X3_RC3_types[905] = new entity("IfcRelAggregates", false, 905, (entity*) IFC4X3_RC3_types[936]);
    IFC4X3_RC3_types[971] = new entity("IfcRoad", false, 971, (entity*) IFC4X3_RC3_types[447]);
    IFC4X3_RC3_types[976] = new entity("IfcRoofType", false, 976, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[985] = new entity("IfcSanitaryTerminalType", false, 985, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[988] = new entity("IfcSeamCurve", false, 988, (entity*) IFC4X3_RC3_types[1130]);
    IFC4X3_RC3_types[989] = new entity("IfcSecondOrderPolynomialSpiral", false, 989, (entity*) IFC4X3_RC3_types[1069]);
    IFC4X3_RC3_types[1000] = new entity("IfcSegmentedReferenceCurve", false, 1000, (entity*) IFC4X3_RC3_types[194]);
    IFC4X3_RC3_types[1007] = new entity("IfcShadingDeviceType", false, 1007, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1015] = new entity("IfcSign", false, 1015, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[1019] = new entity("IfcSignType", false, 1019, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[1017] = new entity("IfcSignalType", false, 1017, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[1025] = new entity("IfcSine", false, 1025, (entity*) IFC4X3_RC3_types[1069]);
    IFC4X3_RC3_types[1027] = new entity("IfcSite", false, 1027, (entity*) IFC4X3_RC3_types[1058]);
    IFC4X3_RC3_types[1034] = new entity("IfcSlabType", false, 1034, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1038] = new entity("IfcSolarDeviceType", false, 1038, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[1043] = new entity("IfcSolidStratum", false, 1043, (entity*) IFC4X3_RC3_types[521]);
    IFC4X3_RC3_types[1048] = new entity("IfcSpace", false, 1048, (entity*) IFC4X3_RC3_types[1058]);
    IFC4X3_RC3_types[1051] = new entity("IfcSpaceHeaterType", false, 1051, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[1053] = new entity("IfcSpaceType", false, 1053, (entity*) IFC4X3_RC3_types[1059]);
    IFC4X3_RC3_types[1071] = new entity("IfcStackTerminalType", false, 1071, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[1075] = new entity("IfcStairFlightType", false, 1075, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1077] = new entity("IfcStairType", false, 1077, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1080] = new entity("IfcStructuralAction", true, 1080, (entity*) IFC4X3_RC3_types[1081]);
    IFC4X3_RC3_types[1084] = new entity("IfcStructuralConnection", true, 1084, (entity*) IFC4X3_RC3_types[1093]);
    IFC4X3_RC3_types[1086] = new entity("IfcStructuralCurveAction", false, 1086, (entity*) IFC4X3_RC3_types[1080]);
    IFC4X3_RC3_types[1088] = new entity("IfcStructuralCurveConnection", false, 1088, (entity*) IFC4X3_RC3_types[1084]);
    IFC4X3_RC3_types[1089] = new entity("IfcStructuralCurveMember", false, 1089, (entity*) IFC4X3_RC3_types[1108]);
    IFC4X3_RC3_types[1091] = new entity("IfcStructuralCurveMemberVarying", false, 1091, (entity*) IFC4X3_RC3_types[1089]);
    IFC4X3_RC3_types[1092] = new entity("IfcStructuralCurveReaction", false, 1092, (entity*) IFC4X3_RC3_types[1113]);
    IFC4X3_RC3_types[1094] = new entity("IfcStructuralLinearAction", false, 1094, (entity*) IFC4X3_RC3_types[1086]);
    IFC4X3_RC3_types[1098] = new entity("IfcStructuralLoadGroup", false, 1098, (entity*) IFC4X3_RC3_types[530]);
    IFC4X3_RC3_types[1110] = new entity("IfcStructuralPointAction", false, 1110, (entity*) IFC4X3_RC3_types[1080]);
    IFC4X3_RC3_types[1111] = new entity("IfcStructuralPointConnection", false, 1111, (entity*) IFC4X3_RC3_types[1084]);
    IFC4X3_RC3_types[1112] = new entity("IfcStructuralPointReaction", false, 1112, (entity*) IFC4X3_RC3_types[1113]);
    IFC4X3_RC3_types[1114] = new entity("IfcStructuralResultGroup", false, 1114, (entity*) IFC4X3_RC3_types[530]);
    IFC4X3_RC3_types[1115] = new entity("IfcStructuralSurfaceAction", false, 1115, (entity*) IFC4X3_RC3_types[1080]);
    IFC4X3_RC3_types[1117] = new entity("IfcStructuralSurfaceConnection", false, 1117, (entity*) IFC4X3_RC3_types[1084]);
    IFC4X3_RC3_types[1125] = new entity("IfcSubContractResource", false, 1125, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[1132] = new entity("IfcSurfaceFeature", false, 1132, (entity*) IFC4X3_RC3_types[459]);
    IFC4X3_RC3_types[1152] = new entity("IfcSwitchingDeviceType", false, 1152, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[1154] = new entity("IfcSystem", false, 1154, (entity*) IFC4X3_RC3_types[530]);
    IFC4X3_RC3_types[1155] = new entity("IfcSystemFurnitureElement", false, 1155, (entity*) IFC4X3_RC3_types[502]);
    IFC4X3_RC3_types[1162] = new entity("IfcTankType", false, 1162, (entity*) IFC4X3_RC3_types[489]);
    IFC4X3_RC3_types[1173] = new entity("IfcTendon", false, 1173, (entity*) IFC4X3_RC3_types[900]);
    IFC4X3_RC3_types[1174] = new entity("IfcTendonAnchor", false, 1174, (entity*) IFC4X3_RC3_types[900]);
    IFC4X3_RC3_types[1175] = new entity("IfcTendonAnchorType", false, 1175, (entity*) IFC4X3_RC3_types[901]);
    IFC4X3_RC3_types[1177] = new entity("IfcTendonConduit", false, 1177, (entity*) IFC4X3_RC3_types[900]);
    IFC4X3_RC3_types[1178] = new entity("IfcTendonConduitType", false, 1178, (entity*) IFC4X3_RC3_types[901]);
    IFC4X3_RC3_types[1180] = new entity("IfcTendonType", false, 1180, (entity*) IFC4X3_RC3_types[901]);
    IFC4X3_RC3_types[1222] = new entity("IfcTrackElementType", false, 1222, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1225] = new entity("IfcTransformerType", false, 1225, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[1229] = new entity("IfcTransportElement", false, 1229, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[1237] = new entity("IfcTrimmedCurve", false, 1237, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[1242] = new entity("IfcTubeBundleType", false, 1242, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[1253] = new entity("IfcUnitaryEquipmentType", false, 1253, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[1261] = new entity("IfcValveType", false, 1261, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[1269] = new entity("IfcVibrationDamper", false, 1269, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[1270] = new entity("IfcVibrationDamperType", false, 1270, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[1272] = new entity("IfcVibrationIsolator", false, 1272, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[1273] = new entity("IfcVibrationIsolatorType", false, 1273, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[1275] = new entity("IfcVienneseBend", false, 1275, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[1276] = new entity("IfcVirtualElement", false, 1276, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[1280] = new entity("IfcVoidStratum", false, 1280, (entity*) IFC4X3_RC3_types[521]);
    IFC4X3_RC3_types[1278] = new entity("IfcVoidingFeature", false, 1278, (entity*) IFC4X3_RC3_types[461]);
    IFC4X3_RC3_types[1286] = new entity("IfcWallType", false, 1286, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1292] = new entity("IfcWasteTerminalType", false, 1292, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[1294] = new entity("IfcWaterStratum", false, 1294, (entity*) IFC4X3_RC3_types[521]);
    IFC4X3_RC3_types[1304] = new entity("IfcWindowType", false, 1304, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[1307] = new entity("IfcWorkCalendar", false, 1307, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[1309] = new entity("IfcWorkControl", true, 1309, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[1310] = new entity("IfcWorkPlan", false, 1310, (entity*) IFC4X3_RC3_types[1309]);
    IFC4X3_RC3_types[1312] = new entity("IfcWorkSchedule", false, 1312, (entity*) IFC4X3_RC3_types[1309]);
    IFC4X3_RC3_types[1315] = new entity("IfcZone", false, 1315, (entity*) IFC4X3_RC3_types[1154]);
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[284]);
        items.push_back(IFC4X3_RC3_types[286]);
        IFC4X3_RC3_types[276] = new select_type("IfcCurveFontOrScaledCurveFontSelect", 276, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(3);
        items.push_back(IFC4X3_RC3_types[195]);
        items.push_back(IFC4X3_RC3_types[736]);
        items.push_back(IFC4X3_RC3_types[1130]);
        IFC4X3_RC3_types[279] = new select_type("IfcCurveOnSurface", 279, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[100]);
        items.push_back(IFC4X3_RC3_types[370]);
        IFC4X3_RC3_types[280] = new select_type("IfcCurveOrEdgeCurve", 280, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[399]);
        items.push_back(IFC4X3_RC3_types[1055]);
        IFC4X3_RC3_types[561] = new select_type("IfcInterferenceSelect", 561, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[530]);
        items.push_back(IFC4X3_RC3_types[808]);
        IFC4X3_RC3_types[1057] = new select_type("IfcSpatialReferenceSelect", 1057, items);
    }
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[399]);
        items.push_back(IFC4X3_RC3_types[1093]);
        IFC4X3_RC3_types[1082] = new select_type("IfcStructuralActivityAssignmentSelect", 1082, items);
    }
    IFC4X3_RC3_types[2] = new entity("IfcActionRequest", false, 2, (entity*) IFC4X3_RC3_types[230]);
    IFC4X3_RC3_types[19] = new entity("IfcAirTerminalBoxType", false, 19, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[21] = new entity("IfcAirTerminalType", false, 21, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[24] = new entity("IfcAirToAirHeatRecoveryType", false, 24, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[30] = new entity("IfcAlignmentCant", false, 30, (entity*) IFC4X3_RC3_types[608]);
    IFC4X3_RC3_types[33] = new entity("IfcAlignmentHorizontal", false, 33, (entity*) IFC4X3_RC3_types[608]);
    IFC4X3_RC3_types[37] = new entity("IfcAlignmentSegment", false, 37, (entity*) IFC4X3_RC3_types[608]);
    IFC4X3_RC3_types[39] = new entity("IfcAlignmentVertical", false, 39, (entity*) IFC4X3_RC3_types[608]);
    IFC4X3_RC3_types[62] = new entity("IfcAsset", false, 62, (entity*) IFC4X3_RC3_types[530]);
    IFC4X3_RC3_types[65] = new entity("IfcAudioVisualApplianceType", false, 65, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[108] = new entity("IfcBSplineCurve", true, 108, (entity*) IFC4X3_RC3_types[100]);
    IFC4X3_RC3_types[110] = new entity("IfcBSplineCurveWithKnots", false, 110, (entity*) IFC4X3_RC3_types[108]);
    IFC4X3_RC3_types[74] = new entity("IfcBeamType", false, 74, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[77] = new entity("IfcBearingType", false, 77, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[86] = new entity("IfcBoilerType", false, 86, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[95] = new entity("IfcBoundaryCurve", false, 95, (entity*) IFC4X3_RC3_types[195]);
    IFC4X3_RC3_types[105] = new entity("IfcBridge", false, 105, (entity*) IFC4X3_RC3_types[447]);
    IFC4X3_RC3_types[114] = new entity("IfcBuilding", false, 114, (entity*) IFC4X3_RC3_types[447]);
    IFC4X3_RC3_types[115] = new entity("IfcBuildingElementPart", false, 115, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[116] = new entity("IfcBuildingElementPartType", false, 116, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[119] = new entity("IfcBuildingElementProxyType", false, 119, (entity*) IFC4X3_RC3_types[125]);
    IFC4X3_RC3_types[122] = new entity("IfcBuildingSystem", false, 122, (entity*) IFC4X3_RC3_types[1154]);
    IFC4X3_RC3_types[124] = new entity("IfcBuiltElement", false, 124, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[126] = new entity("IfcBuiltSystem", false, 126, (entity*) IFC4X3_RC3_types[1154]);
    IFC4X3_RC3_types[129] = new entity("IfcBurnerType", false, 129, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[132] = new entity("IfcCableCarrierFittingType", false, 132, (entity*) IFC4X3_RC3_types[477]);
    IFC4X3_RC3_types[135] = new entity("IfcCableCarrierSegmentType", false, 135, (entity*) IFC4X3_RC3_types[487]);
    IFC4X3_RC3_types[138] = new entity("IfcCableFittingType", false, 138, (entity*) IFC4X3_RC3_types[477]);
    IFC4X3_RC3_types[141] = new entity("IfcCableSegmentType", false, 141, (entity*) IFC4X3_RC3_types[487]);
    IFC4X3_RC3_types[144] = new entity("IfcCaissonFoundationType", false, 144, (entity*) IFC4X3_RC3_types[297]);
    IFC4X3_RC3_types[159] = new entity("IfcChillerType", false, 159, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[161] = new entity("IfcChimney", false, 161, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[164] = new entity("IfcCircle", false, 164, (entity*) IFC4X3_RC3_types[205]);
    IFC4X3_RC3_types[167] = new entity("IfcCivilElement", false, 167, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[176] = new entity("IfcCoilType", false, 176, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[183] = new entity("IfcColumn", false, 183, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[184] = new entity("IfcColumnStandardCase", false, 184, (entity*) IFC4X3_RC3_types[183]);
    IFC4X3_RC3_types[188] = new entity("IfcCommunicationsApplianceType", false, 188, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[200] = new entity("IfcCompressorType", false, 200, (entity*) IFC4X3_RC3_types[485]);
    IFC4X3_RC3_types[203] = new entity("IfcCondenserType", false, 203, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[216] = new entity("IfcConstructionEquipmentResource", false, 216, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[219] = new entity("IfcConstructionMaterialResource", false, 219, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[222] = new entity("IfcConstructionProductResource", false, 222, (entity*) IFC4X3_RC3_types[225]);
    IFC4X3_RC3_types[237] = new entity("IfcConveyorSegmentType", false, 237, (entity*) IFC4X3_RC3_types[487]);
    IFC4X3_RC3_types[240] = new entity("IfcCooledBeamType", false, 240, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[243] = new entity("IfcCoolingTowerType", false, 243, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[255] = new entity("IfcCourse", false, 255, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[258] = new entity("IfcCovering", false, 258, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[269] = new entity("IfcCurtainWall", false, 269, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[289] = new entity("IfcDamperType", false, 289, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[296] = new entity("IfcDeepFoundation", false, 296, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[312] = new entity("IfcDiscreteAccessory", false, 312, (entity*) IFC4X3_RC3_types[404]);
    IFC4X3_RC3_types[313] = new entity("IfcDiscreteAccessoryType", false, 313, (entity*) IFC4X3_RC3_types[405]);
    IFC4X3_RC3_types[316] = new entity("IfcDistributionBoardType", false, 316, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[319] = new entity("IfcDistributionChamberElementType", false, 319, (entity*) IFC4X3_RC3_types[327]);
    IFC4X3_RC3_types[323] = new entity("IfcDistributionControlElementType", true, 323, (entity*) IFC4X3_RC3_types[325]);
    IFC4X3_RC3_types[324] = new entity("IfcDistributionElement", false, 324, (entity*) IFC4X3_RC3_types[399]);
    IFC4X3_RC3_types[326] = new entity("IfcDistributionFlowElement", false, 326, (entity*) IFC4X3_RC3_types[324]);
    IFC4X3_RC3_types[328] = new entity("IfcDistributionPort", false, 328, (entity*) IFC4X3_RC3_types[782]);
    IFC4X3_RC3_types[330] = new entity("IfcDistributionSystem", false, 330, (entity*) IFC4X3_RC3_types[1154]);
    IFC4X3_RC3_types[338] = new entity("IfcDoor", false, 338, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[343] = new entity("IfcDoorStandardCase", false, 343, (entity*) IFC4X3_RC3_types[338]);
    IFC4X3_RC3_types[354] = new entity("IfcDuctFittingType", false, 354, (entity*) IFC4X3_RC3_types[477]);
    IFC4X3_RC3_types[357] = new entity("IfcDuctSegmentType", false, 357, (entity*) IFC4X3_RC3_types[487]);
    IFC4X3_RC3_types[360] = new entity("IfcDuctSilencerType", false, 360, (entity*) IFC4X3_RC3_types[493]);
    IFC4X3_RC3_types[364] = new entity("IfcEarthworksCut", false, 364, (entity*) IFC4X3_RC3_types[461]);
    IFC4X3_RC3_types[366] = new entity("IfcEarthworksElement", false, 366, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[367] = new entity("IfcEarthworksFill", false, 367, (entity*) IFC4X3_RC3_types[366]);
    IFC4X3_RC3_types[373] = new entity("IfcElectricApplianceType", false, 373, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[380] = new entity("IfcElectricDistributionBoardType", false, 380, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[383] = new entity("IfcElectricFlowStorageDeviceType", false, 383, (entity*) IFC4X3_RC3_types[489]);
    IFC4X3_RC3_types[386] = new entity("IfcElectricFlowTreatmentDeviceType", false, 386, (entity*) IFC4X3_RC3_types[493]);
    IFC4X3_RC3_types[389] = new entity("IfcElectricGeneratorType", false, 389, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[392] = new entity("IfcElectricMotorType", false, 392, (entity*) IFC4X3_RC3_types[412]);
    IFC4X3_RC3_types[396] = new entity("IfcElectricTimeControlType", false, 396, (entity*) IFC4X3_RC3_types[474]);
    IFC4X3_RC3_types[411] = new entity("IfcEnergyConversionDevice", false, 411, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[414] = new entity("IfcEngine", false, 414, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[417] = new entity("IfcEvaporativeCooler", false, 417, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[420] = new entity("IfcEvaporator", false, 420, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[435] = new entity("IfcExternalSpatialElement", false, 435, (entity*) IFC4X3_RC3_types[437]);
    IFC4X3_RC3_types[454] = new entity("IfcFanType", false, 454, (entity*) IFC4X3_RC3_types[485]);
    IFC4X3_RC3_types[467] = new entity("IfcFilterType", false, 467, (entity*) IFC4X3_RC3_types[493]);
    IFC4X3_RC3_types[470] = new entity("IfcFireSuppressionTerminalType", false, 470, (entity*) IFC4X3_RC3_types[491]);
    IFC4X3_RC3_types[473] = new entity("IfcFlowController", false, 473, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[476] = new entity("IfcFlowFitting", false, 476, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[479] = new entity("IfcFlowInstrumentType", false, 479, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[481] = new entity("IfcFlowMeter", false, 481, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[484] = new entity("IfcFlowMovingDevice", false, 484, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[486] = new entity("IfcFlowSegment", false, 486, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[488] = new entity("IfcFlowStorageDevice", false, 488, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[490] = new entity("IfcFlowTerminal", false, 490, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[492] = new entity("IfcFlowTreatmentDevice", false, 492, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[497] = new entity("IfcFooting", false, 497, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[519] = new entity("IfcGeotechnicalAssembly", true, 519, (entity*) IFC4X3_RC3_types[520]);
    IFC4X3_RC3_types[525] = new entity("IfcGrid", false, 525, (entity*) IFC4X3_RC3_types[783]);
    IFC4X3_RC3_types[533] = new entity("IfcHeatExchanger", false, 533, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[538] = new entity("IfcHumidifier", false, 538, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[558] = new entity("IfcInterceptor", false, 558, (entity*) IFC4X3_RC3_types[492]);
    IFC4X3_RC3_types[571] = new entity("IfcJunctionBox", false, 571, (entity*) IFC4X3_RC3_types[476]);
    IFC4X3_RC3_types[574] = new entity("IfcKerb", false, 574, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[583] = new entity("IfcLamp", false, 583, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[597] = new entity("IfcLightFixture", false, 597, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[612] = new entity("IfcLinearPositioningElement", false, 612, (entity*) IFC4X3_RC3_types[783]);
    IFC4X3_RC3_types[616] = new entity("IfcLiquidTerminal", false, 616, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[665] = new entity("IfcMedicalDevice", false, 665, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[668] = new entity("IfcMember", false, 668, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[669] = new entity("IfcMemberStandardCase", false, 669, (entity*) IFC4X3_RC3_types[668]);
    IFC4X3_RC3_types[675] = new entity("IfcMobileTelecommunicationsAppliance", false, 675, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[691] = new entity("IfcMooringDevice", false, 691, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[694] = new entity("IfcMotorConnection", false, 694, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[698] = new entity("IfcNavigationElement", false, 698, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[725] = new entity("IfcOuterBoundaryCurve", false, 725, (entity*) IFC4X3_RC3_types[95]);
    IFC4X3_RC3_types[726] = new entity("IfcOutlet", false, 726, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[733] = new entity("IfcPavement", false, 733, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[750] = new entity("IfcPile", false, 750, (entity*) IFC4X3_RC3_types[296]);
    IFC4X3_RC3_types[754] = new entity("IfcPipeFitting", false, 754, (entity*) IFC4X3_RC3_types[476]);
    IFC4X3_RC3_types[757] = new entity("IfcPipeSegment", false, 757, (entity*) IFC4X3_RC3_types[486]);
    IFC4X3_RC3_types[768] = new entity("IfcPlate", false, 768, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[769] = new entity("IfcPlateStandardCase", false, 769, (entity*) IFC4X3_RC3_types[768]);
    IFC4X3_RC3_types[843] = new entity("IfcProtectiveDevice", false, 843, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[845] = new entity("IfcProtectiveDeviceTrippingUnitType", false, 845, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[850] = new entity("IfcPump", false, 850, (entity*) IFC4X3_RC3_types[484]);
    IFC4X3_RC3_types[861] = new entity("IfcRail", false, 861, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[862] = new entity("IfcRailing", false, 862, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[870] = new entity("IfcRamp", false, 870, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[871] = new entity("IfcRampFlight", false, 871, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[877] = new entity("IfcRationalBSplineCurveWithKnots", false, 877, (entity*) IFC4X3_RC3_types[110]);
    IFC4X3_RC3_types[891] = new entity("IfcReinforcedSoil", false, 891, (entity*) IFC4X3_RC3_types[366]);
    IFC4X3_RC3_types[895] = new entity("IfcReinforcingBar", false, 895, (entity*) IFC4X3_RC3_types[900]);
    IFC4X3_RC3_types[898] = new entity("IfcReinforcingBarType", false, 898, (entity*) IFC4X3_RC3_types[901]);
    IFC4X3_RC3_types[975] = new entity("IfcRoof", false, 975, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[984] = new entity("IfcSanitaryTerminal", false, 984, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[1003] = new entity("IfcSensorType", false, 1003, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[1006] = new entity("IfcShadingDevice", false, 1006, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1016] = new entity("IfcSignal", false, 1016, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[1031] = new entity("IfcSlab", false, 1031, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1032] = new entity("IfcSlabElementedCase", false, 1032, (entity*) IFC4X3_RC3_types[1031]);
    IFC4X3_RC3_types[1033] = new entity("IfcSlabStandardCase", false, 1033, (entity*) IFC4X3_RC3_types[1031]);
    IFC4X3_RC3_types[1037] = new entity("IfcSolarDevice", false, 1037, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[1050] = new entity("IfcSpaceHeater", false, 1050, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[1070] = new entity("IfcStackTerminal", false, 1070, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[1073] = new entity("IfcStair", false, 1073, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1074] = new entity("IfcStairFlight", false, 1074, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1083] = new entity("IfcStructuralAnalysisModel", false, 1083, (entity*) IFC4X3_RC3_types[1154]);
    IFC4X3_RC3_types[1096] = new entity("IfcStructuralLoadCase", false, 1096, (entity*) IFC4X3_RC3_types[1098]);
    IFC4X3_RC3_types[1109] = new entity("IfcStructuralPlanarAction", false, 1109, (entity*) IFC4X3_RC3_types[1115]);
    IFC4X3_RC3_types[1151] = new entity("IfcSwitchingDevice", false, 1151, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[1161] = new entity("IfcTank", false, 1161, (entity*) IFC4X3_RC3_types[488]);
    IFC4X3_RC3_types[1221] = new entity("IfcTrackElement", false, 1221, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1224] = new entity("IfcTransformer", false, 1224, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[1241] = new entity("IfcTubeBundle", false, 1241, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[1250] = new entity("IfcUnitaryControlElementType", false, 1250, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[1252] = new entity("IfcUnitaryEquipment", false, 1252, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[1260] = new entity("IfcValve", false, 1260, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[1283] = new entity("IfcWall", false, 1283, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1284] = new entity("IfcWallElementedCase", false, 1284, (entity*) IFC4X3_RC3_types[1283]);
    IFC4X3_RC3_types[1285] = new entity("IfcWallStandardCase", false, 1285, (entity*) IFC4X3_RC3_types[1283]);
    IFC4X3_RC3_types[1291] = new entity("IfcWasteTerminal", false, 1291, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[1295] = new entity("IfcWindow", false, 1295, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[1300] = new entity("IfcWindowStandardCase", false, 1300, (entity*) IFC4X3_RC3_types[1295]);
    {
        std::vector<const declaration*> items; items.reserve(2);
        items.push_back(IFC4X3_RC3_types[435]);
        items.push_back(IFC4X3_RC3_types[1048]);
        IFC4X3_RC3_types[1049] = new select_type("IfcSpaceBoundarySelect", 1049, items);
    }
    IFC4X3_RC3_types[10] = new entity("IfcActuatorType", false, 10, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[17] = new entity("IfcAirTerminal", false, 17, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[18] = new entity("IfcAirTerminalBox", false, 18, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[23] = new entity("IfcAirToAirHeatRecovery", false, 23, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[27] = new entity("IfcAlarmType", false, 27, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[29] = new entity("IfcAlignment", false, 29, (entity*) IFC4X3_RC3_types[612]);
    IFC4X3_RC3_types[64] = new entity("IfcAudioVisualAppliance", false, 64, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[72] = new entity("IfcBeam", false, 72, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[73] = new entity("IfcBeamStandardCase", false, 73, (entity*) IFC4X3_RC3_types[72]);
    IFC4X3_RC3_types[76] = new entity("IfcBearing", false, 76, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[85] = new entity("IfcBoiler", false, 85, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[93] = new entity("IfcBorehole", false, 93, (entity*) IFC4X3_RC3_types[519]);
    IFC4X3_RC3_types[118] = new entity("IfcBuildingElementProxy", false, 118, (entity*) IFC4X3_RC3_types[124]);
    IFC4X3_RC3_types[128] = new entity("IfcBurner", false, 128, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[131] = new entity("IfcCableCarrierFitting", false, 131, (entity*) IFC4X3_RC3_types[476]);
    IFC4X3_RC3_types[134] = new entity("IfcCableCarrierSegment", false, 134, (entity*) IFC4X3_RC3_types[486]);
    IFC4X3_RC3_types[137] = new entity("IfcCableFitting", false, 137, (entity*) IFC4X3_RC3_types[476]);
    IFC4X3_RC3_types[140] = new entity("IfcCableSegment", false, 140, (entity*) IFC4X3_RC3_types[486]);
    IFC4X3_RC3_types[143] = new entity("IfcCaissonFoundation", false, 143, (entity*) IFC4X3_RC3_types[296]);
    IFC4X3_RC3_types[158] = new entity("IfcChiller", false, 158, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[175] = new entity("IfcCoil", false, 175, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[187] = new entity("IfcCommunicationsAppliance", false, 187, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[199] = new entity("IfcCompressor", false, 199, (entity*) IFC4X3_RC3_types[484]);
    IFC4X3_RC3_types[202] = new entity("IfcCondenser", false, 202, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[232] = new entity("IfcControllerType", false, 232, (entity*) IFC4X3_RC3_types[323]);
    IFC4X3_RC3_types[236] = new entity("IfcConveyorSegment", false, 236, (entity*) IFC4X3_RC3_types[486]);
    IFC4X3_RC3_types[239] = new entity("IfcCooledBeam", false, 239, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[242] = new entity("IfcCoolingTower", false, 242, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[288] = new entity("IfcDamper", false, 288, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[315] = new entity("IfcDistributionBoard", false, 315, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[318] = new entity("IfcDistributionChamberElement", false, 318, (entity*) IFC4X3_RC3_types[326]);
    IFC4X3_RC3_types[321] = new entity("IfcDistributionCircuit", false, 321, (entity*) IFC4X3_RC3_types[330]);
    IFC4X3_RC3_types[322] = new entity("IfcDistributionControlElement", false, 322, (entity*) IFC4X3_RC3_types[324]);
    IFC4X3_RC3_types[353] = new entity("IfcDuctFitting", false, 353, (entity*) IFC4X3_RC3_types[476]);
    IFC4X3_RC3_types[356] = new entity("IfcDuctSegment", false, 356, (entity*) IFC4X3_RC3_types[486]);
    IFC4X3_RC3_types[359] = new entity("IfcDuctSilencer", false, 359, (entity*) IFC4X3_RC3_types[492]);
    IFC4X3_RC3_types[372] = new entity("IfcElectricAppliance", false, 372, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[379] = new entity("IfcElectricDistributionBoard", false, 379, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[382] = new entity("IfcElectricFlowStorageDevice", false, 382, (entity*) IFC4X3_RC3_types[488]);
    IFC4X3_RC3_types[385] = new entity("IfcElectricFlowTreatmentDevice", false, 385, (entity*) IFC4X3_RC3_types[492]);
    IFC4X3_RC3_types[388] = new entity("IfcElectricGenerator", false, 388, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[391] = new entity("IfcElectricMotor", false, 391, (entity*) IFC4X3_RC3_types[411]);
    IFC4X3_RC3_types[395] = new entity("IfcElectricTimeControl", false, 395, (entity*) IFC4X3_RC3_types[473]);
    IFC4X3_RC3_types[453] = new entity("IfcFan", false, 453, (entity*) IFC4X3_RC3_types[484]);
    IFC4X3_RC3_types[466] = new entity("IfcFilter", false, 466, (entity*) IFC4X3_RC3_types[492]);
    IFC4X3_RC3_types[469] = new entity("IfcFireSuppressionTerminal", false, 469, (entity*) IFC4X3_RC3_types[490]);
    IFC4X3_RC3_types[478] = new entity("IfcFlowInstrument", false, 478, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[517] = new entity("IfcGeomodel", false, 517, (entity*) IFC4X3_RC3_types[519]);
    IFC4X3_RC3_types[518] = new entity("IfcGeoslice", false, 518, (entity*) IFC4X3_RC3_types[519]);
    IFC4X3_RC3_types[844] = new entity("IfcProtectiveDeviceTrippingUnit", false, 844, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[1002] = new entity("IfcSensor", false, 1002, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[1249] = new entity("IfcUnitaryControlElement", false, 1249, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[9] = new entity("IfcActuator", false, 9, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[26] = new entity("IfcAlarm", false, 26, (entity*) IFC4X3_RC3_types[322]);
    IFC4X3_RC3_types[231] = new entity("IfcController", false, 231, (entity*) IFC4X3_RC3_types[322]);
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[3]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[2])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("TheActor", new named_type(IFC4X3_RC3_types[8]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[6])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Role", new named_type(IFC4X3_RC3_types[974]), false));
        attributes.push_back(new attribute("UserDefinedRole", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[7])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[11]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[9])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[11]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[10])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Purpose", new named_type(IFC4X3_RC3_types[13]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("UserDefinedPurpose", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[12])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[14])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Voids", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[173])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[15])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[16])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[22]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[17])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[20]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[18])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[20]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[19])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[22]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[21])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[25]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[23])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[25]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[24])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[28]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[26])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[28]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[27])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[38]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[29])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RailHeadDistance", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[30])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("StartDistAlong", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("HorizontalLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("StartCantLeft", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("EndCantLeft", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("StartCantRight", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("EndCantRight", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[32]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[31])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[33])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("StartPoint", new named_type(IFC4X3_RC3_types[147]), false));
        attributes.push_back(new attribute("StartDirection", new named_type(IFC4X3_RC3_types[766]), false));
        attributes.push_back(new attribute("StartRadiusOfCurvature", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("EndRadiusOfCurvature", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("SegmentLength", new named_type(IFC4X3_RC3_types[701]), false));
        attributes.push_back(new attribute("GravityCenterLineHeight", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[35]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[34])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("StartTag", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("EndTag", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[36])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("DesignParameters", new named_type(IFC4X3_RC3_types[36]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[37])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[39])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("StartDistAlong", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("HorizontalLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("StartHeight", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("StartGradient", new named_type(IFC4X3_RC3_types[876]), false));
        attributes.push_back(new attribute("EndGradient", new named_type(IFC4X3_RC3_types[876]), false));
        attributes.push_back(new attribute("RadiusOfCurvature", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[41]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[40])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[48]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[46])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("OuterBoundary", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("InnerBoundaries", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[273])), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[47])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("ApplicationDeveloper", new named_type(IFC4X3_RC3_types[722]), false));
        attributes.push_back(new attribute("Version", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("ApplicationFullName", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("ApplicationIdentifier", new named_type(IFC4X3_RC3_types[541]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[49])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(10);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("AppliedValue", new named_type(IFC4X3_RC3_types[51]), true));
        attributes.push_back(new attribute("UnitBasis", new named_type(IFC4X3_RC3_types[661]), true));
        attributes.push_back(new attribute("ApplicableDate", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("FixedUntilDate", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("Category", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Condition", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("ArithmeticOperator", new named_type(IFC4X3_RC3_types[60]), true));
        attributes.push_back(new attribute("Components", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[50])), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[50])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(9);
        attributes.push_back(new attribute("Identifier", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("TimeOfApproval", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Level", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Qualifier", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("RequestingApproval", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("GivingApproval", new named_type(IFC4X3_RC3_types[8]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[52])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingApproval", new named_type(IFC4X3_RC3_types[52]), false));
        attributes.push_back(new attribute("RelatedApprovals", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[52])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[53])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("OuterCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[54])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Curve", new named_type(IFC4X3_RC3_types[100]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[55])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("InnerCurves", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[273])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[56])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(9);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("OriginalValue", new named_type(IFC4X3_RC3_types[253]), true));
        attributes.push_back(new attribute("CurrentValue", new named_type(IFC4X3_RC3_types[253]), true));
        attributes.push_back(new attribute("TotalReplacementCost", new named_type(IFC4X3_RC3_types[253]), true));
        attributes.push_back(new attribute("Owner", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("User", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("ResponsiblePerson", new named_type(IFC4X3_RC3_types[743]), true));
        attributes.push_back(new attribute("IncorporationDate", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("DepreciatedValue", new named_type(IFC4X3_RC3_types[253]), true));
        std::vector<bool> derived; derived.reserve(14);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[62])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(12);
        attributes.push_back(new attribute("BottomFlangeWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("OverallDepth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WebThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("BottomFlangeThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("BottomFlangeFilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("TopFlangeWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("TopFlangeThickness", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TopFlangeFilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("BottomFlangeEdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("BottomFlangeSlope", new named_type(IFC4X3_RC3_types[766]), true));
        attributes.push_back(new attribute("TopFlangeEdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("TopFlangeSlope", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(15);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[63])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[66]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[64])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[66]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[65])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[67])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RefDirection", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[69])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[307]), true));
        attributes.push_back(new attribute("RefDirection", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[70])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[307]), true));
        attributes.push_back(new attribute("RefDirection", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[71])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Degree", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("ControlPointsList", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[147])), false));
        attributes.push_back(new attribute("CurveForm", new named_type(IFC4X3_RC3_types[109]), false));
        attributes.push_back(new attribute("ClosedCurve", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[621]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[108])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("KnotMultiplicities", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[556])), false));
        attributes.push_back(new attribute("Knots", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[731])), false));
        attributes.push_back(new attribute("KnotSpec", new named_type(IFC4X3_RC3_types[577]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[110])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("UDegree", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("VDegree", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("ControlPointsList", new aggregation_type(aggregation_type::list_type, 2, -1, new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[147]))), false));
        attributes.push_back(new attribute("SurfaceForm", new named_type(IFC4X3_RC3_types[112]), false));
        attributes.push_back(new attribute("UClosed", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("VClosed", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[621]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[111])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("UMultiplicities", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[556])), false));
        attributes.push_back(new attribute("VMultiplicities", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[556])), false));
        attributes.push_back(new attribute("UKnots", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[731])), false));
        attributes.push_back(new attribute("VKnots", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[731])), false));
        attributes.push_back(new attribute("KnotSpec", new named_type(IFC4X3_RC3_types[577]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[113])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[75]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[72])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[73])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[75]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[74])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[79]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[76])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[79]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[77])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RasterFormat", new named_type(IFC4X3_RC3_types[541]), false));
        attributes.push_back(new attribute("RasterCode", new named_type(IFC4X3_RC3_types[82]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[83])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("XLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("YLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("ZLength", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[84])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[87]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[85])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[87]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[86])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[89])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Operator", new named_type(IFC4X3_RC3_types[91]), false));
        attributes.push_back(new attribute("FirstOperand", new named_type(IFC4X3_RC3_types[90]), false));
        attributes.push_back(new attribute("SecondOperand", new named_type(IFC4X3_RC3_types[90]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[92])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[93])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[94])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[95])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("TranslationalStiffnessByLengthX", new named_type(IFC4X3_RC3_types[684]), true));
        attributes.push_back(new attribute("TranslationalStiffnessByLengthY", new named_type(IFC4X3_RC3_types[684]), true));
        attributes.push_back(new attribute("TranslationalStiffnessByLengthZ", new named_type(IFC4X3_RC3_types[684]), true));
        attributes.push_back(new attribute("RotationalStiffnessByLengthX", new named_type(IFC4X3_RC3_types[681]), true));
        attributes.push_back(new attribute("RotationalStiffnessByLengthY", new named_type(IFC4X3_RC3_types[681]), true));
        attributes.push_back(new attribute("RotationalStiffnessByLengthZ", new named_type(IFC4X3_RC3_types[681]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[96])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("TranslationalStiffnessByAreaX", new named_type(IFC4X3_RC3_types[683]), true));
        attributes.push_back(new attribute("TranslationalStiffnessByAreaY", new named_type(IFC4X3_RC3_types[683]), true));
        attributes.push_back(new attribute("TranslationalStiffnessByAreaZ", new named_type(IFC4X3_RC3_types[683]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[97])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("TranslationalStiffnessX", new named_type(IFC4X3_RC3_types[1228]), true));
        attributes.push_back(new attribute("TranslationalStiffnessY", new named_type(IFC4X3_RC3_types[1228]), true));
        attributes.push_back(new attribute("TranslationalStiffnessZ", new named_type(IFC4X3_RC3_types[1228]), true));
        attributes.push_back(new attribute("RotationalStiffnessX", new named_type(IFC4X3_RC3_types[982]), true));
        attributes.push_back(new attribute("RotationalStiffnessY", new named_type(IFC4X3_RC3_types[982]), true));
        attributes.push_back(new attribute("RotationalStiffnessZ", new named_type(IFC4X3_RC3_types[982]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[98])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("WarpingStiffness", new named_type(IFC4X3_RC3_types[1290]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[99])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[100])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[101])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Corner", new named_type(IFC4X3_RC3_types[147]), false));
        attributes.push_back(new attribute("XDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("YDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("ZDim", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[102])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Enclosure", new named_type(IFC4X3_RC3_types[102]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[104])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[107]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[105])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ElevationOfRefHeight", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ElevationOfTerrain", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("BuildingAddress", new named_type(IFC4X3_RC3_types[788]), true));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[114])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[117]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[115])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[117]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[116])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[120]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[118])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[120]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[119])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Elevation", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[121])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[123]), true));
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[122])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[124])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[125])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[127]), true));
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[126])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[130]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[128])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[130]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[129])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("Width", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WallThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("Girth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("InternalFilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[267])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[133]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[131])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[133]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[132])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[136]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[134])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[136]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[135])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[139]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[137])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[139]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[138])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[142]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[140])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[142]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[141])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[145]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[143])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[145]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[144])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Coordinates", new aggregation_type(aggregation_type::list_type, 1, 3, new named_type(IFC4X3_RC3_types[589])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[147])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[148])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CoordList", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 2, 2, new named_type(IFC4X3_RC3_types[589]))), false));
        attributes.push_back(new attribute("TagList", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[149])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CoordList", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[589]))), false));
        attributes.push_back(new attribute("TagList", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[150])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Axis1", new named_type(IFC4X3_RC3_types[307]), true));
        attributes.push_back(new attribute("Axis2", new named_type(IFC4X3_RC3_types[307]), true));
        attributes.push_back(new attribute("LocalOrigin", new named_type(IFC4X3_RC3_types[147]), false));
        attributes.push_back(new attribute("Scale", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[151])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[152])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Scale2", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[153])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Axis3", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[154])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Scale2", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("Scale3", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[155])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Thickness", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[156])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[160]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[158])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[160]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[159])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[163]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[161])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[163]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[162])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[164])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("WallThickness", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[165])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[166])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[167])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[168])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("Source", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Edition", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("EditionDate", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Location", new named_type(IFC4X3_RC3_types[1257]), true));
        attributes.push_back(new attribute("ReferenceTokens", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[541])), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[169])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ReferencedSource", new named_type(IFC4X3_RC3_types[171]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Sort", new named_type(IFC4X3_RC3_types[541]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[170])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[173])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ClothoidConstant", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[174])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[177]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[175])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[177]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[176])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Red", new named_type(IFC4X3_RC3_types[702]), false));
        attributes.push_back(new attribute("Green", new named_type(IFC4X3_RC3_types[702]), false));
        attributes.push_back(new attribute("Blue", new named_type(IFC4X3_RC3_types[702]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[180])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ColourList", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[702]))), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[181])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[182])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[186]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[183])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[184])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[186]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[185])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[189]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[187])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[189]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[188])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("UsageName", new named_type(IFC4X3_RC3_types[541]), false));
        attributes.push_back(new attribute("HasProperties", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[824])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[191])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("UsageName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("TemplateType", new named_type(IFC4X3_RC3_types[193]), true));
        attributes.push_back(new attribute("HasPropertyTemplates", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[841])), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[192])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Segments", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[999])), false));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[621]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[194])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[195])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SameSense", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("ParentCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[196])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Profiles", new aggregation_type(aggregation_type::set_type, 2, -1, new named_type(IFC4X3_RC3_types[813])), false));
        attributes.push_back(new attribute("Label", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[197])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[201]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[199])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[201]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[200])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[204]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[202])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[204]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[203])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[68]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[205])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("CfsFaces", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[440])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[206])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CurveOnRelatingElement", new named_type(IFC4X3_RC3_types[280]), false));
        attributes.push_back(new attribute("CurveOnRelatedElement", new named_type(IFC4X3_RC3_types[280]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[207])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[208])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("EccentricityInX", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("EccentricityInY", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("EccentricityInZ", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[209])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PointOnRelatingElement", new named_type(IFC4X3_RC3_types[776]), false));
        attributes.push_back(new attribute("PointOnRelatedElement", new named_type(IFC4X3_RC3_types[776]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[210])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SurfaceOnRelatingElement", new named_type(IFC4X3_RC3_types[1136]), false));
        attributes.push_back(new attribute("SurfaceOnRelatedElement", new named_type(IFC4X3_RC3_types[1136]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[211])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("VolumeOnRelatingElement", new named_type(IFC4X3_RC3_types[1042]), false));
        attributes.push_back(new attribute("VolumeOnRelatedElement", new named_type(IFC4X3_RC3_types[1042]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[213])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("ConstraintGrade", new named_type(IFC4X3_RC3_types[215]), false));
        attributes.push_back(new attribute("ConstraintSource", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("CreatingActor", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("CreationTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("UserDefinedGrade", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[214])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[218]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[216])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[218]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[217])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[221]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[219])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[221]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[220])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[224]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[222])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[224]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[223])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Usage", new named_type(IFC4X3_RC3_types[966]), true));
        attributes.push_back(new attribute("BaseCosts", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[50])), true));
        attributes.push_back(new attribute("BaseQuantity", new named_type(IFC4X3_RC3_types[748]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[225])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BaseCosts", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[50])), true));
        attributes.push_back(new attribute("BaseQuantity", new named_type(IFC4X3_RC3_types[748]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[226])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("ObjectType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Phase", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("RepresentationContexts", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[957])), true));
        attributes.push_back(new attribute("UnitsInContext", new named_type(IFC4X3_RC3_types[1255]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[227])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[229])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[230])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[233]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[231])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[233]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[232])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("ConversionFactor", new named_type(IFC4X3_RC3_types[661]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[234])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ConversionOffset", new named_type(IFC4X3_RC3_types[879]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[235])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[238]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[236])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[238]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[237])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[241]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[239])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[241]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[240])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[244]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[242])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[244]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[243])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SourceCRS", new named_type(IFC4X3_RC3_types[247]), false));
        attributes.push_back(new attribute("TargetCRS", new named_type(IFC4X3_RC3_types[246]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[245])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("GeodeticDatum", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("VerticalDatum", new named_type(IFC4X3_RC3_types[541]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[246])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CosineTerm", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("ConstantTerm", new named_type(IFC4X3_RC3_types[879]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[248])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[250]), true));
        attributes.push_back(new attribute("CostValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[253])), true));
        attributes.push_back(new attribute("CostQuantities", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[748])), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[249])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[252]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("SubmittedOn", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("UpdateDate", new named_type(IFC4X3_RC3_types[293]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[251])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[253])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[257]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[255])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[257]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[256])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[260]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[258])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[260]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[259])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[263]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[261])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[263]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[262])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[264])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("TreeRootExpression", new named_type(IFC4X3_RC3_types[265]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[266])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RelatingMonetaryUnit", new named_type(IFC4X3_RC3_types[689]), false));
        attributes.push_back(new attribute("RelatedMonetaryUnit", new named_type(IFC4X3_RC3_types[689]), false));
        attributes.push_back(new attribute("ExchangeRate", new named_type(IFC4X3_RC3_types[787]), false));
        attributes.push_back(new attribute("RateDateTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("RateSource", new named_type(IFC4X3_RC3_types[590]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[268])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[271]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[269])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[271]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[270])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[273])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("BasisSurface", new named_type(IFC4X3_RC3_types[765]), false));
        attributes.push_back(new attribute("OuterBoundary", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("InnerBoundaries", new aggregation_type(aggregation_type::set_type, 0, -1, new named_type(IFC4X3_RC3_types[273])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[274])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("BasisSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("Boundaries", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[95])), false));
        attributes.push_back(new attribute("ImplicitOuter", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[275])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Placement", new named_type(IFC4X3_RC3_types[761]), false));
        attributes.push_back(new attribute("SegmentStart", new named_type(IFC4X3_RC3_types[278]), false));
        attributes.push_back(new attribute("SegmentLength", new named_type(IFC4X3_RC3_types[278]), false));
        attributes.push_back(new attribute("ParentCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[281])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("CurveFont", new named_type(IFC4X3_RC3_types[276]), true));
        attributes.push_back(new attribute("CurveWidth", new named_type(IFC4X3_RC3_types[1030]), true));
        attributes.push_back(new attribute("CurveColour", new named_type(IFC4X3_RC3_types[178]), true));
        attributes.push_back(new attribute("ModelOrDraughting", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[282])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("PatternList", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[285])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[283])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("CurveFont", new named_type(IFC4X3_RC3_types[286]), false));
        attributes.push_back(new attribute("CurveFontScaling", new named_type(IFC4X3_RC3_types[787]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[284])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("VisibleSegmentLength", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("InvisibleSegmentLength", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[285])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[287])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[290]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[288])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[290]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[289])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[296])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[297])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ParentProfile", new named_type(IFC4X3_RC3_types[813]), false));
        attributes.push_back(new attribute("Operator", new named_type(IFC4X3_RC3_types[152]), false));
        attributes.push_back(new attribute("Label", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[300])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Elements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[302])), false));
        attributes.push_back(new attribute("UnitType", new named_type(IFC4X3_RC3_types[303]), false));
        attributes.push_back(new attribute("UserDefinedType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[301])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[697]), false));
        attributes.push_back(new attribute("Exponent", new simple_type(simple_type::integer_type), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[302])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("LengthExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("MassExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("TimeExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("ElectricCurrentExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("ThermodynamicTemperatureExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("AmountOfSubstanceExponent", new simple_type(simple_type::integer_type), false));
        attributes.push_back(new attribute("LuminousIntensityExponent", new simple_type(simple_type::integer_type), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[305])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("DirectionRatios", new aggregation_type(aggregation_type::list_type, 2, 3, new named_type(IFC4X3_RC3_types[879])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[307])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Directrix", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("StartParam", new named_type(IFC4X3_RC3_types[278]), true));
        attributes.push_back(new attribute("EndParam", new named_type(IFC4X3_RC3_types[278]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[309])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[310])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Directrix", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("StartDistance", new named_type(IFC4X3_RC3_types[773]), true));
        attributes.push_back(new attribute("EndDistance", new named_type(IFC4X3_RC3_types[773]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[311])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[314]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[312])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[314]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[313])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[317]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[315])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[317]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[316])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[320]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[318])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[320]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[319])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[321])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[322])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[323])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[324])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[325])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[326])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[327])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("FlowDirection", new named_type(IFC4X3_RC3_types[475]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[329]), true));
        attributes.push_back(new attribute("SystemType", new named_type(IFC4X3_RC3_types[331]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[328])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[331]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[330])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(17);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), false));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Location", new named_type(IFC4X3_RC3_types[1257]), true));
        attributes.push_back(new attribute("Purpose", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("IntendedUse", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Scope", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Revision", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("DocumentOwner", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("Editors", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[8])), true));
        attributes.push_back(new attribute("CreationTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("LastRevisionTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ElectronicFormat", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("ValidFrom", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("ValidUntil", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("Confidentiality", new named_type(IFC4X3_RC3_types[332]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[337]), true));
        std::vector<bool> derived; derived.reserve(17);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[333])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("RelatingDocument", new named_type(IFC4X3_RC3_types[333]), false));
        attributes.push_back(new attribute("RelatedDocuments", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[333])), false));
        attributes.push_back(new attribute("RelationshipType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[334])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("ReferencedDocument", new named_type(IFC4X3_RC3_types[333]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[335])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("OverallHeight", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("OverallWidth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[348]), true));
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[349]), true));
        attributes.push_back(new attribute("UserDefinedOperationType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[338])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(13);
        attributes.push_back(new attribute("LiningDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LiningThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("ThresholdDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("ThresholdThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("TransomThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("TransomOffset", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LiningOffset", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ThresholdOffset", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("CasingThickness", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("CasingDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("ShapeAspectStyle", new named_type(IFC4X3_RC3_types[1009]), true));
        attributes.push_back(new attribute("LiningToPanelOffsetX", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LiningToPanelOffsetY", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(17);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[339])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("PanelDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PanelOperation", new named_type(IFC4X3_RC3_types[340]), false));
        attributes.push_back(new attribute("PanelWidth", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("PanelPosition", new named_type(IFC4X3_RC3_types[341]), false));
        attributes.push_back(new attribute("ShapeAspectStyle", new named_type(IFC4X3_RC3_types[1009]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[342])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[343])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[346]), false));
        attributes.push_back(new attribute("ConstructionType", new named_type(IFC4X3_RC3_types[345]), false));
        attributes.push_back(new attribute("ParameterTakesPrecedence", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Sizeable", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[344])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[348]), false));
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[349]), false));
        attributes.push_back(new attribute("ParameterTakesPrecedence", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("UserDefinedOperationType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[347])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[351])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[352])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[355]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[353])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[355]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[354])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[358]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[356])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[358]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[357])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[361]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[359])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[361]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[360])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[365]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[364])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[366])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[368]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[367])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("EdgeStart", new named_type(IFC4X3_RC3_types[1266]), false));
        attributes.push_back(new attribute("EdgeEnd", new named_type(IFC4X3_RC3_types[1266]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[369])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("EdgeGeometry", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("SameSense", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[370])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("EdgeList", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[724])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[371])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[374]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[372])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[374]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[373])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[381]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[379])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[381]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[380])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[384]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[382])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[384]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[383])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[387]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[385])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[387]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[386])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[390]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[388])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[390]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[389])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[393]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[391])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[393]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[392])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[397]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[395])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[397]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[396])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Tag", new named_type(IFC4X3_RC3_types[541]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[399])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("AssemblyPlace", new named_type(IFC4X3_RC3_types[61]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[403]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[401])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[403]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[402])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[404])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[405])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MethodOfMeasurement", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Quantities", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[748])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[407])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ElementType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[408])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[400])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SemiAxis1", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("SemiAxis2", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[409])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SemiAxis1", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("SemiAxis2", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[410])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[411])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[412])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[416]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[414])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[416]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[415])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[419]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[417])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[419]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[418])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[422]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[420])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[422]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[421])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[427]), true));
        attributes.push_back(new attribute("EventTriggerType", new named_type(IFC4X3_RC3_types[425]), true));
        attributes.push_back(new attribute("UserDefinedEventTriggerType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("EventOccurenceTime", new named_type(IFC4X3_RC3_types[424]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[423])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("ActualDate", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("EarlyDate", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("LateDate", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ScheduleDate", new named_type(IFC4X3_RC3_types[293]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[424])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[427]), false));
        attributes.push_back(new attribute("EventTriggerType", new named_type(IFC4X3_RC3_types[425]), false));
        attributes.push_back(new attribute("UserDefinedEventTriggerType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[426])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Properties", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[824])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[428])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[429])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Location", new named_type(IFC4X3_RC3_types[1257]), true));
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[433])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingReference", new named_type(IFC4X3_RC3_types[433]), false));
        attributes.push_back(new attribute("RelatedResourceObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[964])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[434])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[436]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[435])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[437])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[430])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[431])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[432])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ExtrudedDirection", new named_type(IFC4X3_RC3_types[307]), false));
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[438])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("EndSweptArea", new named_type(IFC4X3_RC3_types[813]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[439])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Bounds", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[442])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[440])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("FbsmFaces", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[206])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[441])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Bound", new named_type(IFC4X3_RC3_types[623]), false));
        attributes.push_back(new attribute("Orientation", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[442])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[443])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("FaceSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("SameSense", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[444])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[445])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Voids", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[173])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[446])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[447])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[450]), false));
        attributes.push_back(new attribute("UsageType", new named_type(IFC4X3_RC3_types[451]), false));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[448])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("TensionFailureX", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("TensionFailureY", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("TensionFailureZ", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("CompressionFailureX", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("CompressionFailureY", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("CompressionFailureZ", new named_type(IFC4X3_RC3_types[500]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[452])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[455]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[453])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[455]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[454])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[458]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[456])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[458]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[457])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[459])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[460])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[461])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("FillStyles", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[465])), false));
        attributes.push_back(new attribute("ModelOrDraughting", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[462])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("HatchLineAppearance", new named_type(IFC4X3_RC3_types[282]), false));
        attributes.push_back(new attribute("StartOfNextHatchLine", new named_type(IFC4X3_RC3_types[532]), false));
        attributes.push_back(new attribute("PointOfReferenceHatchLine", new named_type(IFC4X3_RC3_types[147]), true));
        attributes.push_back(new attribute("PatternStart", new named_type(IFC4X3_RC3_types[147]), true));
        attributes.push_back(new attribute("HatchLineAngle", new named_type(IFC4X3_RC3_types[766]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[463])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("TilingPattern", new aggregation_type(aggregation_type::list_type, 2, 2, new named_type(IFC4X3_RC3_types[1264])), false));
        attributes.push_back(new attribute("Tiles", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1122])), false));
        attributes.push_back(new attribute("TilingScale", new named_type(IFC4X3_RC3_types[787]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[464])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[468]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[466])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[468]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[467])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[471]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[469])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[471]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[470])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("FixedReference", new named_type(IFC4X3_RC3_types[307]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[472])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[473])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[474])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[476])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[477])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[480]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[478])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[480]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[479])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[483]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[481])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[483]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[482])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[484])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[485])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[486])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[487])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[488])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[489])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[490])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[491])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[492])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[493])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[499]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[497])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[499]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[498])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[502])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[503])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[506]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[504])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("AssemblyPlace", new named_type(IFC4X3_RC3_types[61]), false));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[506]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[505])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[509]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[507])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[509]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[508])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[510])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("CoordinateSpaceDimension", new named_type(IFC4X3_RC3_types[306]), false));
        attributes.push_back(new attribute("Precision", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("WorldCoordinateSystem", new named_type(IFC4X3_RC3_types[68]), false));
        attributes.push_back(new attribute("TrueNorth", new named_type(IFC4X3_RC3_types[307]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[512])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[513])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("ParentContext", new named_type(IFC4X3_RC3_types[512]), false));
        attributes.push_back(new attribute("TargetScale", new named_type(IFC4X3_RC3_types[787]), true));
        attributes.push_back(new attribute("TargetView", new named_type(IFC4X3_RC3_types[511]), false));
        attributes.push_back(new attribute("UserDefinedTargetView", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(true); derived.push_back(true); derived.push_back(true); derived.push_back(true); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[514])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Elements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[516])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[515])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[517])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[518])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[519])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[520])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[521])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BaseCurve", new named_type(IFC4X3_RC3_types[100]), false));
        attributes.push_back(new attribute("EndPoint", new named_type(IFC4X3_RC3_types[761]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[524])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("UAxes", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[526])), false));
        attributes.push_back(new attribute("VAxes", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[526])), false));
        attributes.push_back(new attribute("WAxes", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[526])), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[529]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[525])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("AxisTag", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("AxisCurve", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("SameSense", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[526])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PlacementLocation", new named_type(IFC4X3_RC3_types[1277]), false));
        attributes.push_back(new attribute("PlacementRefDirection", new named_type(IFC4X3_RC3_types[528]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[527])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[530])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BaseSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("AgreementFlag", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[531])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[535]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[533])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[535]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[534])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[540]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[538])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[540]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[539])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("OverallWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("OverallDepth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WebThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("FlangeEdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("FlangeSlope", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[569])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("URLReference", new named_type(IFC4X3_RC3_types[1257]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[543])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[547]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[544])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[547]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[545])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("FixedAxisVertical", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[548])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("MappedTo", new named_type(IFC4X3_RC3_types[1182]), false));
        attributes.push_back(new attribute("Opacity", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("Colours", new named_type(IFC4X3_RC3_types[181]), false));
        attributes.push_back(new attribute("ColourIndex", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[784])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[549])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Points", new named_type(IFC4X3_RC3_types[148]), false));
        attributes.push_back(new attribute("Segments", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1001])), true));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[550])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("CoordIndex", new aggregation_type(aggregation_type::list_type, 3, -1, new named_type(IFC4X3_RC3_types[784])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[551])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("InnerCoordIndices", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, -1, new named_type(IFC4X3_RC3_types[784]))), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[552])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MappedTo", new named_type(IFC4X3_RC3_types[1182]), false));
        attributes.push_back(new attribute("TexCoords", new named_type(IFC4X3_RC3_types[1201]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[553])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("TexCoordIndex", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[784]))), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[554])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[560]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[558])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[560]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[559])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[563])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[565]), true));
        attributes.push_back(new attribute("Jurisdiction", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("ResponsiblePersons", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[743])), true));
        attributes.push_back(new attribute("LastUpdateDate", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("CurrentValue", new named_type(IFC4X3_RC3_types[253]), true));
        attributes.push_back(new attribute("OriginalValue", new named_type(IFC4X3_RC3_types[253]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[564])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Values", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[568])), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[567])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("TimeStamp", new named_type(IFC4X3_RC3_types[293]), false));
        attributes.push_back(new attribute("ListValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[568])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[573]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[571])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[573]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[572])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Mountable", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[574])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Mountable", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[575])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("Width", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("Thickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("EdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("LegSlope", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[624])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[581]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[579])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[581]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[580])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("LagValue", new named_type(IFC4X3_RC3_types[1211]), false));
        attributes.push_back(new attribute("DurationType", new named_type(IFC4X3_RC3_types[1165]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[582])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[585]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[583])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[585]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[584])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Version", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Publisher", new named_type(IFC4X3_RC3_types[8]), true));
        attributes.push_back(new attribute("VersionDate", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("Location", new named_type(IFC4X3_RC3_types[1257]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[590])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Language", new named_type(IFC4X3_RC3_types[586]), true));
        attributes.push_back(new attribute("ReferencedLibrary", new named_type(IFC4X3_RC3_types[590]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[591])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("MainPlaneAngle", new named_type(IFC4X3_RC3_types[766]), false));
        attributes.push_back(new attribute("SecondaryPlaneAngle", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[766])), false));
        attributes.push_back(new attribute("LuminousIntensity", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[626])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[594])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[599]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[597])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[599]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[598])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("LightDistributionCurve", new named_type(IFC4X3_RC3_types[593]), false));
        attributes.push_back(new attribute("DistributionData", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[594])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[600])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LightColour", new named_type(IFC4X3_RC3_types[180]), false));
        attributes.push_back(new attribute("AmbientIntensity", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("Intensity", new named_type(IFC4X3_RC3_types[702]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[601])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[602])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Orientation", new named_type(IFC4X3_RC3_types[307]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[603])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), false));
        attributes.push_back(new attribute("ColourAppearance", new named_type(IFC4X3_RC3_types[180]), true));
        attributes.push_back(new attribute("ColourTemperature", new named_type(IFC4X3_RC3_types[1207]), false));
        attributes.push_back(new attribute("LuminousFlux", new named_type(IFC4X3_RC3_types[625]), false));
        attributes.push_back(new attribute("LightEmissionSource", new named_type(IFC4X3_RC3_types[596]), false));
        attributes.push_back(new attribute("LightDistributionDataSource", new named_type(IFC4X3_RC3_types[595]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[604])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[147]), false));
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("ConstantAttenuation", new named_type(IFC4X3_RC3_types[879]), false));
        attributes.push_back(new attribute("DistanceAttenuation", new named_type(IFC4X3_RC3_types[879]), false));
        attributes.push_back(new attribute("QuadricAttenuation", new named_type(IFC4X3_RC3_types[879]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[605])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Orientation", new named_type(IFC4X3_RC3_types[307]), false));
        attributes.push_back(new attribute("ConcentrationExponent", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("SpreadAngle", new named_type(IFC4X3_RC3_types[786]), false));
        attributes.push_back(new attribute("BeamWidthAngle", new named_type(IFC4X3_RC3_types[786]), false));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[606])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Pnt", new named_type(IFC4X3_RC3_types[147]), false));
        attributes.push_back(new attribute("Dir", new named_type(IFC4X3_RC3_types[1264]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[607])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[608])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelativePlacement", new named_type(IFC4X3_RC3_types[71]), false));
        attributes.push_back(new attribute("CartesianPosition", new named_type(IFC4X3_RC3_types[70]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[611])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[612])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[618]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[616])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[618]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[617])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelativePlacement", new named_type(IFC4X3_RC3_types[68]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[620])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[623])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Outer", new named_type(IFC4X3_RC3_types[173]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[630])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("Eastings", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("Northings", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("OrthogonalHeight", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("XAxisAbscissa", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("XAxisOrdinate", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("Scale", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("ScaleY", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("ScaleZ", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[631])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MappingSource", new named_type(IFC4X3_RC3_types[959]), false));
        attributes.push_back(new attribute("MappingTarget", new named_type(IFC4X3_RC3_types[151]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[632])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[634]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[633])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Category", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[640])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MaterialClassifications", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[172])), false));
        attributes.push_back(new attribute("ClassifiedMaterial", new named_type(IFC4X3_RC3_types[640]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[641])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Material", new named_type(IFC4X3_RC3_types[640]), false));
        attributes.push_back(new attribute("Fraction", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("Category", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[642])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("MaterialConstituents", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[642])), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[643])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[644])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RepresentedMaterial", new named_type(IFC4X3_RC3_types[640]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[645])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("Material", new named_type(IFC4X3_RC3_types[640]), true));
        attributes.push_back(new attribute("LayerThickness", new named_type(IFC4X3_RC3_types[701]), false));
        attributes.push_back(new attribute("IsVentilated", new named_type(IFC4X3_RC3_types[621]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Category", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Priority", new named_type(IFC4X3_RC3_types[556]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[646])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("MaterialLayers", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[646])), false));
        attributes.push_back(new attribute("LayerSetName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[647])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("ForLayerSet", new named_type(IFC4X3_RC3_types[647]), false));
        attributes.push_back(new attribute("LayerSetDirection", new named_type(IFC4X3_RC3_types[588]), false));
        attributes.push_back(new attribute("DirectionSense", new named_type(IFC4X3_RC3_types[308]), false));
        attributes.push_back(new attribute("OffsetFromReferenceLine", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("ReferenceExtent", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[648])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("OffsetDirection", new named_type(IFC4X3_RC3_types[588]), false));
        attributes.push_back(new attribute("OffsetValues", new aggregation_type(aggregation_type::array_type, 1, 2, new named_type(IFC4X3_RC3_types[589])), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[649])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Materials", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[640])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[650])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Material", new named_type(IFC4X3_RC3_types[640]), true));
        attributes.push_back(new attribute("Profile", new named_type(IFC4X3_RC3_types[813]), false));
        attributes.push_back(new attribute("Priority", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("Category", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[651])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("MaterialProfiles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[651])), false));
        attributes.push_back(new attribute("CompositeProfile", new named_type(IFC4X3_RC3_types[197]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[652])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ForProfileSet", new named_type(IFC4X3_RC3_types[652]), false));
        attributes.push_back(new attribute("CardinalPoint", new named_type(IFC4X3_RC3_types[146]), true));
        attributes.push_back(new attribute("ReferenceExtent", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[653])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ForProfileEndSet", new named_type(IFC4X3_RC3_types[652]), false));
        attributes.push_back(new attribute("CardinalEndPoint", new named_type(IFC4X3_RC3_types[146]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[654])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("OffsetValues", new aggregation_type(aggregation_type::array_type, 1, 2, new named_type(IFC4X3_RC3_types[589])), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[655])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Material", new named_type(IFC4X3_RC3_types[644]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[656])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("RelatingMaterial", new named_type(IFC4X3_RC3_types[640]), false));
        attributes.push_back(new attribute("RelatedMaterials", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[640])), false));
        attributes.push_back(new attribute("Expression", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[657])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[659])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ValueComponent", new named_type(IFC4X3_RC3_types[1259]), false));
        attributes.push_back(new attribute("UnitComponent", new named_type(IFC4X3_RC3_types[1248]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[661])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("NominalLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[664]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[662])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[664]), false));
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("NominalLength", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[663])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[667]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[665])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[667]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[666])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[671]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[668])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[669])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[671]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[670])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Benchmark", new named_type(IFC4X3_RC3_types[80]), false));
        attributes.push_back(new attribute("ValueSource", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("DataValue", new named_type(IFC4X3_RC3_types[673]), true));
        attributes.push_back(new attribute("ReferencePath", new named_type(IFC4X3_RC3_types[886]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[672])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(true); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[674])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[677]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[675])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[677]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[676])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Currency", new named_type(IFC4X3_RC3_types[578]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[689])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[693]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[691])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[693]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[692])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[696]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[694])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[696]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[695])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Dimensions", new named_type(IFC4X3_RC3_types[305]), false));
        attributes.push_back(new attribute("UnitType", new named_type(IFC4X3_RC3_types[1256]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[697])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[700]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[698])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[700]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[699])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ObjectType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[704])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[705])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PlacementRelTo", new named_type(IFC4X3_RC3_types[708]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[708])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("BenchmarkValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[214])), true));
        attributes.push_back(new attribute("LogicalAggregator", new named_type(IFC4X3_RC3_types[622]), true));
        attributes.push_back(new attribute("ObjectiveQualifier", new named_type(IFC4X3_RC3_types[707]), false));
        attributes.push_back(new attribute("UserDefinedQualifier", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[706])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[712]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[711])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("BasisCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[713])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Distance", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[621]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[714])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Distance", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("SelfIntersect", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("RefDirection", new named_type(IFC4X3_RC3_types[307]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[715])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("OffsetValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[773])), false));
        attributes.push_back(new attribute("Tag", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[716])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("HorizontalWidths", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Widths", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[701])), false));
        attributes.push_back(new attribute("Slopes", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[766])), false));
        attributes.push_back(new attribute("Tags", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[578])), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[717])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[721])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[719]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[718])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[720])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Roles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[7])), true));
        attributes.push_back(new attribute("Addresses", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[12])), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[722])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingOrganization", new named_type(IFC4X3_RC3_types[722]), false));
        attributes.push_back(new attribute("RelatedOrganizations", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[722])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[723])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("EdgeElement", new named_type(IFC4X3_RC3_types[369]), false));
        attributes.push_back(new attribute("Orientation", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(true); derived.push_back(true); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[724])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[725])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[728]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[726])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[728]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[727])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("OwningUser", new named_type(IFC4X3_RC3_types[744]), false));
        attributes.push_back(new attribute("OwningApplication", new named_type(IFC4X3_RC3_types[49]), false));
        attributes.push_back(new attribute("State", new named_type(IFC4X3_RC3_types[1079]), true));
        attributes.push_back(new attribute("ChangeAction", new named_type(IFC4X3_RC3_types[157]), true));
        attributes.push_back(new attribute("LastModifiedDate", new named_type(IFC4X3_RC3_types[1216]), true));
        attributes.push_back(new attribute("LastModifyingUser", new named_type(IFC4X3_RC3_types[744]), true));
        attributes.push_back(new attribute("LastModifyingApplication", new named_type(IFC4X3_RC3_types[49]), true));
        attributes.push_back(new attribute("CreationDate", new named_type(IFC4X3_RC3_types[1216]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[729])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[69]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[730])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("EdgeList", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[724])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[732])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[735]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[733])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[735]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[734])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BasisSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("ReferenceCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[736])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("LifeCyclePhase", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[738]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[737])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[739]), false));
        attributes.push_back(new attribute("PanelPosition", new named_type(IFC4X3_RC3_types[1298]), false));
        attributes.push_back(new attribute("FrameDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("FrameThickness", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("ShapeAspectStyle", new named_type(IFC4X3_RC3_types[1009]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[740])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[742]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[741])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("FamilyName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("GivenName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("MiddleNames", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("PrefixTitles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("SuffixTitles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("Roles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[7])), true));
        attributes.push_back(new attribute("Addresses", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[12])), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[743])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ThePerson", new named_type(IFC4X3_RC3_types[743]), false));
        attributes.push_back(new attribute("TheOrganization", new named_type(IFC4X3_RC3_types[722]), false));
        attributes.push_back(new attribute("Roles", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[7])), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[744])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("HasQuantities", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[748])), false));
        attributes.push_back(new attribute("Discrimination", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Quality", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Usage", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[746])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[748])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[697]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[749])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[753]), true));
        attributes.push_back(new attribute("ConstructionType", new named_type(IFC4X3_RC3_types[751]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[750])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[753]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[752])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[756]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[754])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[756]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[755])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[759]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[757])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[759]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[758])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Width", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("Height", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("ColourComponents", new named_type(IFC4X3_RC3_types[556]), false));
        attributes.push_back(new attribute("Pixel", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[82])), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[760])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Location", new named_type(IFC4X3_RC3_types[772]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[761])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Placement", new named_type(IFC4X3_RC3_types[68]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[762])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SizeInX", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("SizeInY", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[763])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[765])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[767])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[771]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[768])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[769])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[771]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[770])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[772])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("DistanceAlong", new named_type(IFC4X3_RC3_types[278]), false));
        attributes.push_back(new attribute("OffsetLateral", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("OffsetVertical", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("OffsetLongitudinal", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("BasisCurve", new named_type(IFC4X3_RC3_types[273]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[773])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BasisCurve", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("PointParameter", new named_type(IFC4X3_RC3_types[731]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[774])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("BasisSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("PointParameterU", new named_type(IFC4X3_RC3_types[731]), false));
        attributes.push_back(new attribute("PointParameterV", new named_type(IFC4X3_RC3_types[731]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[775])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Polygon", new aggregation_type(aggregation_type::list_type, 3, -1, new named_type(IFC4X3_RC3_types[147])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[780])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), false));
        attributes.push_back(new attribute("PolygonalBoundary", new named_type(IFC4X3_RC3_types[100]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[777])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Closed", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("Faces", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[551])), false));
        attributes.push_back(new attribute("PnIndex", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[784])), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[778])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Points", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[147])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[779])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[761]), false));
        attributes.push_back(new attribute("CoefficientsX", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[879])), true));
        attributes.push_back(new attribute("CoefficientsY", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[879])), true));
        attributes.push_back(new attribute("CoefficientsZ", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[879])), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[781])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[782])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[783])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("InternalLocation", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("AddressLines", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("PostalBox", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Town", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Region", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("PostalCode", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Country", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[788])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[790])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[791])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[792])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[793])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[794])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[795])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[798])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("AssignedItems", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[587])), false));
        attributes.push_back(new attribute("Identifier", new named_type(IFC4X3_RC3_types[541]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[799])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("LayerOn", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("LayerFrozen", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("LayerBlocked", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("LayerStyles", new aggregation_type(aggregation_type::set_type, 0, -1, new named_type(IFC4X3_RC3_types[801])), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[800])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[801])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[805]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[803])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[805]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[804])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[806])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ObjectPlacement", new named_type(IFC4X3_RC3_types[708]), true));
        attributes.push_back(new attribute("Representation", new named_type(IFC4X3_RC3_types[810]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[808])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[809])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Representations", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[956])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[810])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ProfileType", new named_type(IFC4X3_RC3_types[815]), false));
        attributes.push_back(new attribute("ProfileName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[813])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ProfileDefinition", new named_type(IFC4X3_RC3_types[813]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[814])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[816])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[821])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[823]), true));
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[822])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("MapProjection", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("MapZone", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("MapUnit", new named_type(IFC4X3_RC3_types[697]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[817])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[820]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[819])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[541]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[824])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[825])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("UpperBoundValue", new named_type(IFC4X3_RC3_types[1259]), true));
        attributes.push_back(new attribute("LowerBoundValue", new named_type(IFC4X3_RC3_types[1259]), true));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("SetPointValue", new named_type(IFC4X3_RC3_types[1259]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[826])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[827])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("DependingProperty", new named_type(IFC4X3_RC3_types[824]), false));
        attributes.push_back(new attribute("DependantProperty", new named_type(IFC4X3_RC3_types[824]), false));
        attributes.push_back(new attribute("Expression", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[828])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("EnumerationValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), true));
        attributes.push_back(new attribute("EnumerationReference", new named_type(IFC4X3_RC3_types[830]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[829])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("EnumerationValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), false));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[830])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ListValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), true));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[831])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("UsageName", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("PropertyReference", new named_type(IFC4X3_RC3_types[709]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[832])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("HasProperties", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[824])), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[833])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[834])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("TemplateType", new named_type(IFC4X3_RC3_types[838]), true));
        attributes.push_back(new attribute("ApplicableEntity", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("HasPropertyTemplates", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[841])), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[837])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("NominalValue", new named_type(IFC4X3_RC3_types[1259]), true));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[839])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("DefiningValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), true));
        attributes.push_back(new attribute("DefinedValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), true));
        attributes.push_back(new attribute("Expression", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("DefiningUnit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("DefinedUnit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("CurveInterpolation", new named_type(IFC4X3_RC3_types[277]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[840])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[841])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[842])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[848]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[843])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[846]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[844])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[846]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[845])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[848]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[847])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ProxyType", new named_type(IFC4X3_RC3_types[710]), false));
        attributes.push_back(new attribute("Tag", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[849])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[852]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[850])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[852]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[851])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("AreaValue", new named_type(IFC4X3_RC3_types[59]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[853])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CountValue", new named_type(IFC4X3_RC3_types[254]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[854])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("LengthValue", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[855])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[856])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("TimeValue", new named_type(IFC4X3_RC3_types[1210]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[857])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("VolumeValue", new named_type(IFC4X3_RC3_types[1281]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[858])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("WeightValue", new named_type(IFC4X3_RC3_types[638]), false));
        attributes.push_back(new attribute("Formula", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[859])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[866]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[861])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[866]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[865])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[864]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[862])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[864]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[863])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[869]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[867])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[875]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[870])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[873]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[871])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[873]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[872])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[875]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[874])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("WeightsData", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[879])), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[877])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("WeightsData", new aggregation_type(aggregation_type::list_type, 2, -1, new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[879]))), false));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[878])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("WallThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("InnerFilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("OuterFilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[880])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("XDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("YDim", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[881])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("XLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("YLength", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("Height", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[882])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("BasisSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        attributes.push_back(new attribute("U1", new named_type(IFC4X3_RC3_types[731]), false));
        attributes.push_back(new attribute("V1", new named_type(IFC4X3_RC3_types[731]), false));
        attributes.push_back(new attribute("U2", new named_type(IFC4X3_RC3_types[731]), false));
        attributes.push_back(new attribute("V2", new named_type(IFC4X3_RC3_types[731]), false));
        attributes.push_back(new attribute("Usense", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Vsense", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[883])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("RecurrenceType", new named_type(IFC4X3_RC3_types[885]), false));
        attributes.push_back(new attribute("DayComponent", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[294])), true));
        attributes.push_back(new attribute("WeekdayComponent", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[295])), true));
        attributes.push_back(new attribute("MonthComponent", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[690])), true));
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("Interval", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("Occurrences", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("TimePeriods", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1212])), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[884])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("TypeIdentifier", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("AttributeIdentifier", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("InstanceName", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("ListPositions", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[556])), true));
        attributes.push_back(new attribute("InnerReference", new named_type(IFC4X3_RC3_types[886]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[886])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[888]), true));
        attributes.push_back(new attribute("RestartDistance", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[887])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("TimeStep", new named_type(IFC4X3_RC3_types[1210]), false));
        attributes.push_back(new attribute("Values", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1215])), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[890])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[892]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[891])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("TotalCrossSectionArea", new named_type(IFC4X3_RC3_types[59]), false));
        attributes.push_back(new attribute("SteelGrade", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("BarSurface", new named_type(IFC4X3_RC3_types[897]), true));
        attributes.push_back(new attribute("EffectiveDepth", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("NominalBarDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("BarCount", new named_type(IFC4X3_RC3_types[254]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[893])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("DefinitionType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("ReinforcementSectionDefinitions", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[997])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[894])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("CrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("BarLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[899]), true));
        attributes.push_back(new attribute("BarSurface", new named_type(IFC4X3_RC3_types[897]), true));
        std::vector<bool> derived; derived.reserve(14);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[895])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[899]), false));
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("CrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("BarLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("BarSurface", new named_type(IFC4X3_RC3_types[897]), true));
        attributes.push_back(new attribute("BendingShapeCode", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("BendingParameters", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[81])), true));
        std::vector<bool> derived; derived.reserve(16);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[898])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("SteelGrade", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[900])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[901])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(9);
        attributes.push_back(new attribute("MeshLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("MeshWidth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LongitudinalBarNominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TransverseBarNominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LongitudinalBarCrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("TransverseBarCrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("LongitudinalBarSpacing", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TransverseBarSpacing", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[904]), true));
        std::vector<bool> derived; derived.reserve(18);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[902])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(11);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[904]), false));
        attributes.push_back(new attribute("MeshLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("MeshWidth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LongitudinalBarNominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TransverseBarNominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LongitudinalBarCrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("TransverseBarCrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("LongitudinalBarSpacing", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TransverseBarSpacing", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("BendingShapeCode", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("BendingParameters", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[81])), true));
        std::vector<bool> derived; derived.reserve(20);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[903])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingObject", new named_type(IFC4X3_RC3_types[705]), false));
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[705])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[905])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[705])), false));
        attributes.push_back(new attribute("RelatedObjectsType", new named_type(IFC4X3_RC3_types[710]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[906])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingActor", new named_type(IFC4X3_RC3_types[6]), false));
        attributes.push_back(new attribute("ActingRole", new named_type(IFC4X3_RC3_types[7]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[907])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingControl", new named_type(IFC4X3_RC3_types[230]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[908])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingGroup", new named_type(IFC4X3_RC3_types[530]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[909])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Factor", new named_type(IFC4X3_RC3_types[876]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[910])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingProcess", new named_type(IFC4X3_RC3_types[807]), false));
        attributes.push_back(new attribute("QuantityInProcess", new named_type(IFC4X3_RC3_types[661]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[911])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingProduct", new named_type(IFC4X3_RC3_types[812]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[912])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingResource", new named_type(IFC4X3_RC3_types[965]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[913])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[298])), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[914])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingApproval", new named_type(IFC4X3_RC3_types[52]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[915])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingClassification", new named_type(IFC4X3_RC3_types[172]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[916])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Intent", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("RelatingConstraint", new named_type(IFC4X3_RC3_types[214]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[917])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingDocument", new named_type(IFC4X3_RC3_types[336]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[918])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingLibrary", new named_type(IFC4X3_RC3_types[592]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[919])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingMaterial", new named_type(IFC4X3_RC3_types[658]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[920])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RelatingProfileDef", new named_type(IFC4X3_RC3_types[813]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[921])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[923])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("ConnectionGeometry", new named_type(IFC4X3_RC3_types[208]), true));
        attributes.push_back(new attribute("RelatingElement", new named_type(IFC4X3_RC3_types[399]), false));
        attributes.push_back(new attribute("RelatedElement", new named_type(IFC4X3_RC3_types[399]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[924])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("RelatingPriorities", new aggregation_type(aggregation_type::list_type, 0, -1, new named_type(IFC4X3_RC3_types[556])), false));
        attributes.push_back(new attribute("RelatedPriorities", new aggregation_type(aggregation_type::list_type, 0, -1, new named_type(IFC4X3_RC3_types[556])), false));
        attributes.push_back(new attribute("RelatedConnectionType", new named_type(IFC4X3_RC3_types[212]), false));
        attributes.push_back(new attribute("RelatingConnectionType", new named_type(IFC4X3_RC3_types[212]), false));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[925])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingPort", new named_type(IFC4X3_RC3_types[782]), false));
        attributes.push_back(new attribute("RelatedElement", new named_type(IFC4X3_RC3_types[324]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[927])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("RelatingPort", new named_type(IFC4X3_RC3_types[782]), false));
        attributes.push_back(new attribute("RelatedPort", new named_type(IFC4X3_RC3_types[782]), false));
        attributes.push_back(new attribute("RealizingElement", new named_type(IFC4X3_RC3_types[399]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[926])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingElement", new named_type(IFC4X3_RC3_types[1082]), false));
        attributes.push_back(new attribute("RelatedStructuralActivity", new named_type(IFC4X3_RC3_types[1081]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[928])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("RelatingStructuralMember", new named_type(IFC4X3_RC3_types[1108]), false));
        attributes.push_back(new attribute("RelatedStructuralConnection", new named_type(IFC4X3_RC3_types[1084]), false));
        attributes.push_back(new attribute("AppliedCondition", new named_type(IFC4X3_RC3_types[94]), true));
        attributes.push_back(new attribute("AdditionalConditions", new named_type(IFC4X3_RC3_types[1085]), true));
        attributes.push_back(new attribute("SupportedLength", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ConditionCoordinateSystem", new named_type(IFC4X3_RC3_types[70]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[929])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ConnectionConstraint", new named_type(IFC4X3_RC3_types[208]), false));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[930])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RealizingElements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[399])), false));
        attributes.push_back(new attribute("ConnectionType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[931])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedElements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[808])), false));
        attributes.push_back(new attribute("RelatingStructure", new named_type(IFC4X3_RC3_types[1055]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[932])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingBuildingElement", new named_type(IFC4X3_RC3_types[399]), false));
        attributes.push_back(new attribute("RelatedCoverings", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[258])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[933])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingSpace", new named_type(IFC4X3_RC3_types[1048]), false));
        attributes.push_back(new attribute("RelatedCoverings", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[258])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[934])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingContext", new named_type(IFC4X3_RC3_types[227]), false));
        attributes.push_back(new attribute("RelatedDefinitions", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[298])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[935])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[936])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[937])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[704])), false));
        attributes.push_back(new attribute("RelatingObject", new named_type(IFC4X3_RC3_types[704]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[938])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[705])), false));
        attributes.push_back(new attribute("RelatingPropertyDefinition", new named_type(IFC4X3_RC3_types[835]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[939])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedPropertySets", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[834])), false));
        attributes.push_back(new attribute("RelatingTemplate", new named_type(IFC4X3_RC3_types[837]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[940])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[704])), false));
        attributes.push_back(new attribute("RelatingType", new named_type(IFC4X3_RC3_types[1244]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[941])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingOpeningElement", new named_type(IFC4X3_RC3_types[718]), false));
        attributes.push_back(new attribute("RelatedBuildingElement", new named_type(IFC4X3_RC3_types[399]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[942])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedControlElements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[322])), false));
        attributes.push_back(new attribute("RelatingFlowElement", new named_type(IFC4X3_RC3_types[326]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[943])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RelatingElement", new named_type(IFC4X3_RC3_types[561]), false));
        attributes.push_back(new attribute("RelatedElement", new named_type(IFC4X3_RC3_types[561]), false));
        attributes.push_back(new attribute("InterferenceGeometry", new named_type(IFC4X3_RC3_types[208]), true));
        attributes.push_back(new attribute("InterferenceType", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("ImpliedOrder", new named_type(IFC4X3_RC3_types[621]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[944])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingObject", new named_type(IFC4X3_RC3_types[705]), false));
        attributes.push_back(new attribute("RelatedObjects", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[705])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[945])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingPositioningElement", new named_type(IFC4X3_RC3_types[783]), false));
        attributes.push_back(new attribute("RelatedProducts", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[808])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[946])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingElement", new named_type(IFC4X3_RC3_types[399]), false));
        attributes.push_back(new attribute("RelatedFeatureElement", new named_type(IFC4X3_RC3_types[460]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[947])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedElements", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1057])), false));
        attributes.push_back(new attribute("RelatingStructure", new named_type(IFC4X3_RC3_types[1055]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[948])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RelatingProcess", new named_type(IFC4X3_RC3_types[806]), false));
        attributes.push_back(new attribute("RelatedProcess", new named_type(IFC4X3_RC3_types[806]), false));
        attributes.push_back(new attribute("TimeLag", new named_type(IFC4X3_RC3_types[582]), true));
        attributes.push_back(new attribute("SequenceType", new named_type(IFC4X3_RC3_types[1005]), true));
        attributes.push_back(new attribute("UserDefinedSequenceType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[949])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingSystem", new named_type(IFC4X3_RC3_types[1154]), false));
        attributes.push_back(new attribute("RelatedBuildings", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1055])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[950])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RelatingSpace", new named_type(IFC4X3_RC3_types[1049]), false));
        attributes.push_back(new attribute("RelatedBuildingElement", new named_type(IFC4X3_RC3_types[399]), false));
        attributes.push_back(new attribute("ConnectionGeometry", new named_type(IFC4X3_RC3_types[208]), true));
        attributes.push_back(new attribute("PhysicalOrVirtualBoundary", new named_type(IFC4X3_RC3_types[747]), false));
        attributes.push_back(new attribute("InternalOrExternalBoundary", new named_type(IFC4X3_RC3_types[562]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[951])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ParentBoundary", new named_type(IFC4X3_RC3_types[952]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[952])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("CorrespondingBoundary", new named_type(IFC4X3_RC3_types[953]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[953])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingBuildingElement", new named_type(IFC4X3_RC3_types[399]), false));
        attributes.push_back(new attribute("RelatedOpeningElement", new named_type(IFC4X3_RC3_types[461]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[954])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[922])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ParamLength", new named_type(IFC4X3_RC3_types[731]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[955])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("ContextOfItems", new named_type(IFC4X3_RC3_types[957]), false));
        attributes.push_back(new attribute("RepresentationIdentifier", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("RepresentationType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Items", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[958])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[956])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ContextIdentifier", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("ContextType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[957])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[958])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MappingOrigin", new named_type(IFC4X3_RC3_types[68]), false));
        attributes.push_back(new attribute("MappedRepresentation", new named_type(IFC4X3_RC3_types[956]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[959])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[960])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatedResourceObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[964])), false));
        attributes.push_back(new attribute("RelatingApproval", new named_type(IFC4X3_RC3_types[52]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[961])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RelatingConstraint", new named_type(IFC4X3_RC3_types[214]), false));
        attributes.push_back(new attribute("RelatedResourceObjects", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[964])), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[962])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[963])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(15);
        attributes.push_back(new attribute("ScheduleWork", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("ScheduleUsage", new named_type(IFC4X3_RC3_types[787]), true));
        attributes.push_back(new attribute("ScheduleStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ScheduleFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ScheduleContour", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("LevelingDelay", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("IsOverAllocated", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("StatusTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ActualWork", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("ActualUsage", new named_type(IFC4X3_RC3_types[787]), true));
        attributes.push_back(new attribute("ActualStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ActualFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("RemainingWork", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("RemainingUsage", new named_type(IFC4X3_RC3_types[787]), true));
        attributes.push_back(new attribute("Completion", new named_type(IFC4X3_RC3_types[787]), true));
        std::vector<bool> derived; derived.reserve(18);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[966])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[67]), false));
        attributes.push_back(new attribute("Angle", new named_type(IFC4X3_RC3_types[766]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[967])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("EndSweptArea", new named_type(IFC4X3_RC3_types[813]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[968])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Height", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("BottomRadius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[969])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Height", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[970])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[973]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[971])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[977]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[975])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[977]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[976])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("GlobalId", new named_type(IFC4X3_RC3_types[522]), false));
        attributes.push_back(new attribute("OwnerHistory", new named_type(IFC4X3_RC3_types[729]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[978])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("RoundingRadius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[983])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Prefix", new named_type(IFC4X3_RC3_types[1026]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[1029]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(true); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1028])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[986]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[984])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[986]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[985])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("DataOrigin", new named_type(IFC4X3_RC3_types[291]), true));
        attributes.push_back(new attribute("UserDefinedDataOrigin", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[987])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[988])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("QuadraticTerm", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("LinearTerm", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ConstantTerm", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[989])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("SectionType", new named_type(IFC4X3_RC3_types[998]), false));
        attributes.push_back(new attribute("StartProfile", new named_type(IFC4X3_RC3_types[813]), false));
        attributes.push_back(new attribute("EndProfile", new named_type(IFC4X3_RC3_types[813]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[996])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("LongitudinalStartPosition", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("LongitudinalEndPosition", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("TransversePosition", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ReinforcementRole", new named_type(IFC4X3_RC3_types[896]), false));
        attributes.push_back(new attribute("SectionDefinition", new named_type(IFC4X3_RC3_types[996]), false));
        attributes.push_back(new attribute("CrossSectionReinforcementDefinitions", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[893])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[997])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Directrix", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("CrossSections", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[813])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[991])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("CrossSectionPositions", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[71])), false));
        attributes.push_back(new attribute("FixedAxisVertical", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[992])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("SpineCurve", new named_type(IFC4X3_RC3_types[194]), false));
        attributes.push_back(new attribute("CrossSections", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[813])), false));
        attributes.push_back(new attribute("CrossSectionPositions", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[70])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[993])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Directrix", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("CrossSectionPositions", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[773])), false));
        attributes.push_back(new attribute("CrossSections", new aggregation_type(aggregation_type::list_type, 2, -1, new named_type(IFC4X3_RC3_types[813])), false));
        attributes.push_back(new attribute("FixedAxisVertical", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[994])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Transition", new named_type(IFC4X3_RC3_types[1227]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[999])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("BaseCurve", new named_type(IFC4X3_RC3_types[100]), false));
        attributes.push_back(new attribute("EndPoint", new named_type(IFC4X3_RC3_types[761]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1000])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1004]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1002])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1004]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1003])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1008]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1006])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1008]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1007])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("ShapeRepresentations", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1010])), false));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("ProductDefinitional", new named_type(IFC4X3_RC3_types[621]), false));
        attributes.push_back(new attribute("PartOfProductDefinitionShape", new named_type(IFC4X3_RC3_types[811]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1009])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1010])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1011])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("SbsmBoundary", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1013])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1014])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1020]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1015])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1020]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1019])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1018]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1016])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1018]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1017])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1021])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("TemplateType", new named_type(IFC4X3_RC3_types[1023]), true));
        attributes.push_back(new attribute("PrimaryMeasureType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("SecondaryMeasureType", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Enumerators", new named_type(IFC4X3_RC3_types[830]), true));
        attributes.push_back(new attribute("PrimaryUnit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("SecondaryUnit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("Expression", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("AccessState", new named_type(IFC4X3_RC3_types[1079]), true));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1022])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SineTerm", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("LinearTerm", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1025])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RefLatitude", new named_type(IFC4X3_RC3_types[198]), true));
        attributes.push_back(new attribute("RefLongitude", new named_type(IFC4X3_RC3_types[198]), true));
        attributes.push_back(new attribute("RefElevation", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LandTitleNumber", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("SiteAddress", new named_type(IFC4X3_RC3_types[788]), true));
        std::vector<bool> derived; derived.reserve(14);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1027])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1035]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1031])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1032])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1033])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1035]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1034])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("SlippageX", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("SlippageY", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("SlippageZ", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1036])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1039]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1037])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1039]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1038])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[1041])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1043])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1054]), true));
        attributes.push_back(new attribute("ElevationWithFlooring", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1048])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1052]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1050])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1052]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1051])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1054]), false));
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1053])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1055])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ElementType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1056])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("CompositionType", new named_type(IFC4X3_RC3_types[406]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1058])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1059])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1062]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1060])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1062]), false));
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1061])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1067])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1068])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[68]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1069])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1072]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1070])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1072]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1071])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1078]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1073])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("NumberOfRisers", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("NumberOfTreads", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("RiserHeight", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("TreadLength", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1076]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1074])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1076]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1075])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1078]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1077])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("DestabilizingLoad", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1080])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("AppliedLoad", new named_type(IFC4X3_RC3_types[1095]), false));
        attributes.push_back(new attribute("GlobalOrLocal", new named_type(IFC4X3_RC3_types[523]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1081])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[43]), false));
        attributes.push_back(new attribute("OrientationOf2DPlane", new named_type(IFC4X3_RC3_types[70]), true));
        attributes.push_back(new attribute("LoadedBy", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1098])), true));
        attributes.push_back(new attribute("HasResults", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1114])), true));
        attributes.push_back(new attribute("SharedPlacement", new named_type(IFC4X3_RC3_types[708]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1083])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("AppliedCondition", new named_type(IFC4X3_RC3_types[94]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1084])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1085])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ProjectedOrTrue", new named_type(IFC4X3_RC3_types[818]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1087]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1086])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[307]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1088])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1090]), false));
        attributes.push_back(new attribute("Axis", new named_type(IFC4X3_RC3_types[307]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1089])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1091])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1087]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1092])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1093])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1094])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1095])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("SelfWeightCoefficients", new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[876])), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1096])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Values", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1100])), false));
        attributes.push_back(new attribute("Locations", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 1, 2, new named_type(IFC4X3_RC3_types[589]))), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1097])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[619]), false));
        attributes.push_back(new attribute("ActionType", new named_type(IFC4X3_RC3_types[5]), false));
        attributes.push_back(new attribute("ActionSource", new named_type(IFC4X3_RC3_types[4]), false));
        attributes.push_back(new attribute("Coefficient", new named_type(IFC4X3_RC3_types[876]), true));
        attributes.push_back(new attribute("Purpose", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1098])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("LinearForceX", new named_type(IFC4X3_RC3_types[609]), true));
        attributes.push_back(new attribute("LinearForceY", new named_type(IFC4X3_RC3_types[609]), true));
        attributes.push_back(new attribute("LinearForceZ", new named_type(IFC4X3_RC3_types[609]), true));
        attributes.push_back(new attribute("LinearMomentX", new named_type(IFC4X3_RC3_types[610]), true));
        attributes.push_back(new attribute("LinearMomentY", new named_type(IFC4X3_RC3_types[610]), true));
        attributes.push_back(new attribute("LinearMomentZ", new named_type(IFC4X3_RC3_types[610]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1099])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1100])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("PlanarForceX", new named_type(IFC4X3_RC3_types[764]), true));
        attributes.push_back(new attribute("PlanarForceY", new named_type(IFC4X3_RC3_types[764]), true));
        attributes.push_back(new attribute("PlanarForceZ", new named_type(IFC4X3_RC3_types[764]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1101])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("DisplacementX", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("DisplacementY", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("DisplacementZ", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("RotationalDisplacementRX", new named_type(IFC4X3_RC3_types[766]), true));
        attributes.push_back(new attribute("RotationalDisplacementRY", new named_type(IFC4X3_RC3_types[766]), true));
        attributes.push_back(new attribute("RotationalDisplacementRZ", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1102])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Distortion", new named_type(IFC4X3_RC3_types[272]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1103])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("ForceX", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("ForceY", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("ForceZ", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("MomentX", new named_type(IFC4X3_RC3_types[1220]), true));
        attributes.push_back(new attribute("MomentY", new named_type(IFC4X3_RC3_types[1220]), true));
        attributes.push_back(new attribute("MomentZ", new named_type(IFC4X3_RC3_types[1220]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1104])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("WarpingMoment", new named_type(IFC4X3_RC3_types[1289]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1105])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1106])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("DeltaTConstant", new named_type(IFC4X3_RC3_types[1207]), true));
        attributes.push_back(new attribute("DeltaTY", new named_type(IFC4X3_RC3_types[1207]), true));
        attributes.push_back(new attribute("DeltaTZ", new named_type(IFC4X3_RC3_types[1207]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1107])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1108])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1109])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1110])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ConditionCoordinateSystem", new named_type(IFC4X3_RC3_types[70]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1111])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1112])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1113])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("TheoryType", new named_type(IFC4X3_RC3_types[44]), false));
        attributes.push_back(new attribute("ResultForLoadGroup", new named_type(IFC4X3_RC3_types[1098]), true));
        attributes.push_back(new attribute("IsLinear", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1114])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ProjectedOrTrue", new named_type(IFC4X3_RC3_types[818]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1116]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1115])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1117])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1119]), false));
        attributes.push_back(new attribute("Thickness", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1118])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1120])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1116]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1121])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1124])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Item", new named_type(IFC4X3_RC3_types[958]), true));
        attributes.push_back(new attribute("Styles", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[801])), false));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1122])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1123])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1127]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1125])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1127]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1126])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ParentEdge", new named_type(IFC4X3_RC3_types[369]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1128])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[1129])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Curve3D", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("AssociatedGeometry", new aggregation_type(aggregation_type::list_type, 1, 2, new named_type(IFC4X3_RC3_types[736])), false));
        attributes.push_back(new attribute("MasterRepresentation", new named_type(IFC4X3_RC3_types[796]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1130])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ReferenceSurface", new named_type(IFC4X3_RC3_types[1129]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1131])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1133]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1132])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ExtrudedDirection", new named_type(IFC4X3_RC3_types[307]), false));
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1134])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("AxisPosition", new named_type(IFC4X3_RC3_types[67]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1135])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("SurfaceReinforcement1", new aggregation_type(aggregation_type::list_type, 2, 3, new named_type(IFC4X3_RC3_types[589])), true));
        attributes.push_back(new attribute("SurfaceReinforcement2", new aggregation_type(aggregation_type::list_type, 2, 3, new named_type(IFC4X3_RC3_types[589])), true));
        attributes.push_back(new attribute("ShearReinforcement", new named_type(IFC4X3_RC3_types[876]), true));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1137])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Side", new named_type(IFC4X3_RC3_types[1138]), false));
        attributes.push_back(new attribute("Styles", new aggregation_type(aggregation_type::set_type, 1, 5, new named_type(IFC4X3_RC3_types[1140])), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1139])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("DiffuseTransmissionColour", new named_type(IFC4X3_RC3_types[180]), false));
        attributes.push_back(new attribute("DiffuseReflectionColour", new named_type(IFC4X3_RC3_types[180]), false));
        attributes.push_back(new attribute("TransmissionColour", new named_type(IFC4X3_RC3_types[180]), false));
        attributes.push_back(new attribute("ReflectanceColour", new named_type(IFC4X3_RC3_types[180]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1141])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RefractionIndex", new named_type(IFC4X3_RC3_types[879]), true));
        attributes.push_back(new attribute("DispersionFactor", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1142])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("DiffuseColour", new named_type(IFC4X3_RC3_types[179]), true));
        attributes.push_back(new attribute("TransmissionColour", new named_type(IFC4X3_RC3_types[179]), true));
        attributes.push_back(new attribute("DiffuseTransmissionColour", new named_type(IFC4X3_RC3_types[179]), true));
        attributes.push_back(new attribute("ReflectionColour", new named_type(IFC4X3_RC3_types[179]), true));
        attributes.push_back(new attribute("SpecularColour", new named_type(IFC4X3_RC3_types[179]), true));
        attributes.push_back(new attribute("SpecularHighlight", new named_type(IFC4X3_RC3_types[1065]), true));
        attributes.push_back(new attribute("ReflectanceMethod", new named_type(IFC4X3_RC3_types[889]), false));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1143])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SurfaceColour", new named_type(IFC4X3_RC3_types[180]), false));
        attributes.push_back(new attribute("Transparency", new named_type(IFC4X3_RC3_types[702]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1144])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Textures", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1146])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1145])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("RepeatS", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("RepeatT", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Mode", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("TextureTransform", new named_type(IFC4X3_RC3_types[152]), true));
        attributes.push_back(new attribute("Parameter", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[541])), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1146])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SweptArea", new named_type(IFC4X3_RC3_types[813]), false));
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1147])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Directrix", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("Radius", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("InnerRadius", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("StartParam", new named_type(IFC4X3_RC3_types[731]), true));
        attributes.push_back(new attribute("EndParam", new named_type(IFC4X3_RC3_types[731]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1148])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1149])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("SweptCurve", new named_type(IFC4X3_RC3_types[813]), false));
        attributes.push_back(new attribute("Position", new named_type(IFC4X3_RC3_types[70]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1150])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1153]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1151])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1153]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1152])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1154])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1157]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1155])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1157]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1156])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(9);
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WebThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("FlangeEdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("WebEdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("WebSlope", new named_type(IFC4X3_RC3_types[766]), true));
        attributes.push_back(new attribute("FlangeSlope", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1240])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Rows", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1160])), true));
        attributes.push_back(new attribute("Columns", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1159])), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1158])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("Identifier", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        attributes.push_back(new attribute("ReferencePath", new named_type(IFC4X3_RC3_types[886]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1159])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RowCells", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), true));
        attributes.push_back(new attribute("IsHeading", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1160])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1163]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1161])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1163]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1162])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Status", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("WorkMethod", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("IsMilestone", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Priority", new named_type(IFC4X3_RC3_types[556]), true));
        attributes.push_back(new attribute("TaskTime", new named_type(IFC4X3_RC3_types[1166]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1169]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1164])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(17);
        attributes.push_back(new attribute("DurationType", new named_type(IFC4X3_RC3_types[1165]), true));
        attributes.push_back(new attribute("ScheduleDuration", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("ScheduleStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ScheduleFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("EarlyStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("EarlyFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("LateStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("LateFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("FreeFloat", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("TotalFloat", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("IsCritical", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("StatusTime", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ActualDuration", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("ActualStart", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("ActualFinish", new named_type(IFC4X3_RC3_types[293]), true));
        attributes.push_back(new attribute("RemainingTime", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("Completion", new named_type(IFC4X3_RC3_types[787]), true));
        std::vector<bool> derived; derived.reserve(20);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1166])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Recurrence", new named_type(IFC4X3_RC3_types[884]), false));
        std::vector<bool> derived; derived.reserve(21);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1167])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1169]), false));
        attributes.push_back(new attribute("WorkMethod", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(11);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1168])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("TelephoneNumbers", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("FacsimileNumbers", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("PagerNumber", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("ElectronicMailAddresses", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[578])), true));
        attributes.push_back(new attribute("WWWHomePageURL", new named_type(IFC4X3_RC3_types[1257]), true));
        attributes.push_back(new attribute("MessagingIDs", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1257])), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1170])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1181]), true));
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("CrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("TensionForce", new named_type(IFC4X3_RC3_types[500]), true));
        attributes.push_back(new attribute("PreStress", new named_type(IFC4X3_RC3_types[802]), true));
        attributes.push_back(new attribute("FrictionCoefficient", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("AnchorageSlip", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("MinCurvatureRadius", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(17);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1173])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1176]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1174])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1176]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1175])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1179]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1177])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1179]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1178])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1181]), false));
        attributes.push_back(new attribute("NominalDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("CrossSectionArea", new named_type(IFC4X3_RC3_types[59]), true));
        attributes.push_back(new attribute("SheathDiameter", new named_type(IFC4X3_RC3_types[785]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1180])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Coordinates", new named_type(IFC4X3_RC3_types[150]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1182])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[1183])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Literal", new named_type(IFC4X3_RC3_types[797]), false));
        attributes.push_back(new attribute("Placement", new named_type(IFC4X3_RC3_types[68]), false));
        attributes.push_back(new attribute("Path", new named_type(IFC4X3_RC3_types[1191]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1189])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Extent", new named_type(IFC4X3_RC3_types[763]), false));
        attributes.push_back(new attribute("BoxAlignment", new named_type(IFC4X3_RC3_types[103]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1190])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("TextCharacterAppearance", new named_type(IFC4X3_RC3_types[1194]), true));
        attributes.push_back(new attribute("TextStyle", new named_type(IFC4X3_RC3_types[1195]), true));
        attributes.push_back(new attribute("TextFontStyle", new named_type(IFC4X3_RC3_types[1188]), false));
        attributes.push_back(new attribute("ModelOrDraughting", new named_type(IFC4X3_RC3_types[88]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1192])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("FontFamily", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1187])), false));
        attributes.push_back(new attribute("FontStyle", new named_type(IFC4X3_RC3_types[494]), true));
        attributes.push_back(new attribute("FontVariant", new named_type(IFC4X3_RC3_types[495]), true));
        attributes.push_back(new attribute("FontWeight", new named_type(IFC4X3_RC3_types[496]), true));
        attributes.push_back(new attribute("FontSize", new named_type(IFC4X3_RC3_types[1030]), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1193])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Colour", new named_type(IFC4X3_RC3_types[178]), false));
        attributes.push_back(new attribute("BackgroundColour", new named_type(IFC4X3_RC3_types[178]), true));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1194])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("TextIndent", new named_type(IFC4X3_RC3_types[1030]), true));
        attributes.push_back(new attribute("TextAlign", new named_type(IFC4X3_RC3_types[1185]), true));
        attributes.push_back(new attribute("TextDecoration", new named_type(IFC4X3_RC3_types[1186]), true));
        attributes.push_back(new attribute("LetterSpacing", new named_type(IFC4X3_RC3_types[1030]), true));
        attributes.push_back(new attribute("WordSpacing", new named_type(IFC4X3_RC3_types[1030]), true));
        attributes.push_back(new attribute("TextTransform", new named_type(IFC4X3_RC3_types[1196]), true));
        attributes.push_back(new attribute("LineHeight", new named_type(IFC4X3_RC3_types[1030]), true));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1195])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Maps", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1146])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1197])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Mode", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Parameter", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[879])), true));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1198])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Vertices", new aggregation_type(aggregation_type::list_type, 3, -1, new named_type(IFC4X3_RC3_types[1200])), false));
        attributes.push_back(new attribute("MappedTo", new named_type(IFC4X3_RC3_types[440]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1199])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Coordinates", new aggregation_type(aggregation_type::list_type, 2, 2, new named_type(IFC4X3_RC3_types[731])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1200])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("TexCoordsList", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 2, 2, new named_type(IFC4X3_RC3_types[731]))), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1201])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("QubicTerm", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("QuadraticTerm", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LinearTerm", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("ConstantTerm", new named_type(IFC4X3_RC3_types[879]), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1208])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("StartTime", new named_type(IFC4X3_RC3_types[1209]), false));
        attributes.push_back(new attribute("EndTime", new named_type(IFC4X3_RC3_types[1209]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1212])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(8);
        attributes.push_back(new attribute("Name", new named_type(IFC4X3_RC3_types[578]), false));
        attributes.push_back(new attribute("Description", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("StartTime", new named_type(IFC4X3_RC3_types[293]), false));
        attributes.push_back(new attribute("EndTime", new named_type(IFC4X3_RC3_types[293]), false));
        attributes.push_back(new attribute("TimeSeriesDataType", new named_type(IFC4X3_RC3_types[1214]), false));
        attributes.push_back(new attribute("DataOrigin", new named_type(IFC4X3_RC3_types[291]), false));
        attributes.push_back(new attribute("UserDefinedDataOrigin", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Unit", new named_type(IFC4X3_RC3_types[1248]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1213])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("ListValues", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[1259])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1215])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[1217])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1218])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("MajorRadius", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("MinorRadius", new named_type(IFC4X3_RC3_types[785]), false));
        std::vector<bool> derived; derived.reserve(3);
        derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1219])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1223]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1221])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1223]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1222])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1226]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1224])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1226]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1225])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1233]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1229])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1233]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1232])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("BottomXDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("TopXDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("YDim", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("TopXOffset", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(7);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1234])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("Normals", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[731]))), true));
        attributes.push_back(new attribute("Closed", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("CoordIndex", new aggregation_type(aggregation_type::list_type, 1, -1, new aggregation_type(aggregation_type::list_type, 3, 3, new named_type(IFC4X3_RC3_types[784]))), false));
        attributes.push_back(new attribute("PnIndex", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[784])), true));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1235])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Flags", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[556])), false));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1236])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("BasisCurve", new named_type(IFC4X3_RC3_types[273]), false));
        attributes.push_back(new attribute("Trim1", new aggregation_type(aggregation_type::set_type, 1, 2, new named_type(IFC4X3_RC3_types[1239])), false));
        attributes.push_back(new attribute("Trim2", new aggregation_type(aggregation_type::set_type, 1, 2, new named_type(IFC4X3_RC3_types[1239])), false));
        attributes.push_back(new attribute("SenseAgreement", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("MasterRepresentation", new named_type(IFC4X3_RC3_types[1238]), false));
        std::vector<bool> derived; derived.reserve(5);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1237])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1243]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1241])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1243]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1242])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("ApplicableOccurrence", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("HasPropertySets", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[834])), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1244])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("ProcessType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1245])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("RepresentationMaps", new aggregation_type(aggregation_type::list_type, 1, -1, new named_type(IFC4X3_RC3_types[959])), true));
        attributes.push_back(new attribute("Tag", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1246])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("Identification", new named_type(IFC4X3_RC3_types[541]), true));
        attributes.push_back(new attribute("LongDescription", new named_type(IFC4X3_RC3_types[1184]), true));
        attributes.push_back(new attribute("ResourceType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1247])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WebThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("EdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("FlangeSlope", new named_type(IFC4X3_RC3_types[766]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1258])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("Units", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1248])), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1255])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1251]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1249])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1251]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1250])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1254]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1252])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1254]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1253])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1262]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1260])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1262]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1261])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("Orientation", new named_type(IFC4X3_RC3_types[307]), false));
        attributes.push_back(new attribute("Magnitude", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1264])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(0);
        
        ((entity*)IFC4X3_RC3_types[1266])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("LoopVertex", new named_type(IFC4X3_RC3_types[1266]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1267])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("VertexGeometry", new named_type(IFC4X3_RC3_types[772]), false));
        std::vector<bool> derived; derived.reserve(1);
        derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1268])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1271]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1269])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1271]), true));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1270])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1274]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1272])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1274]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1273])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("StartCurvature", new named_type(IFC4X3_RC3_types[272]), false));
        attributes.push_back(new attribute("EndCurvature", new named_type(IFC4X3_RC3_types[272]), false));
        attributes.push_back(new attribute("GravityCenterHeight", new named_type(IFC4X3_RC3_types[589]), false));
        attributes.push_back(new attribute("SegmentLength", new named_type(IFC4X3_RC3_types[589]), false));
        std::vector<bool> derived; derived.reserve(4);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1275])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1276])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new attribute("IntersectingAxes", new aggregation_type(aggregation_type::list_type, 2, 2, new named_type(IFC4X3_RC3_types[526])), false));
        attributes.push_back(new attribute("OffsetDistances", new aggregation_type(aggregation_type::list_type, 2, 3, new named_type(IFC4X3_RC3_types[589])), false));
        std::vector<bool> derived; derived.reserve(2);
        derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1277])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1280])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1279]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1278])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1287]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1283])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1284])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1285])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1287]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1286])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1293]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1291])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1293]), false));
        std::vector<bool> derived; derived.reserve(10);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1292])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(8);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1294])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("OverallHeight", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("OverallWidth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1305]), true));
        attributes.push_back(new attribute("PartitioningType", new named_type(IFC4X3_RC3_types[1306]), true));
        attributes.push_back(new attribute("UserDefinedPartitioningType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1295])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(12);
        attributes.push_back(new attribute("LiningDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("LiningThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("TransomThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("MullionThickness", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("FirstTransomOffset", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("SecondTransomOffset", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("FirstMullionOffset", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("SecondMullionOffset", new named_type(IFC4X3_RC3_types[702]), true));
        attributes.push_back(new attribute("ShapeAspectStyle", new named_type(IFC4X3_RC3_types[1009]), true));
        attributes.push_back(new attribute("LiningOffset", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LiningToPanelOffsetX", new named_type(IFC4X3_RC3_types[589]), true));
        attributes.push_back(new attribute("LiningToPanelOffsetY", new named_type(IFC4X3_RC3_types[589]), true));
        std::vector<bool> derived; derived.reserve(16);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1296])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[1297]), false));
        attributes.push_back(new attribute("PanelPosition", new named_type(IFC4X3_RC3_types[1298]), false));
        attributes.push_back(new attribute("FrameDepth", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("FrameThickness", new named_type(IFC4X3_RC3_types[785]), true));
        attributes.push_back(new attribute("ShapeAspectStyle", new named_type(IFC4X3_RC3_types[1009]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1299])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(0);
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1300])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("ConstructionType", new named_type(IFC4X3_RC3_types[1302]), false));
        attributes.push_back(new attribute("OperationType", new named_type(IFC4X3_RC3_types[1303]), false));
        attributes.push_back(new attribute("ParameterTakesPrecedence", new named_type(IFC4X3_RC3_types[88]), false));
        attributes.push_back(new attribute("Sizeable", new named_type(IFC4X3_RC3_types[88]), false));
        std::vector<bool> derived; derived.reserve(12);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1301])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1305]), false));
        attributes.push_back(new attribute("PartitioningType", new named_type(IFC4X3_RC3_types[1306]), false));
        attributes.push_back(new attribute("ParameterTakesPrecedence", new named_type(IFC4X3_RC3_types[88]), true));
        attributes.push_back(new attribute("UserDefinedPartitioningType", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1304])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("WorkingTimes", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1314])), true));
        attributes.push_back(new attribute("ExceptionTimes", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[1314])), true));
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1308]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1307])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new attribute("CreationDate", new named_type(IFC4X3_RC3_types[293]), false));
        attributes.push_back(new attribute("Creators", new aggregation_type(aggregation_type::set_type, 1, -1, new named_type(IFC4X3_RC3_types[743])), true));
        attributes.push_back(new attribute("Purpose", new named_type(IFC4X3_RC3_types[578]), true));
        attributes.push_back(new attribute("Duration", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("TotalFloat", new named_type(IFC4X3_RC3_types[362]), true));
        attributes.push_back(new attribute("StartTime", new named_type(IFC4X3_RC3_types[293]), false));
        attributes.push_back(new attribute("FinishTime", new named_type(IFC4X3_RC3_types[293]), true));
        std::vector<bool> derived; derived.reserve(13);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1309])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1311]), true));
        std::vector<bool> derived; derived.reserve(14);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1310])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("PredefinedType", new named_type(IFC4X3_RC3_types[1313]), true));
        std::vector<bool> derived; derived.reserve(14);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1312])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new attribute("RecurrencePattern", new named_type(IFC4X3_RC3_types[884]), true));
        attributes.push_back(new attribute("Start", new named_type(IFC4X3_RC3_types[292]), true));
        attributes.push_back(new attribute("Finish", new named_type(IFC4X3_RC3_types[292]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1314])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new attribute("Depth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeWidth", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("WebThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FlangeThickness", new named_type(IFC4X3_RC3_types[785]), false));
        attributes.push_back(new attribute("FilletRadius", new named_type(IFC4X3_RC3_types[701]), true));
        attributes.push_back(new attribute("EdgeRadius", new named_type(IFC4X3_RC3_types[701]), true));
        std::vector<bool> derived; derived.reserve(9);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1316])->set_attributes(attributes, derived);
    }
    {
        std::vector<const attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new attribute("LongName", new named_type(IFC4X3_RC3_types[578]), true));
        std::vector<bool> derived; derived.reserve(6);
        derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false); derived.push_back(false);
        ((entity*)IFC4X3_RC3_types[1315])->set_attributes(attributes, derived);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("IsActingUpon", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[907]), ((entity*) IFC4X3_RC3_types[907])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[6])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[7])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("OfPerson", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[743]), ((entity*) IFC4X3_RC3_types[743])->attributes()[7]));
        attributes.push_back(new inverse_attribute("OfOrganization", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[722]), ((entity*) IFC4X3_RC3_types[722])->attributes()[4]));
        ((entity*) IFC4X3_RC3_types[12])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ContainedInStructure", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[932]), ((entity*) IFC4X3_RC3_types[932])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[46])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[50])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(5);
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ApprovedObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[915]), ((entity*) IFC4X3_RC3_types[915])->attributes()[0]));
        attributes.push_back(new inverse_attribute("ApprovedResources", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[961]), ((entity*) IFC4X3_RC3_types[961])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsRelatedWith", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[53]), ((entity*) IFC4X3_RC3_types[53])->attributes()[1]));
        attributes.push_back(new inverse_attribute("Relates", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[53]), ((entity*) IFC4X3_RC3_types[53])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[52])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("ClassificationForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[916]), ((entity*) IFC4X3_RC3_types[916])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[170]), ((entity*) IFC4X3_RC3_types[170])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[169])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("ClassificationRefForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[916]), ((entity*) IFC4X3_RC3_types[916])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[170]), ((entity*) IFC4X3_RC3_types[170])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[170])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        attributes.push_back(new inverse_attribute("PropertiesForConstraint", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[962]), ((entity*) IFC4X3_RC3_types[962])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[214])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("IsDefinedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[939]), ((entity*) IFC4X3_RC3_types[939])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Declares", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[935]), ((entity*) IFC4X3_RC3_types[935])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[227])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[229])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("Controls", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[908]), ((entity*) IFC4X3_RC3_types[908])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[230])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[234])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasCoordinateOperation", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[245]), ((entity*) IFC4X3_RC3_types[245])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[246])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("CoversSpaces", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[934]), ((entity*) IFC4X3_RC3_types[934])->attributes()[1]));
        attributes.push_back(new inverse_attribute("CoversElements", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[933]), ((entity*) IFC4X3_RC3_types[933])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[258])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("AssignedToFlowElement", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[943]), ((entity*) IFC4X3_RC3_types[943])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[322])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasPorts", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[927]), ((entity*) IFC4X3_RC3_types[927])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[324])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasControlElements", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[943]), ((entity*) IFC4X3_RC3_types[943])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[326])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new inverse_attribute("DocumentInfoForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[918]), ((entity*) IFC4X3_RC3_types[918])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasDocumentReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[335]), ((entity*) IFC4X3_RC3_types[335])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsPointedTo", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[334]), ((entity*) IFC4X3_RC3_types[334])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsPointer", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[334]), ((entity*) IFC4X3_RC3_types[334])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[333])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("DocumentRefForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[918]), ((entity*) IFC4X3_RC3_types[918])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[335])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(11);
        attributes.push_back(new inverse_attribute("FillsVoids", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[942]), ((entity*) IFC4X3_RC3_types[942])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ConnectedTo", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[924]), ((entity*) IFC4X3_RC3_types[924])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsInterferedByElements", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[944]), ((entity*) IFC4X3_RC3_types[944])->attributes()[1]));
        attributes.push_back(new inverse_attribute("InterferesElements", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[944]), ((entity*) IFC4X3_RC3_types[944])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasProjections", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[947]), ((entity*) IFC4X3_RC3_types[947])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasOpenings", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[954]), ((entity*) IFC4X3_RC3_types[954])->attributes()[0]));
        attributes.push_back(new inverse_attribute("IsConnectionRealization", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[931]), ((entity*) IFC4X3_RC3_types[931])->attributes()[0]));
        attributes.push_back(new inverse_attribute("ProvidesBoundaries", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[951]), ((entity*) IFC4X3_RC3_types[951])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ConnectedFrom", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[924]), ((entity*) IFC4X3_RC3_types[924])->attributes()[2]));
        attributes.push_back(new inverse_attribute("ContainedInStructure", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[932]), ((entity*) IFC4X3_RC3_types[932])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasCoverings", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[933]), ((entity*) IFC4X3_RC3_types[933])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[399])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ExternalReferenceForResources", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[433])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("BoundedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[951]), ((entity*) IFC4X3_RC3_types[951])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[435])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasTextureMaps", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1199]), ((entity*) IFC4X3_RC3_types[1199])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[440])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ProjectsElements", inverse_attribute::unspecified_type, -1, -1, ((entity*) IFC4X3_RC3_types[947]), ((entity*) IFC4X3_RC3_types[947])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[460])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("VoidsElements", inverse_attribute::unspecified_type, -1, -1, ((entity*) IFC4X3_RC3_types[954]), ((entity*) IFC4X3_RC3_types[954])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[461])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasSubContexts", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[514]), ((entity*) IFC4X3_RC3_types[514])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasCoordinateOperation", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[245]), ((entity*) IFC4X3_RC3_types[245])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[512])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new inverse_attribute("PartOfW", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[525]), ((entity*) IFC4X3_RC3_types[525])->attributes()[2]));
        attributes.push_back(new inverse_attribute("PartOfV", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[525]), ((entity*) IFC4X3_RC3_types[525])->attributes()[1]));
        attributes.push_back(new inverse_attribute("PartOfU", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[525]), ((entity*) IFC4X3_RC3_types[525])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasIntersections", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1277]), ((entity*) IFC4X3_RC3_types[1277])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[526])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("IsGroupedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[909]), ((entity*) IFC4X3_RC3_types[909])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[530])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ToFaceSet", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[778]), ((entity*) IFC4X3_RC3_types[778])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[551])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("LibraryInfoForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[919]), ((entity*) IFC4X3_RC3_types[919])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasLibraryReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[591]), ((entity*) IFC4X3_RC3_types[591])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[590])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("LibraryRefForObjects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[919]), ((entity*) IFC4X3_RC3_types[919])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[591])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("HasRepresentation", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[645]), ((entity*) IFC4X3_RC3_types[645])->attributes()[0]));
        attributes.push_back(new inverse_attribute("IsRelatedWith", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[657]), ((entity*) IFC4X3_RC3_types[657])->attributes()[1]));
        attributes.push_back(new inverse_attribute("RelatesTo", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[657]), ((entity*) IFC4X3_RC3_types[657])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[640])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ToMaterialConstituentSet", inverse_attribute::unspecified_type, -1, -1, ((entity*) IFC4X3_RC3_types[643]), ((entity*) IFC4X3_RC3_types[643])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[642])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("AssociatedTo", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[920]), ((entity*) IFC4X3_RC3_types[920])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasProperties", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[656]), ((entity*) IFC4X3_RC3_types[656])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[644])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ToMaterialLayerSet", inverse_attribute::unspecified_type, -1, -1, ((entity*) IFC4X3_RC3_types[647]), ((entity*) IFC4X3_RC3_types[647])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[646])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ToMaterialProfileSet", inverse_attribute::unspecified_type, -1, -1, ((entity*) IFC4X3_RC3_types[652]), ((entity*) IFC4X3_RC3_types[652])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[651])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("AssociatedTo", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[920]), ((entity*) IFC4X3_RC3_types[920])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[659])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(4);
        attributes.push_back(new inverse_attribute("IsDeclaredBy", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[938]), ((entity*) IFC4X3_RC3_types[938])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Declares", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[938]), ((entity*) IFC4X3_RC3_types[938])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsTypedBy", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[941]), ((entity*) IFC4X3_RC3_types[941])->attributes()[0]));
        attributes.push_back(new inverse_attribute("IsDefinedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[939]), ((entity*) IFC4X3_RC3_types[939])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[704])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(7);
        attributes.push_back(new inverse_attribute("HasAssignments", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[906]), ((entity*) IFC4X3_RC3_types[906])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Nests", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[945]), ((entity*) IFC4X3_RC3_types[945])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsNestedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[945]), ((entity*) IFC4X3_RC3_types[945])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasContext", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[935]), ((entity*) IFC4X3_RC3_types[935])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsDecomposedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[905]), ((entity*) IFC4X3_RC3_types[905])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Decomposes", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[905]), ((entity*) IFC4X3_RC3_types[905])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasAssociations", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[914]), ((entity*) IFC4X3_RC3_types[914])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[705])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("PlacesObject", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[808]), ((entity*) IFC4X3_RC3_types[808])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[708])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasFillings", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[942]), ((entity*) IFC4X3_RC3_types[942])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[718])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("IsRelatedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[723]), ((entity*) IFC4X3_RC3_types[723])->attributes()[1]));
        attributes.push_back(new inverse_attribute("Relates", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[723]), ((entity*) IFC4X3_RC3_types[723])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Engages", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[744]), ((entity*) IFC4X3_RC3_types[744])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[722])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("EngagedIn", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[744]), ((entity*) IFC4X3_RC3_types[744])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[743])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        attributes.push_back(new inverse_attribute("PartOfComplex", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[746]), ((entity*) IFC4X3_RC3_types[746])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[748])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("ContainedIn", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[927]), ((entity*) IFC4X3_RC3_types[927])->attributes()[0]));
        attributes.push_back(new inverse_attribute("ConnectedFrom", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[926]), ((entity*) IFC4X3_RC3_types[926])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ConnectedTo", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[926]), ((entity*) IFC4X3_RC3_types[926])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[782])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("ContainedInStructure", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[932]), ((entity*) IFC4X3_RC3_types[932])->attributes()[0]));
        attributes.push_back(new inverse_attribute("Positions", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[946]), ((entity*) IFC4X3_RC3_types[946])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[783])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("IsPredecessorTo", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[949]), ((entity*) IFC4X3_RC3_types[949])->attributes()[0]));
        attributes.push_back(new inverse_attribute("IsSuccessorFrom", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[949]), ((entity*) IFC4X3_RC3_types[949])->attributes()[1]));
        attributes.push_back(new inverse_attribute("OperatesOn", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[911]), ((entity*) IFC4X3_RC3_types[911])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[806])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("ReferencedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[912]), ((entity*) IFC4X3_RC3_types[912])->attributes()[0]));
        attributes.push_back(new inverse_attribute("PositionedRelativeTo", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[946]), ((entity*) IFC4X3_RC3_types[946])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ReferencedInStructures", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[948]), ((entity*) IFC4X3_RC3_types[948])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[808])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("ShapeOfProduct", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[808]), ((entity*) IFC4X3_RC3_types[808])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasShapeAspects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1009]), ((entity*) IFC4X3_RC3_types[1009])->attributes()[4]));
        ((entity*) IFC4X3_RC3_types[809])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasProperties", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[814]), ((entity*) IFC4X3_RC3_types[814])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[813])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(6);
        attributes.push_back(new inverse_attribute("PartOfPset", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[833]), ((entity*) IFC4X3_RC3_types[833])->attributes()[0]));
        attributes.push_back(new inverse_attribute("PropertyForDependance", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[828]), ((entity*) IFC4X3_RC3_types[828])->attributes()[0]));
        attributes.push_back(new inverse_attribute("PropertyDependsOn", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[828]), ((entity*) IFC4X3_RC3_types[828])->attributes()[1]));
        attributes.push_back(new inverse_attribute("PartOfComplex", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[191]), ((entity*) IFC4X3_RC3_types[191])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasConstraints", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[962]), ((entity*) IFC4X3_RC3_types[962])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasApprovals", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[961]), ((entity*) IFC4X3_RC3_types[961])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[824])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[825])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasContext", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[935]), ((entity*) IFC4X3_RC3_types[935])->attributes()[1]));
        attributes.push_back(new inverse_attribute("HasAssociations", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[914]), ((entity*) IFC4X3_RC3_types[914])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[827])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("DefinesType", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1244]), ((entity*) IFC4X3_RC3_types[1244])->attributes()[1]));
        attributes.push_back(new inverse_attribute("IsDefinedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[940]), ((entity*) IFC4X3_RC3_types[940])->attributes()[0]));
        attributes.push_back(new inverse_attribute("DefinesOccurrence", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[939]), ((entity*) IFC4X3_RC3_types[939])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[834])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("Defines", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[940]), ((entity*) IFC4X3_RC3_types[940])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[837])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("PartOfComplexTemplate", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[192]), ((entity*) IFC4X3_RC3_types[192])->attributes()[2]));
        attributes.push_back(new inverse_attribute("PartOfPsetTemplate", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[837]), ((entity*) IFC4X3_RC3_types[837])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[841])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("InnerBoundaries", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[952]), ((entity*) IFC4X3_RC3_types[952])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[952])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("Corresponds", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[953]), ((entity*) IFC4X3_RC3_types[953])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[953])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("RepresentationMap", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[959]), ((entity*) IFC4X3_RC3_types[959])->attributes()[1]));
        attributes.push_back(new inverse_attribute("LayerAssignments", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[799]), ((entity*) IFC4X3_RC3_types[799])->attributes()[2]));
        attributes.push_back(new inverse_attribute("OfProductRepresentation", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[810]), ((entity*) IFC4X3_RC3_types[810])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[956])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("RepresentationsInContext", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[956]), ((entity*) IFC4X3_RC3_types[956])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[957])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("LayerAssignment", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[799]), ((entity*) IFC4X3_RC3_types[799])->attributes()[2]));
        attributes.push_back(new inverse_attribute("StyledByItem", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[1122]), ((entity*) IFC4X3_RC3_types[1122])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[958])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasShapeAspects", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1009]), ((entity*) IFC4X3_RC3_types[1009])->attributes()[4]));
        attributes.push_back(new inverse_attribute("MapUsage", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[632]), ((entity*) IFC4X3_RC3_types[632])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[959])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ResourceOf", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[913]), ((entity*) IFC4X3_RC3_types[913])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[960])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("UsingCurves", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[194]), ((entity*) IFC4X3_RC3_types[194])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[999])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReferences", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1009])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("OfShapeAspect", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[1009]), ((entity*) IFC4X3_RC3_types[1009])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1010])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasCoverings", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[934]), ((entity*) IFC4X3_RC3_types[934])->attributes()[0]));
        attributes.push_back(new inverse_attribute("BoundedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[951]), ((entity*) IFC4X3_RC3_types[951])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1048])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(3);
        attributes.push_back(new inverse_attribute("ContainsElements", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[932]), ((entity*) IFC4X3_RC3_types[932])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ServicedBySystems", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[950]), ((entity*) IFC4X3_RC3_types[950])->attributes()[1]));
        attributes.push_back(new inverse_attribute("ReferencesElements", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[948]), ((entity*) IFC4X3_RC3_types[948])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1055])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("AssignedToStructuralItem", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[928]), ((entity*) IFC4X3_RC3_types[928])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1081])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ConnectsStructuralMembers", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[929]), ((entity*) IFC4X3_RC3_types[929])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1084])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("AssignedStructuralActivity", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[928]), ((entity*) IFC4X3_RC3_types[928])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1093])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("SourceOfResultGroup", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[1114]), ((entity*) IFC4X3_RC3_types[1114])->attributes()[1]));
        attributes.push_back(new inverse_attribute("LoadGroupFor", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1083]), ((entity*) IFC4X3_RC3_types[1083])->attributes()[2]));
        ((entity*) IFC4X3_RC3_types[1098])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ConnectedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[929]), ((entity*) IFC4X3_RC3_types[929])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1108])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ResultGroupFor", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[1083]), ((entity*) IFC4X3_RC3_types[1083])->attributes()[3]));
        ((entity*) IFC4X3_RC3_types[1114])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("IsMappedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1197]), ((entity*) IFC4X3_RC3_types[1197])->attributes()[0]));
        attributes.push_back(new inverse_attribute("UsedInStyles", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[1145]), ((entity*) IFC4X3_RC3_types[1145])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1146])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("ServicesBuildings", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[950]), ((entity*) IFC4X3_RC3_types[950])->attributes()[0]));
        attributes.push_back(new inverse_attribute("ServicesFacilities", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[948]), ((entity*) IFC4X3_RC3_types[948])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1154])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(2);
        attributes.push_back(new inverse_attribute("HasColours", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[549]), ((entity*) IFC4X3_RC3_types[549])->attributes()[0]));
        attributes.push_back(new inverse_attribute("HasTextures", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[553]), ((entity*) IFC4X3_RC3_types[553])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1182])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("HasExternalReference", inverse_attribute::set_type, 1, -1, ((entity*) IFC4X3_RC3_types[434]), ((entity*) IFC4X3_RC3_types[434])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1213])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("Types", inverse_attribute::set_type, 0, 1, ((entity*) IFC4X3_RC3_types[941]), ((entity*) IFC4X3_RC3_types[941])->attributes()[1]));
        ((entity*) IFC4X3_RC3_types[1244])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("OperatesOn", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[911]), ((entity*) IFC4X3_RC3_types[911])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1245])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ReferencedBy", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[912]), ((entity*) IFC4X3_RC3_types[912])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1246])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const inverse_attribute*> attributes; attributes.reserve(1);
        attributes.push_back(new inverse_attribute("ResourceOf", inverse_attribute::set_type, 0, -1, ((entity*) IFC4X3_RC3_types[913]), ((entity*) IFC4X3_RC3_types[913])->attributes()[0]));
        ((entity*) IFC4X3_RC3_types[1247])->set_inverse_attributes(attributes);
    }
    {
        std::vector<const entity*> defs; defs.reserve(8);
        defs.push_back(((entity*) IFC4X3_RC3_types[2]));defs.push_back(((entity*) IFC4X3_RC3_types[249]));defs.push_back(((entity*) IFC4X3_RC3_types[251]));defs.push_back(((entity*) IFC4X3_RC3_types[737]));defs.push_back(((entity*) IFC4X3_RC3_types[741]));defs.push_back(((entity*) IFC4X3_RC3_types[822]));defs.push_back(((entity*) IFC4X3_RC3_types[1307]));defs.push_back(((entity*) IFC4X3_RC3_types[1309]));
        ((entity*) IFC4X3_RC3_types[230])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[6]));defs.push_back(((entity*) IFC4X3_RC3_types[230]));defs.push_back(((entity*) IFC4X3_RC3_types[530]));defs.push_back(((entity*) IFC4X3_RC3_types[806]));defs.push_back(((entity*) IFC4X3_RC3_types[808]));defs.push_back(((entity*) IFC4X3_RC3_types[960]));
        ((entity*) IFC4X3_RC3_types[704])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(7);
        defs.push_back(((entity*) IFC4X3_RC3_types[9]));defs.push_back(((entity*) IFC4X3_RC3_types[26]));defs.push_back(((entity*) IFC4X3_RC3_types[231]));defs.push_back(((entity*) IFC4X3_RC3_types[478]));defs.push_back(((entity*) IFC4X3_RC3_types[844]));defs.push_back(((entity*) IFC4X3_RC3_types[1002]));defs.push_back(((entity*) IFC4X3_RC3_types[1249]));
        ((entity*) IFC4X3_RC3_types[322])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(7);
        defs.push_back(((entity*) IFC4X3_RC3_types[10]));defs.push_back(((entity*) IFC4X3_RC3_types[27]));defs.push_back(((entity*) IFC4X3_RC3_types[232]));defs.push_back(((entity*) IFC4X3_RC3_types[479]));defs.push_back(((entity*) IFC4X3_RC3_types[845]));defs.push_back(((entity*) IFC4X3_RC3_types[1003]));defs.push_back(((entity*) IFC4X3_RC3_types[1250]));
        ((entity*) IFC4X3_RC3_types[323])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[14]));defs.push_back(((entity*) IFC4X3_RC3_types[445]));
        ((entity*) IFC4X3_RC3_types[630])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[15]));
        ((entity*) IFC4X3_RC3_types[14])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[16]));
        ((entity*) IFC4X3_RC3_types[444])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(16);
        defs.push_back(((entity*) IFC4X3_RC3_types[17]));defs.push_back(((entity*) IFC4X3_RC3_types[64]));defs.push_back(((entity*) IFC4X3_RC3_types[187]));defs.push_back(((entity*) IFC4X3_RC3_types[372]));defs.push_back(((entity*) IFC4X3_RC3_types[469]));defs.push_back(((entity*) IFC4X3_RC3_types[583]));defs.push_back(((entity*) IFC4X3_RC3_types[597]));defs.push_back(((entity*) IFC4X3_RC3_types[616]));defs.push_back(((entity*) IFC4X3_RC3_types[665]));defs.push_back(((entity*) IFC4X3_RC3_types[675]));defs.push_back(((entity*) IFC4X3_RC3_types[726]));defs.push_back(((entity*) IFC4X3_RC3_types[984]));defs.push_back(((entity*) IFC4X3_RC3_types[1016]));defs.push_back(((entity*) IFC4X3_RC3_types[1050]));defs.push_back(((entity*) IFC4X3_RC3_types[1070]));defs.push_back(((entity*) IFC4X3_RC3_types[1291]));
        ((entity*) IFC4X3_RC3_types[490])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[18]));defs.push_back(((entity*) IFC4X3_RC3_types[288]));defs.push_back(((entity*) IFC4X3_RC3_types[315]));defs.push_back(((entity*) IFC4X3_RC3_types[379]));defs.push_back(((entity*) IFC4X3_RC3_types[395]));defs.push_back(((entity*) IFC4X3_RC3_types[481]));defs.push_back(((entity*) IFC4X3_RC3_types[843]));defs.push_back(((entity*) IFC4X3_RC3_types[1151]));defs.push_back(((entity*) IFC4X3_RC3_types[1260]));
        ((entity*) IFC4X3_RC3_types[473])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[19]));defs.push_back(((entity*) IFC4X3_RC3_types[289]));defs.push_back(((entity*) IFC4X3_RC3_types[316]));defs.push_back(((entity*) IFC4X3_RC3_types[380]));defs.push_back(((entity*) IFC4X3_RC3_types[396]));defs.push_back(((entity*) IFC4X3_RC3_types[482]));defs.push_back(((entity*) IFC4X3_RC3_types[847]));defs.push_back(((entity*) IFC4X3_RC3_types[1152]));defs.push_back(((entity*) IFC4X3_RC3_types[1261]));
        ((entity*) IFC4X3_RC3_types[474])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(16);
        defs.push_back(((entity*) IFC4X3_RC3_types[21]));defs.push_back(((entity*) IFC4X3_RC3_types[65]));defs.push_back(((entity*) IFC4X3_RC3_types[188]));defs.push_back(((entity*) IFC4X3_RC3_types[373]));defs.push_back(((entity*) IFC4X3_RC3_types[470]));defs.push_back(((entity*) IFC4X3_RC3_types[584]));defs.push_back(((entity*) IFC4X3_RC3_types[598]));defs.push_back(((entity*) IFC4X3_RC3_types[617]));defs.push_back(((entity*) IFC4X3_RC3_types[666]));defs.push_back(((entity*) IFC4X3_RC3_types[676]));defs.push_back(((entity*) IFC4X3_RC3_types[727]));defs.push_back(((entity*) IFC4X3_RC3_types[985]));defs.push_back(((entity*) IFC4X3_RC3_types[1017]));defs.push_back(((entity*) IFC4X3_RC3_types[1051]));defs.push_back(((entity*) IFC4X3_RC3_types[1071]));defs.push_back(((entity*) IFC4X3_RC3_types[1292]));
        ((entity*) IFC4X3_RC3_types[491])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(20);
        defs.push_back(((entity*) IFC4X3_RC3_types[23]));defs.push_back(((entity*) IFC4X3_RC3_types[85]));defs.push_back(((entity*) IFC4X3_RC3_types[128]));defs.push_back(((entity*) IFC4X3_RC3_types[158]));defs.push_back(((entity*) IFC4X3_RC3_types[175]));defs.push_back(((entity*) IFC4X3_RC3_types[202]));defs.push_back(((entity*) IFC4X3_RC3_types[239]));defs.push_back(((entity*) IFC4X3_RC3_types[242]));defs.push_back(((entity*) IFC4X3_RC3_types[388]));defs.push_back(((entity*) IFC4X3_RC3_types[391]));defs.push_back(((entity*) IFC4X3_RC3_types[414]));defs.push_back(((entity*) IFC4X3_RC3_types[417]));defs.push_back(((entity*) IFC4X3_RC3_types[420]));defs.push_back(((entity*) IFC4X3_RC3_types[533]));defs.push_back(((entity*) IFC4X3_RC3_types[538]));defs.push_back(((entity*) IFC4X3_RC3_types[694]));defs.push_back(((entity*) IFC4X3_RC3_types[1037]));defs.push_back(((entity*) IFC4X3_RC3_types[1224]));defs.push_back(((entity*) IFC4X3_RC3_types[1241]));defs.push_back(((entity*) IFC4X3_RC3_types[1252]));
        ((entity*) IFC4X3_RC3_types[411])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(20);
        defs.push_back(((entity*) IFC4X3_RC3_types[24]));defs.push_back(((entity*) IFC4X3_RC3_types[86]));defs.push_back(((entity*) IFC4X3_RC3_types[129]));defs.push_back(((entity*) IFC4X3_RC3_types[159]));defs.push_back(((entity*) IFC4X3_RC3_types[176]));defs.push_back(((entity*) IFC4X3_RC3_types[203]));defs.push_back(((entity*) IFC4X3_RC3_types[240]));defs.push_back(((entity*) IFC4X3_RC3_types[243]));defs.push_back(((entity*) IFC4X3_RC3_types[389]));defs.push_back(((entity*) IFC4X3_RC3_types[392]));defs.push_back(((entity*) IFC4X3_RC3_types[415]));defs.push_back(((entity*) IFC4X3_RC3_types[418]));defs.push_back(((entity*) IFC4X3_RC3_types[421]));defs.push_back(((entity*) IFC4X3_RC3_types[534]));defs.push_back(((entity*) IFC4X3_RC3_types[539]));defs.push_back(((entity*) IFC4X3_RC3_types[695]));defs.push_back(((entity*) IFC4X3_RC3_types[1038]));defs.push_back(((entity*) IFC4X3_RC3_types[1225]));defs.push_back(((entity*) IFC4X3_RC3_types[1242]));defs.push_back(((entity*) IFC4X3_RC3_types[1253]));
        ((entity*) IFC4X3_RC3_types[412])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[29]));
        ((entity*) IFC4X3_RC3_types[612])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[30]));defs.push_back(((entity*) IFC4X3_RC3_types[33]));defs.push_back(((entity*) IFC4X3_RC3_types[37]));defs.push_back(((entity*) IFC4X3_RC3_types[39]));
        ((entity*) IFC4X3_RC3_types[608])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[31]));defs.push_back(((entity*) IFC4X3_RC3_types[34]));defs.push_back(((entity*) IFC4X3_RC3_types[40]));
        ((entity*) IFC4X3_RC3_types[36])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[46]));defs.push_back(((entity*) IFC4X3_RC3_types[399]));defs.push_back(((entity*) IFC4X3_RC3_types[608]));defs.push_back(((entity*) IFC4X3_RC3_types[782]));defs.push_back(((entity*) IFC4X3_RC3_types[783]));defs.push_back(((entity*) IFC4X3_RC3_types[849]));defs.push_back(((entity*) IFC4X3_RC3_types[1055]));defs.push_back(((entity*) IFC4X3_RC3_types[1081]));defs.push_back(((entity*) IFC4X3_RC3_types[1093]));
        ((entity*) IFC4X3_RC3_types[808])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(25);
        defs.push_back(((entity*) IFC4X3_RC3_types[47]));defs.push_back(((entity*) IFC4X3_RC3_types[92]));defs.push_back(((entity*) IFC4X3_RC3_types[102]));defs.push_back(((entity*) IFC4X3_RC3_types[148]));defs.push_back(((entity*) IFC4X3_RC3_types[151]));defs.push_back(((entity*) IFC4X3_RC3_types[264]));defs.push_back(((entity*) IFC4X3_RC3_types[273]));defs.push_back(((entity*) IFC4X3_RC3_types[307]));defs.push_back(((entity*) IFC4X3_RC3_types[441]));defs.push_back(((entity*) IFC4X3_RC3_types[463]));defs.push_back(((entity*) IFC4X3_RC3_types[464]));defs.push_back(((entity*) IFC4X3_RC3_types[515]));defs.push_back(((entity*) IFC4X3_RC3_types[531]));defs.push_back(((entity*) IFC4X3_RC3_types[601]));defs.push_back(((entity*) IFC4X3_RC3_types[761]));defs.push_back(((entity*) IFC4X3_RC3_types[763]));defs.push_back(((entity*) IFC4X3_RC3_types[772]));defs.push_back(((entity*) IFC4X3_RC3_types[993]));defs.push_back(((entity*) IFC4X3_RC3_types[999]));defs.push_back(((entity*) IFC4X3_RC3_types[1014]));defs.push_back(((entity*) IFC4X3_RC3_types[1041]));defs.push_back(((entity*) IFC4X3_RC3_types[1129]));defs.push_back(((entity*) IFC4X3_RC3_types[1183]));defs.push_back(((entity*) IFC4X3_RC3_types[1189]));defs.push_back(((entity*) IFC4X3_RC3_types[1264]));
        ((entity*) IFC4X3_RC3_types[513])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[53]));defs.push_back(((entity*) IFC4X3_RC3_types[268]));defs.push_back(((entity*) IFC4X3_RC3_types[334]));defs.push_back(((entity*) IFC4X3_RC3_types[434]));defs.push_back(((entity*) IFC4X3_RC3_types[657]));defs.push_back(((entity*) IFC4X3_RC3_types[723]));defs.push_back(((entity*) IFC4X3_RC3_types[828]));defs.push_back(((entity*) IFC4X3_RC3_types[961]));defs.push_back(((entity*) IFC4X3_RC3_types[962]));
        ((entity*) IFC4X3_RC3_types[963])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[54]));defs.push_back(((entity*) IFC4X3_RC3_types[55]));defs.push_back(((entity*) IFC4X3_RC3_types[197]));defs.push_back(((entity*) IFC4X3_RC3_types[300]));defs.push_back(((entity*) IFC4X3_RC3_types[717]));defs.push_back(((entity*) IFC4X3_RC3_types[730]));
        ((entity*) IFC4X3_RC3_types[813])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[56]));
        ((entity*) IFC4X3_RC3_types[54])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[62]));defs.push_back(((entity*) IFC4X3_RC3_types[564]));defs.push_back(((entity*) IFC4X3_RC3_types[1098]));defs.push_back(((entity*) IFC4X3_RC3_types[1114]));defs.push_back(((entity*) IFC4X3_RC3_types[1154]));
        ((entity*) IFC4X3_RC3_types[530])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(11);
        defs.push_back(((entity*) IFC4X3_RC3_types[63]));defs.push_back(((entity*) IFC4X3_RC3_types[267]));defs.push_back(((entity*) IFC4X3_RC3_types[166]));defs.push_back(((entity*) IFC4X3_RC3_types[410]));defs.push_back(((entity*) IFC4X3_RC3_types[569]));defs.push_back(((entity*) IFC4X3_RC3_types[624]));defs.push_back(((entity*) IFC4X3_RC3_types[881]));defs.push_back(((entity*) IFC4X3_RC3_types[1240]));defs.push_back(((entity*) IFC4X3_RC3_types[1234]));defs.push_back(((entity*) IFC4X3_RC3_types[1258]));defs.push_back(((entity*) IFC4X3_RC3_types[1316]));
        ((entity*) IFC4X3_RC3_types[730])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[67]));defs.push_back(((entity*) IFC4X3_RC3_types[69]));defs.push_back(((entity*) IFC4X3_RC3_types[70]));defs.push_back(((entity*) IFC4X3_RC3_types[71]));
        ((entity*) IFC4X3_RC3_types[761])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[108]));defs.push_back(((entity*) IFC4X3_RC3_types[194]));defs.push_back(((entity*) IFC4X3_RC3_types[550]));defs.push_back(((entity*) IFC4X3_RC3_types[779]));defs.push_back(((entity*) IFC4X3_RC3_types[1237]));defs.push_back(((entity*) IFC4X3_RC3_types[1275]));
        ((entity*) IFC4X3_RC3_types[100])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[110]));
        ((entity*) IFC4X3_RC3_types[108])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[111]));defs.push_back(((entity*) IFC4X3_RC3_types[274]));defs.push_back(((entity*) IFC4X3_RC3_types[275]));defs.push_back(((entity*) IFC4X3_RC3_types[883]));
        ((entity*) IFC4X3_RC3_types[101])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[113]));
        ((entity*) IFC4X3_RC3_types[111])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(30);
        defs.push_back(((entity*) IFC4X3_RC3_types[72]));defs.push_back(((entity*) IFC4X3_RC3_types[76]));defs.push_back(((entity*) IFC4X3_RC3_types[118]));defs.push_back(((entity*) IFC4X3_RC3_types[161]));defs.push_back(((entity*) IFC4X3_RC3_types[183]));defs.push_back(((entity*) IFC4X3_RC3_types[255]));defs.push_back(((entity*) IFC4X3_RC3_types[258]));defs.push_back(((entity*) IFC4X3_RC3_types[269]));defs.push_back(((entity*) IFC4X3_RC3_types[296]));defs.push_back(((entity*) IFC4X3_RC3_types[338]));defs.push_back(((entity*) IFC4X3_RC3_types[366]));defs.push_back(((entity*) IFC4X3_RC3_types[497]));defs.push_back(((entity*) IFC4X3_RC3_types[574]));defs.push_back(((entity*) IFC4X3_RC3_types[668]));defs.push_back(((entity*) IFC4X3_RC3_types[691]));defs.push_back(((entity*) IFC4X3_RC3_types[698]));defs.push_back(((entity*) IFC4X3_RC3_types[733]));defs.push_back(((entity*) IFC4X3_RC3_types[768]));defs.push_back(((entity*) IFC4X3_RC3_types[861]));defs.push_back(((entity*) IFC4X3_RC3_types[862]));defs.push_back(((entity*) IFC4X3_RC3_types[870]));defs.push_back(((entity*) IFC4X3_RC3_types[871]));defs.push_back(((entity*) IFC4X3_RC3_types[975]));defs.push_back(((entity*) IFC4X3_RC3_types[1006]));defs.push_back(((entity*) IFC4X3_RC3_types[1031]));defs.push_back(((entity*) IFC4X3_RC3_types[1073]));defs.push_back(((entity*) IFC4X3_RC3_types[1074]));defs.push_back(((entity*) IFC4X3_RC3_types[1221]));defs.push_back(((entity*) IFC4X3_RC3_types[1283]));defs.push_back(((entity*) IFC4X3_RC3_types[1295]));
        ((entity*) IFC4X3_RC3_types[124])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[73]));
        ((entity*) IFC4X3_RC3_types[72])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(29);
        defs.push_back(((entity*) IFC4X3_RC3_types[74]));defs.push_back(((entity*) IFC4X3_RC3_types[77]));defs.push_back(((entity*) IFC4X3_RC3_types[119]));defs.push_back(((entity*) IFC4X3_RC3_types[162]));defs.push_back(((entity*) IFC4X3_RC3_types[185]));defs.push_back(((entity*) IFC4X3_RC3_types[256]));defs.push_back(((entity*) IFC4X3_RC3_types[259]));defs.push_back(((entity*) IFC4X3_RC3_types[270]));defs.push_back(((entity*) IFC4X3_RC3_types[297]));defs.push_back(((entity*) IFC4X3_RC3_types[347]));defs.push_back(((entity*) IFC4X3_RC3_types[498]));defs.push_back(((entity*) IFC4X3_RC3_types[575]));defs.push_back(((entity*) IFC4X3_RC3_types[670]));defs.push_back(((entity*) IFC4X3_RC3_types[692]));defs.push_back(((entity*) IFC4X3_RC3_types[699]));defs.push_back(((entity*) IFC4X3_RC3_types[734]));defs.push_back(((entity*) IFC4X3_RC3_types[770]));defs.push_back(((entity*) IFC4X3_RC3_types[865]));defs.push_back(((entity*) IFC4X3_RC3_types[863]));defs.push_back(((entity*) IFC4X3_RC3_types[872]));defs.push_back(((entity*) IFC4X3_RC3_types[874]));defs.push_back(((entity*) IFC4X3_RC3_types[976]));defs.push_back(((entity*) IFC4X3_RC3_types[1007]));defs.push_back(((entity*) IFC4X3_RC3_types[1034]));defs.push_back(((entity*) IFC4X3_RC3_types[1075]));defs.push_back(((entity*) IFC4X3_RC3_types[1077]));defs.push_back(((entity*) IFC4X3_RC3_types[1222]));defs.push_back(((entity*) IFC4X3_RC3_types[1286]));defs.push_back(((entity*) IFC4X3_RC3_types[1304]));
        ((entity*) IFC4X3_RC3_types[125])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[83]));defs.push_back(((entity*) IFC4X3_RC3_types[543]));defs.push_back(((entity*) IFC4X3_RC3_types[760]));
        ((entity*) IFC4X3_RC3_types[1146])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[84]));defs.push_back(((entity*) IFC4X3_RC3_types[882]));defs.push_back(((entity*) IFC4X3_RC3_types[969]));defs.push_back(((entity*) IFC4X3_RC3_types[970]));defs.push_back(((entity*) IFC4X3_RC3_types[1067]));
        ((entity*) IFC4X3_RC3_types[264])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[89]));
        ((entity*) IFC4X3_RC3_types[92])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[93]));defs.push_back(((entity*) IFC4X3_RC3_types[517]));defs.push_back(((entity*) IFC4X3_RC3_types[518]));
        ((entity*) IFC4X3_RC3_types[519])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[95]));
        ((entity*) IFC4X3_RC3_types[195])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[96]));defs.push_back(((entity*) IFC4X3_RC3_types[97]));defs.push_back(((entity*) IFC4X3_RC3_types[98]));
        ((entity*) IFC4X3_RC3_types[94])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[99]));
        ((entity*) IFC4X3_RC3_types[98])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(8);
        defs.push_back(((entity*) IFC4X3_RC3_types[100]));defs.push_back(((entity*) IFC4X3_RC3_types[205]));defs.push_back(((entity*) IFC4X3_RC3_types[607]));defs.push_back(((entity*) IFC4X3_RC3_types[713]));defs.push_back(((entity*) IFC4X3_RC3_types[736]));defs.push_back(((entity*) IFC4X3_RC3_types[781]));defs.push_back(((entity*) IFC4X3_RC3_types[1069]));defs.push_back(((entity*) IFC4X3_RC3_types[1130]));
        ((entity*) IFC4X3_RC3_types[273])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[101]));defs.push_back(((entity*) IFC4X3_RC3_types[400]));defs.push_back(((entity*) IFC4X3_RC3_types[994]));defs.push_back(((entity*) IFC4X3_RC3_types[1150]));
        ((entity*) IFC4X3_RC3_types[1129])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[104]));defs.push_back(((entity*) IFC4X3_RC3_types[777]));
        ((entity*) IFC4X3_RC3_types[531])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[105]));defs.push_back(((entity*) IFC4X3_RC3_types[114]));defs.push_back(((entity*) IFC4X3_RC3_types[633]));defs.push_back(((entity*) IFC4X3_RC3_types[867]));defs.push_back(((entity*) IFC4X3_RC3_types[971]));
        ((entity*) IFC4X3_RC3_types[447])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[115]));defs.push_back(((entity*) IFC4X3_RC3_types[312]));defs.push_back(((entity*) IFC4X3_RC3_types[456]));defs.push_back(((entity*) IFC4X3_RC3_types[544]));defs.push_back(((entity*) IFC4X3_RC3_types[662]));defs.push_back(((entity*) IFC4X3_RC3_types[900]));defs.push_back(((entity*) IFC4X3_RC3_types[1015]));defs.push_back(((entity*) IFC4X3_RC3_types[1269]));defs.push_back(((entity*) IFC4X3_RC3_types[1272]));
        ((entity*) IFC4X3_RC3_types[404])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[116]));defs.push_back(((entity*) IFC4X3_RC3_types[313]));defs.push_back(((entity*) IFC4X3_RC3_types[457]));defs.push_back(((entity*) IFC4X3_RC3_types[545]));defs.push_back(((entity*) IFC4X3_RC3_types[663]));defs.push_back(((entity*) IFC4X3_RC3_types[901]));defs.push_back(((entity*) IFC4X3_RC3_types[1019]));defs.push_back(((entity*) IFC4X3_RC3_types[1270]));defs.push_back(((entity*) IFC4X3_RC3_types[1273]));
        ((entity*) IFC4X3_RC3_types[405])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[121]));defs.push_back(((entity*) IFC4X3_RC3_types[447]));defs.push_back(((entity*) IFC4X3_RC3_types[448]));defs.push_back(((entity*) IFC4X3_RC3_types[1027]));defs.push_back(((entity*) IFC4X3_RC3_types[1048]));
        ((entity*) IFC4X3_RC3_types[1058])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[122]));defs.push_back(((entity*) IFC4X3_RC3_types[126]));defs.push_back(((entity*) IFC4X3_RC3_types[330]));defs.push_back(((entity*) IFC4X3_RC3_types[1083]));defs.push_back(((entity*) IFC4X3_RC3_types[1315]));
        ((entity*) IFC4X3_RC3_types[1154])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(11);
        defs.push_back(((entity*) IFC4X3_RC3_types[124]));defs.push_back(((entity*) IFC4X3_RC3_types[167]));defs.push_back(((entity*) IFC4X3_RC3_types[324]));defs.push_back(((entity*) IFC4X3_RC3_types[401]));defs.push_back(((entity*) IFC4X3_RC3_types[404]));defs.push_back(((entity*) IFC4X3_RC3_types[459]));defs.push_back(((entity*) IFC4X3_RC3_types[502]));defs.push_back(((entity*) IFC4X3_RC3_types[507]));defs.push_back(((entity*) IFC4X3_RC3_types[520]));defs.push_back(((entity*) IFC4X3_RC3_types[1229]));defs.push_back(((entity*) IFC4X3_RC3_types[1276]));
        ((entity*) IFC4X3_RC3_types[399])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(8);
        defs.push_back(((entity*) IFC4X3_RC3_types[125]));defs.push_back(((entity*) IFC4X3_RC3_types[168]));defs.push_back(((entity*) IFC4X3_RC3_types[325]));defs.push_back(((entity*) IFC4X3_RC3_types[402]));defs.push_back(((entity*) IFC4X3_RC3_types[405]));defs.push_back(((entity*) IFC4X3_RC3_types[503]));defs.push_back(((entity*) IFC4X3_RC3_types[508]));defs.push_back(((entity*) IFC4X3_RC3_types[1232]));
        ((entity*) IFC4X3_RC3_types[408])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[131]));defs.push_back(((entity*) IFC4X3_RC3_types[137]));defs.push_back(((entity*) IFC4X3_RC3_types[353]));defs.push_back(((entity*) IFC4X3_RC3_types[571]));defs.push_back(((entity*) IFC4X3_RC3_types[754]));
        ((entity*) IFC4X3_RC3_types[476])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[132]));defs.push_back(((entity*) IFC4X3_RC3_types[138]));defs.push_back(((entity*) IFC4X3_RC3_types[354]));defs.push_back(((entity*) IFC4X3_RC3_types[572]));defs.push_back(((entity*) IFC4X3_RC3_types[755]));
        ((entity*) IFC4X3_RC3_types[477])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[134]));defs.push_back(((entity*) IFC4X3_RC3_types[140]));defs.push_back(((entity*) IFC4X3_RC3_types[236]));defs.push_back(((entity*) IFC4X3_RC3_types[356]));defs.push_back(((entity*) IFC4X3_RC3_types[757]));
        ((entity*) IFC4X3_RC3_types[486])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[135]));defs.push_back(((entity*) IFC4X3_RC3_types[141]));defs.push_back(((entity*) IFC4X3_RC3_types[237]));defs.push_back(((entity*) IFC4X3_RC3_types[357]));defs.push_back(((entity*) IFC4X3_RC3_types[758]));
        ((entity*) IFC4X3_RC3_types[487])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[143]));defs.push_back(((entity*) IFC4X3_RC3_types[750]));
        ((entity*) IFC4X3_RC3_types[296])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[144]));defs.push_back(((entity*) IFC4X3_RC3_types[752]));
        ((entity*) IFC4X3_RC3_types[297])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[147]));defs.push_back(((entity*) IFC4X3_RC3_types[773]));defs.push_back(((entity*) IFC4X3_RC3_types[774]));defs.push_back(((entity*) IFC4X3_RC3_types[775]));
        ((entity*) IFC4X3_RC3_types[772])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[149]));defs.push_back(((entity*) IFC4X3_RC3_types[150]));
        ((entity*) IFC4X3_RC3_types[148])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[152]));defs.push_back(((entity*) IFC4X3_RC3_types[154]));
        ((entity*) IFC4X3_RC3_types[151])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[153]));
        ((entity*) IFC4X3_RC3_types[152])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[155]));
        ((entity*) IFC4X3_RC3_types[154])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[156]));
        ((entity*) IFC4X3_RC3_types[55])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[164]));defs.push_back(((entity*) IFC4X3_RC3_types[409]));
        ((entity*) IFC4X3_RC3_types[205])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[165]));
        ((entity*) IFC4X3_RC3_types[166])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[169]));defs.push_back(((entity*) IFC4X3_RC3_types[333]));defs.push_back(((entity*) IFC4X3_RC3_types[590]));
        ((entity*) IFC4X3_RC3_types[429])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[170]));defs.push_back(((entity*) IFC4X3_RC3_types[335]));defs.push_back(((entity*) IFC4X3_RC3_types[430]));defs.push_back(((entity*) IFC4X3_RC3_types[431]));defs.push_back(((entity*) IFC4X3_RC3_types[432]));defs.push_back(((entity*) IFC4X3_RC3_types[591]));
        ((entity*) IFC4X3_RC3_types[433])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[173]));defs.push_back(((entity*) IFC4X3_RC3_types[721]));
        ((entity*) IFC4X3_RC3_types[206])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[174]));defs.push_back(((entity*) IFC4X3_RC3_types[248]));defs.push_back(((entity*) IFC4X3_RC3_types[989]));defs.push_back(((entity*) IFC4X3_RC3_types[1025]));defs.push_back(((entity*) IFC4X3_RC3_types[1208]));
        ((entity*) IFC4X3_RC3_types[1069])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[180]));
        ((entity*) IFC4X3_RC3_types[182])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(17);
        defs.push_back(((entity*) IFC4X3_RC3_types[181]));defs.push_back(((entity*) IFC4X3_RC3_types[182]));defs.push_back(((entity*) IFC4X3_RC3_types[283]));defs.push_back(((entity*) IFC4X3_RC3_types[284]));defs.push_back(((entity*) IFC4X3_RC3_types[285]));defs.push_back(((entity*) IFC4X3_RC3_types[549]));defs.push_back(((entity*) IFC4X3_RC3_types[792]));defs.push_back(((entity*) IFC4X3_RC3_types[1141]));defs.push_back(((entity*) IFC4X3_RC3_types[1142]));defs.push_back(((entity*) IFC4X3_RC3_types[1144]));defs.push_back(((entity*) IFC4X3_RC3_types[1145]));defs.push_back(((entity*) IFC4X3_RC3_types[1146]));defs.push_back(((entity*) IFC4X3_RC3_types[1194]));defs.push_back(((entity*) IFC4X3_RC3_types[1195]));defs.push_back(((entity*) IFC4X3_RC3_types[1197]));defs.push_back(((entity*) IFC4X3_RC3_types[1200]));defs.push_back(((entity*) IFC4X3_RC3_types[1201]));
        ((entity*) IFC4X3_RC3_types[798])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[184]));
        ((entity*) IFC4X3_RC3_types[183])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[191]));defs.push_back(((entity*) IFC4X3_RC3_types[1021]));
        ((entity*) IFC4X3_RC3_types[824])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[192]));defs.push_back(((entity*) IFC4X3_RC3_types[1022]));
        ((entity*) IFC4X3_RC3_types[841])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[195]));defs.push_back(((entity*) IFC4X3_RC3_types[524]));defs.push_back(((entity*) IFC4X3_RC3_types[1000]));
        ((entity*) IFC4X3_RC3_types[194])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[196]));defs.push_back(((entity*) IFC4X3_RC3_types[281]));
        ((entity*) IFC4X3_RC3_types[999])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[199]));defs.push_back(((entity*) IFC4X3_RC3_types[453]));defs.push_back(((entity*) IFC4X3_RC3_types[850]));
        ((entity*) IFC4X3_RC3_types[484])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[200]));defs.push_back(((entity*) IFC4X3_RC3_types[454]));defs.push_back(((entity*) IFC4X3_RC3_types[851]));
        ((entity*) IFC4X3_RC3_types[485])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(7);
        defs.push_back(((entity*) IFC4X3_RC3_types[206]));defs.push_back(((entity*) IFC4X3_RC3_types[369]));defs.push_back(((entity*) IFC4X3_RC3_types[440]));defs.push_back(((entity*) IFC4X3_RC3_types[442]));defs.push_back(((entity*) IFC4X3_RC3_types[623]));defs.push_back(((entity*) IFC4X3_RC3_types[732]));defs.push_back(((entity*) IFC4X3_RC3_types[1266]));
        ((entity*) IFC4X3_RC3_types[1217])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[207]));defs.push_back(((entity*) IFC4X3_RC3_types[210]));defs.push_back(((entity*) IFC4X3_RC3_types[211]));defs.push_back(((entity*) IFC4X3_RC3_types[213]));
        ((entity*) IFC4X3_RC3_types[208])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[209]));
        ((entity*) IFC4X3_RC3_types[210])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[216]));defs.push_back(((entity*) IFC4X3_RC3_types[219]));defs.push_back(((entity*) IFC4X3_RC3_types[222]));defs.push_back(((entity*) IFC4X3_RC3_types[261]));defs.push_back(((entity*) IFC4X3_RC3_types[579]));defs.push_back(((entity*) IFC4X3_RC3_types[1125]));
        ((entity*) IFC4X3_RC3_types[225])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[217]));defs.push_back(((entity*) IFC4X3_RC3_types[220]));defs.push_back(((entity*) IFC4X3_RC3_types[223]));defs.push_back(((entity*) IFC4X3_RC3_types[262]));defs.push_back(((entity*) IFC4X3_RC3_types[580]));defs.push_back(((entity*) IFC4X3_RC3_types[1126]));
        ((entity*) IFC4X3_RC3_types[226])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[225]));
        ((entity*) IFC4X3_RC3_types[960])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[226]));
        ((entity*) IFC4X3_RC3_types[1247])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[227]));defs.push_back(((entity*) IFC4X3_RC3_types[704]));defs.push_back(((entity*) IFC4X3_RC3_types[1244]));
        ((entity*) IFC4X3_RC3_types[705])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[229]));defs.push_back(((entity*) IFC4X3_RC3_types[234]));defs.push_back(((entity*) IFC4X3_RC3_types[1028]));
        ((entity*) IFC4X3_RC3_types[697])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[235]));
        ((entity*) IFC4X3_RC3_types[234])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[253]));
        ((entity*) IFC4X3_RC3_types[50])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[266]));defs.push_back(((entity*) IFC4X3_RC3_types[630]));defs.push_back(((entity*) IFC4X3_RC3_types[991]));defs.push_back(((entity*) IFC4X3_RC3_types[1147]));defs.push_back(((entity*) IFC4X3_RC3_types[1148]));
        ((entity*) IFC4X3_RC3_types[1041])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[282]));defs.push_back(((entity*) IFC4X3_RC3_types[462]));defs.push_back(((entity*) IFC4X3_RC3_types[1139]));defs.push_back(((entity*) IFC4X3_RC3_types[1192]));
        ((entity*) IFC4X3_RC3_types[801])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[287]));defs.push_back(((entity*) IFC4X3_RC3_types[765]));defs.push_back(((entity*) IFC4X3_RC3_types[1068]));defs.push_back(((entity*) IFC4X3_RC3_types[1219]));
        ((entity*) IFC4X3_RC3_types[400])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[309]));defs.push_back(((entity*) IFC4X3_RC3_types[311]));defs.push_back(((entity*) IFC4X3_RC3_types[438]));defs.push_back(((entity*) IFC4X3_RC3_types[967]));
        ((entity*) IFC4X3_RC3_types[1147])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[310]));
        ((entity*) IFC4X3_RC3_types[472])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[318]));defs.push_back(((entity*) IFC4X3_RC3_types[411]));defs.push_back(((entity*) IFC4X3_RC3_types[473]));defs.push_back(((entity*) IFC4X3_RC3_types[476]));defs.push_back(((entity*) IFC4X3_RC3_types[484]));defs.push_back(((entity*) IFC4X3_RC3_types[486]));defs.push_back(((entity*) IFC4X3_RC3_types[488]));defs.push_back(((entity*) IFC4X3_RC3_types[490]));defs.push_back(((entity*) IFC4X3_RC3_types[492]));
        ((entity*) IFC4X3_RC3_types[326])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(9);
        defs.push_back(((entity*) IFC4X3_RC3_types[319]));defs.push_back(((entity*) IFC4X3_RC3_types[412]));defs.push_back(((entity*) IFC4X3_RC3_types[474]));defs.push_back(((entity*) IFC4X3_RC3_types[477]));defs.push_back(((entity*) IFC4X3_RC3_types[485]));defs.push_back(((entity*) IFC4X3_RC3_types[487]));defs.push_back(((entity*) IFC4X3_RC3_types[489]));defs.push_back(((entity*) IFC4X3_RC3_types[491]));defs.push_back(((entity*) IFC4X3_RC3_types[493]));
        ((entity*) IFC4X3_RC3_types[327])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[321]));
        ((entity*) IFC4X3_RC3_types[330])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[322]));defs.push_back(((entity*) IFC4X3_RC3_types[326]));
        ((entity*) IFC4X3_RC3_types[324])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[323]));defs.push_back(((entity*) IFC4X3_RC3_types[327]));
        ((entity*) IFC4X3_RC3_types[325])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[328]));
        ((entity*) IFC4X3_RC3_types[782])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[339]));defs.push_back(((entity*) IFC4X3_RC3_types[342]));defs.push_back(((entity*) IFC4X3_RC3_types[740]));defs.push_back(((entity*) IFC4X3_RC3_types[894]));defs.push_back(((entity*) IFC4X3_RC3_types[1296]));defs.push_back(((entity*) IFC4X3_RC3_types[1299]));
        ((entity*) IFC4X3_RC3_types[794])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[343]));
        ((entity*) IFC4X3_RC3_types[338])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[344]));defs.push_back(((entity*) IFC4X3_RC3_types[408]));defs.push_back(((entity*) IFC4X3_RC3_types[1056]));defs.push_back(((entity*) IFC4X3_RC3_types[1301]));
        ((entity*) IFC4X3_RC3_types[1246])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[351]));
        ((entity*) IFC4X3_RC3_types[790])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[352]));
        ((entity*) IFC4X3_RC3_types[791])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[359]));defs.push_back(((entity*) IFC4X3_RC3_types[385]));defs.push_back(((entity*) IFC4X3_RC3_types[466]));defs.push_back(((entity*) IFC4X3_RC3_types[558]));
        ((entity*) IFC4X3_RC3_types[492])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[360]));defs.push_back(((entity*) IFC4X3_RC3_types[386]));defs.push_back(((entity*) IFC4X3_RC3_types[467]));defs.push_back(((entity*) IFC4X3_RC3_types[559]));
        ((entity*) IFC4X3_RC3_types[493])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[364]));defs.push_back(((entity*) IFC4X3_RC3_types[718]));defs.push_back(((entity*) IFC4X3_RC3_types[1278]));
        ((entity*) IFC4X3_RC3_types[461])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[367]));defs.push_back(((entity*) IFC4X3_RC3_types[891]));
        ((entity*) IFC4X3_RC3_types[366])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[370]));defs.push_back(((entity*) IFC4X3_RC3_types[724]));defs.push_back(((entity*) IFC4X3_RC3_types[1128]));
        ((entity*) IFC4X3_RC3_types[369])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[371]));defs.push_back(((entity*) IFC4X3_RC3_types[780]));defs.push_back(((entity*) IFC4X3_RC3_types[1267]));
        ((entity*) IFC4X3_RC3_types[623])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[382]));defs.push_back(((entity*) IFC4X3_RC3_types[1161]));
        ((entity*) IFC4X3_RC3_types[488])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[383]));defs.push_back(((entity*) IFC4X3_RC3_types[1162]));
        ((entity*) IFC4X3_RC3_types[489])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[407]));
        ((entity*) IFC4X3_RC3_types[856])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[423]));defs.push_back(((entity*) IFC4X3_RC3_types[803]));defs.push_back(((entity*) IFC4X3_RC3_types[1164]));
        ((entity*) IFC4X3_RC3_types[806])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[424]));defs.push_back(((entity*) IFC4X3_RC3_types[582]));defs.push_back(((entity*) IFC4X3_RC3_types[966]));defs.push_back(((entity*) IFC4X3_RC3_types[1166]));defs.push_back(((entity*) IFC4X3_RC3_types[1314]));
        ((entity*) IFC4X3_RC3_types[987])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[426]));defs.push_back(((entity*) IFC4X3_RC3_types[804]));defs.push_back(((entity*) IFC4X3_RC3_types[1168]));
        ((entity*) IFC4X3_RC3_types[1245])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[428]));defs.push_back(((entity*) IFC4X3_RC3_types[793]));defs.push_back(((entity*) IFC4X3_RC3_types[824]));defs.push_back(((entity*) IFC4X3_RC3_types[830]));
        ((entity*) IFC4X3_RC3_types[825])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[435]));
        ((entity*) IFC4X3_RC3_types[437])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[437]));defs.push_back(((entity*) IFC4X3_RC3_types[1058]));defs.push_back(((entity*) IFC4X3_RC3_types[1060]));
        ((entity*) IFC4X3_RC3_types[1055])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[439]));
        ((entity*) IFC4X3_RC3_types[438])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[443]));
        ((entity*) IFC4X3_RC3_types[442])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[444]));
        ((entity*) IFC4X3_RC3_types[440])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[446]));
        ((entity*) IFC4X3_RC3_types[445])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[452]));defs.push_back(((entity*) IFC4X3_RC3_types[1036]));
        ((entity*) IFC4X3_RC3_types[1085])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[460]));defs.push_back(((entity*) IFC4X3_RC3_types[461]));defs.push_back(((entity*) IFC4X3_RC3_types[1132]));
        ((entity*) IFC4X3_RC3_types[459])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[472]));defs.push_back(((entity*) IFC4X3_RC3_types[1131]));
        ((entity*) IFC4X3_RC3_types[309])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[504]));defs.push_back(((entity*) IFC4X3_RC3_types[1155]));
        ((entity*) IFC4X3_RC3_types[502])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[505]));defs.push_back(((entity*) IFC4X3_RC3_types[1156]));
        ((entity*) IFC4X3_RC3_types[503])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[510]));
        ((entity*) IFC4X3_RC3_types[515])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[512]));
        ((entity*) IFC4X3_RC3_types[957])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[513]));defs.push_back(((entity*) IFC4X3_RC3_types[632]));defs.push_back(((entity*) IFC4X3_RC3_types[1122]));defs.push_back(((entity*) IFC4X3_RC3_types[1217]));
        ((entity*) IFC4X3_RC3_types[958])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[514]));
        ((entity*) IFC4X3_RC3_types[512])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[519]));defs.push_back(((entity*) IFC4X3_RC3_types[521]));
        ((entity*) IFC4X3_RC3_types[520])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[525]));defs.push_back(((entity*) IFC4X3_RC3_types[612]));defs.push_back(((entity*) IFC4X3_RC3_types[887]));
        ((entity*) IFC4X3_RC3_types[783])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[527]));defs.push_back(((entity*) IFC4X3_RC3_types[611]));defs.push_back(((entity*) IFC4X3_RC3_types[620]));
        ((entity*) IFC4X3_RC3_types[708])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[548]));
        ((entity*) IFC4X3_RC3_types[311])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[551]));defs.push_back(((entity*) IFC4X3_RC3_types[1182]));
        ((entity*) IFC4X3_RC3_types[1183])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[552]));
        ((entity*) IFC4X3_RC3_types[551])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[553]));defs.push_back(((entity*) IFC4X3_RC3_types[1198]));defs.push_back(((entity*) IFC4X3_RC3_types[1199]));
        ((entity*) IFC4X3_RC3_types[1197])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[554]));
        ((entity*) IFC4X3_RC3_types[553])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[563]));defs.push_back(((entity*) IFC4X3_RC3_types[988]));
        ((entity*) IFC4X3_RC3_types[1130])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[567]));defs.push_back(((entity*) IFC4X3_RC3_types[890]));
        ((entity*) IFC4X3_RC3_types[1213])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[602]));defs.push_back(((entity*) IFC4X3_RC3_types[603]));defs.push_back(((entity*) IFC4X3_RC3_types[604]));defs.push_back(((entity*) IFC4X3_RC3_types[605]));
        ((entity*) IFC4X3_RC3_types[601])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[606]));
        ((entity*) IFC4X3_RC3_types[605])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[631]));
        ((entity*) IFC4X3_RC3_types[245])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(7);
        defs.push_back(((entity*) IFC4X3_RC3_types[640]));defs.push_back(((entity*) IFC4X3_RC3_types[642]));defs.push_back(((entity*) IFC4X3_RC3_types[643]));defs.push_back(((entity*) IFC4X3_RC3_types[646]));defs.push_back(((entity*) IFC4X3_RC3_types[647]));defs.push_back(((entity*) IFC4X3_RC3_types[651]));defs.push_back(((entity*) IFC4X3_RC3_types[652]));
        ((entity*) IFC4X3_RC3_types[644])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[645]));defs.push_back(((entity*) IFC4X3_RC3_types[809]));
        ((entity*) IFC4X3_RC3_types[810])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[648]));defs.push_back(((entity*) IFC4X3_RC3_types[653]));
        ((entity*) IFC4X3_RC3_types[659])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[649]));
        ((entity*) IFC4X3_RC3_types[646])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[654]));
        ((entity*) IFC4X3_RC3_types[653])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[655]));
        ((entity*) IFC4X3_RC3_types[651])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[656]));defs.push_back(((entity*) IFC4X3_RC3_types[814]));
        ((entity*) IFC4X3_RC3_types[428])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[669]));
        ((entity*) IFC4X3_RC3_types[668])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[672]));defs.push_back(((entity*) IFC4X3_RC3_types[706]));
        ((entity*) IFC4X3_RC3_types[214])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[674]));
        ((entity*) IFC4X3_RC3_types[300])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[705]));defs.push_back(((entity*) IFC4X3_RC3_types[827]));defs.push_back(((entity*) IFC4X3_RC3_types[922]));
        ((entity*) IFC4X3_RC3_types[978])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[711]));
        ((entity*) IFC4X3_RC3_types[6])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[714]));defs.push_back(((entity*) IFC4X3_RC3_types[715]));defs.push_back(((entity*) IFC4X3_RC3_types[716]));
        ((entity*) IFC4X3_RC3_types[713])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[720]));
        ((entity*) IFC4X3_RC3_types[718])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[725]));
        ((entity*) IFC4X3_RC3_types[95])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[746]));defs.push_back(((entity*) IFC4X3_RC3_types[749]));
        ((entity*) IFC4X3_RC3_types[748])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[762]));
        ((entity*) IFC4X3_RC3_types[763])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[767]));
        ((entity*) IFC4X3_RC3_types[507])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[769]));
        ((entity*) IFC4X3_RC3_types[768])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[778]));defs.push_back(((entity*) IFC4X3_RC3_types[1235]));
        ((entity*) IFC4X3_RC3_types[1182])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[788]));defs.push_back(((entity*) IFC4X3_RC3_types[1170]));
        ((entity*) IFC4X3_RC3_types[12])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[790]));defs.push_back(((entity*) IFC4X3_RC3_types[791]));defs.push_back(((entity*) IFC4X3_RC3_types[795]));
        ((entity*) IFC4X3_RC3_types[792])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[794]));defs.push_back(((entity*) IFC4X3_RC3_types[833]));defs.push_back(((entity*) IFC4X3_RC3_types[856]));
        ((entity*) IFC4X3_RC3_types[834])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[800]));
        ((entity*) IFC4X3_RC3_types[799])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[816]));defs.push_back(((entity*) IFC4X3_RC3_types[821]));
        ((entity*) IFC4X3_RC3_types[227])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[817]));
        ((entity*) IFC4X3_RC3_types[246])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[819]));
        ((entity*) IFC4X3_RC3_types[460])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[826]));defs.push_back(((entity*) IFC4X3_RC3_types[829]));defs.push_back(((entity*) IFC4X3_RC3_types[831]));defs.push_back(((entity*) IFC4X3_RC3_types[832]));defs.push_back(((entity*) IFC4X3_RC3_types[839]));defs.push_back(((entity*) IFC4X3_RC3_types[840]));
        ((entity*) IFC4X3_RC3_types[1021])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[834]));defs.push_back(((entity*) IFC4X3_RC3_types[842]));
        ((entity*) IFC4X3_RC3_types[827])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[837]));defs.push_back(((entity*) IFC4X3_RC3_types[841]));
        ((entity*) IFC4X3_RC3_types[842])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[853]));defs.push_back(((entity*) IFC4X3_RC3_types[854]));defs.push_back(((entity*) IFC4X3_RC3_types[855]));defs.push_back(((entity*) IFC4X3_RC3_types[857]));defs.push_back(((entity*) IFC4X3_RC3_types[858]));defs.push_back(((entity*) IFC4X3_RC3_types[859]));
        ((entity*) IFC4X3_RC3_types[749])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[877]));
        ((entity*) IFC4X3_RC3_types[110])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[878]));
        ((entity*) IFC4X3_RC3_types[113])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[880]));defs.push_back(((entity*) IFC4X3_RC3_types[983]));
        ((entity*) IFC4X3_RC3_types[881])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[893]));defs.push_back(((entity*) IFC4X3_RC3_types[996]));defs.push_back(((entity*) IFC4X3_RC3_types[997]));
        ((entity*) IFC4X3_RC3_types[793])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[895]));defs.push_back(((entity*) IFC4X3_RC3_types[902]));defs.push_back(((entity*) IFC4X3_RC3_types[1173]));defs.push_back(((entity*) IFC4X3_RC3_types[1174]));defs.push_back(((entity*) IFC4X3_RC3_types[1177]));
        ((entity*) IFC4X3_RC3_types[900])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[898]));defs.push_back(((entity*) IFC4X3_RC3_types[903]));defs.push_back(((entity*) IFC4X3_RC3_types[1175]));defs.push_back(((entity*) IFC4X3_RC3_types[1178]));defs.push_back(((entity*) IFC4X3_RC3_types[1180]));
        ((entity*) IFC4X3_RC3_types[901])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[905]));defs.push_back(((entity*) IFC4X3_RC3_types[945]));defs.push_back(((entity*) IFC4X3_RC3_types[947]));defs.push_back(((entity*) IFC4X3_RC3_types[954]));
        ((entity*) IFC4X3_RC3_types[936])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[906]));defs.push_back(((entity*) IFC4X3_RC3_types[914]));defs.push_back(((entity*) IFC4X3_RC3_types[923]));defs.push_back(((entity*) IFC4X3_RC3_types[935]));defs.push_back(((entity*) IFC4X3_RC3_types[936]));defs.push_back(((entity*) IFC4X3_RC3_types[937]));
        ((entity*) IFC4X3_RC3_types[922])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(6);
        defs.push_back(((entity*) IFC4X3_RC3_types[907]));defs.push_back(((entity*) IFC4X3_RC3_types[908]));defs.push_back(((entity*) IFC4X3_RC3_types[909]));defs.push_back(((entity*) IFC4X3_RC3_types[911]));defs.push_back(((entity*) IFC4X3_RC3_types[912]));defs.push_back(((entity*) IFC4X3_RC3_types[913]));
        ((entity*) IFC4X3_RC3_types[906])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[910]));
        ((entity*) IFC4X3_RC3_types[909])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(7);
        defs.push_back(((entity*) IFC4X3_RC3_types[915]));defs.push_back(((entity*) IFC4X3_RC3_types[916]));defs.push_back(((entity*) IFC4X3_RC3_types[917]));defs.push_back(((entity*) IFC4X3_RC3_types[918]));defs.push_back(((entity*) IFC4X3_RC3_types[919]));defs.push_back(((entity*) IFC4X3_RC3_types[920]));defs.push_back(((entity*) IFC4X3_RC3_types[921]));
        ((entity*) IFC4X3_RC3_types[914])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(16);
        defs.push_back(((entity*) IFC4X3_RC3_types[924]));defs.push_back(((entity*) IFC4X3_RC3_types[927]));defs.push_back(((entity*) IFC4X3_RC3_types[926]));defs.push_back(((entity*) IFC4X3_RC3_types[928]));defs.push_back(((entity*) IFC4X3_RC3_types[929]));defs.push_back(((entity*) IFC4X3_RC3_types[932]));defs.push_back(((entity*) IFC4X3_RC3_types[933]));defs.push_back(((entity*) IFC4X3_RC3_types[934]));defs.push_back(((entity*) IFC4X3_RC3_types[942]));defs.push_back(((entity*) IFC4X3_RC3_types[943]));defs.push_back(((entity*) IFC4X3_RC3_types[944]));defs.push_back(((entity*) IFC4X3_RC3_types[946]));defs.push_back(((entity*) IFC4X3_RC3_types[948]));defs.push_back(((entity*) IFC4X3_RC3_types[949]));defs.push_back(((entity*) IFC4X3_RC3_types[950]));defs.push_back(((entity*) IFC4X3_RC3_types[951]));
        ((entity*) IFC4X3_RC3_types[923])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[925]));defs.push_back(((entity*) IFC4X3_RC3_types[931]));
        ((entity*) IFC4X3_RC3_types[924])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[930]));
        ((entity*) IFC4X3_RC3_types[929])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(4);
        defs.push_back(((entity*) IFC4X3_RC3_types[938]));defs.push_back(((entity*) IFC4X3_RC3_types[939]));defs.push_back(((entity*) IFC4X3_RC3_types[940]));defs.push_back(((entity*) IFC4X3_RC3_types[941]));
        ((entity*) IFC4X3_RC3_types[937])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[952]));
        ((entity*) IFC4X3_RC3_types[951])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[953]));
        ((entity*) IFC4X3_RC3_types[952])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[955]));
        ((entity*) IFC4X3_RC3_types[196])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[968]));
        ((entity*) IFC4X3_RC3_types[967])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[992]));
        ((entity*) IFC4X3_RC3_types[991])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1010]));defs.push_back(((entity*) IFC4X3_RC3_types[1124]));
        ((entity*) IFC4X3_RC3_types[956])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1011]));defs.push_back(((entity*) IFC4X3_RC3_types[1218]));
        ((entity*) IFC4X3_RC3_types[1010])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1032]));defs.push_back(((entity*) IFC4X3_RC3_types[1033]));
        ((entity*) IFC4X3_RC3_types[1031])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[1043]));defs.push_back(((entity*) IFC4X3_RC3_types[1280]));defs.push_back(((entity*) IFC4X3_RC3_types[1294]));
        ((entity*) IFC4X3_RC3_types[521])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1053]));
        ((entity*) IFC4X3_RC3_types[1059])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1059]));defs.push_back(((entity*) IFC4X3_RC3_types[1061]));
        ((entity*) IFC4X3_RC3_types[1056])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1080]));defs.push_back(((entity*) IFC4X3_RC3_types[1113]));
        ((entity*) IFC4X3_RC3_types[1081])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1084]));defs.push_back(((entity*) IFC4X3_RC3_types[1108]));
        ((entity*) IFC4X3_RC3_types[1093])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[1086]));defs.push_back(((entity*) IFC4X3_RC3_types[1110]));defs.push_back(((entity*) IFC4X3_RC3_types[1115]));
        ((entity*) IFC4X3_RC3_types[1080])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[1088]));defs.push_back(((entity*) IFC4X3_RC3_types[1111]));defs.push_back(((entity*) IFC4X3_RC3_types[1117]));
        ((entity*) IFC4X3_RC3_types[1084])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1089]));defs.push_back(((entity*) IFC4X3_RC3_types[1118]));
        ((entity*) IFC4X3_RC3_types[1108])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1091]));
        ((entity*) IFC4X3_RC3_types[1089])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[1092]));defs.push_back(((entity*) IFC4X3_RC3_types[1112]));defs.push_back(((entity*) IFC4X3_RC3_types[1121]));
        ((entity*) IFC4X3_RC3_types[1113])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1094]));
        ((entity*) IFC4X3_RC3_types[1086])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1096]));
        ((entity*) IFC4X3_RC3_types[1098])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1097]));defs.push_back(((entity*) IFC4X3_RC3_types[1100]));
        ((entity*) IFC4X3_RC3_types[1095])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(5);
        defs.push_back(((entity*) IFC4X3_RC3_types[1099]));defs.push_back(((entity*) IFC4X3_RC3_types[1101]));defs.push_back(((entity*) IFC4X3_RC3_types[1102]));defs.push_back(((entity*) IFC4X3_RC3_types[1104]));defs.push_back(((entity*) IFC4X3_RC3_types[1107]));
        ((entity*) IFC4X3_RC3_types[1106])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1103]));
        ((entity*) IFC4X3_RC3_types[1102])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1105]));
        ((entity*) IFC4X3_RC3_types[1104])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1106]));defs.push_back(((entity*) IFC4X3_RC3_types[1137]));
        ((entity*) IFC4X3_RC3_types[1100])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1109]));
        ((entity*) IFC4X3_RC3_types[1115])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1120]));
        ((entity*) IFC4X3_RC3_types[1118])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1123]));
        ((entity*) IFC4X3_RC3_types[1124])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1134]));defs.push_back(((entity*) IFC4X3_RC3_types[1135]));
        ((entity*) IFC4X3_RC3_types[1150])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1143]));
        ((entity*) IFC4X3_RC3_types[1144])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1149]));
        ((entity*) IFC4X3_RC3_types[1148])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1167]));
        ((entity*) IFC4X3_RC3_types[1166])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1190]));
        ((entity*) IFC4X3_RC3_types[1189])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1193]));
        ((entity*) IFC4X3_RC3_types[795])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1236]));
        ((entity*) IFC4X3_RC3_types[1235])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(3);
        defs.push_back(((entity*) IFC4X3_RC3_types[1245]));defs.push_back(((entity*) IFC4X3_RC3_types[1246]));defs.push_back(((entity*) IFC4X3_RC3_types[1247]));
        ((entity*) IFC4X3_RC3_types[1244])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1268]));
        ((entity*) IFC4X3_RC3_types[1266])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1284]));defs.push_back(((entity*) IFC4X3_RC3_types[1285]));
        ((entity*) IFC4X3_RC3_types[1283])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(1);
        defs.push_back(((entity*) IFC4X3_RC3_types[1300]));
        ((entity*) IFC4X3_RC3_types[1295])->set_subtypes(defs);
    }
    {
        std::vector<const entity*> defs; defs.reserve(2);
        defs.push_back(((entity*) IFC4X3_RC3_types[1310]));defs.push_back(((entity*) IFC4X3_RC3_types[1312]));
        ((entity*) IFC4X3_RC3_types[1309])->set_subtypes(defs);
    }

    std::vector<const declaration*> declarations; declarations.reserve(1317);
    declarations.push_back(IFC4X3_RC3_types[0]);
    declarations.push_back(IFC4X3_RC3_types[1]);
    declarations.push_back(IFC4X3_RC3_types[2]);
    declarations.push_back(IFC4X3_RC3_types[3]);
    declarations.push_back(IFC4X3_RC3_types[4]);
    declarations.push_back(IFC4X3_RC3_types[5]);
    declarations.push_back(IFC4X3_RC3_types[6]);
    declarations.push_back(IFC4X3_RC3_types[7]);
    declarations.push_back(IFC4X3_RC3_types[8]);
    declarations.push_back(IFC4X3_RC3_types[9]);
    declarations.push_back(IFC4X3_RC3_types[10]);
    declarations.push_back(IFC4X3_RC3_types[11]);
    declarations.push_back(IFC4X3_RC3_types[12]);
    declarations.push_back(IFC4X3_RC3_types[13]);
    declarations.push_back(IFC4X3_RC3_types[14]);
    declarations.push_back(IFC4X3_RC3_types[15]);
    declarations.push_back(IFC4X3_RC3_types[16]);
    declarations.push_back(IFC4X3_RC3_types[17]);
    declarations.push_back(IFC4X3_RC3_types[18]);
    declarations.push_back(IFC4X3_RC3_types[19]);
    declarations.push_back(IFC4X3_RC3_types[20]);
    declarations.push_back(IFC4X3_RC3_types[21]);
    declarations.push_back(IFC4X3_RC3_types[22]);
    declarations.push_back(IFC4X3_RC3_types[23]);
    declarations.push_back(IFC4X3_RC3_types[24]);
    declarations.push_back(IFC4X3_RC3_types[25]);
    declarations.push_back(IFC4X3_RC3_types[26]);
    declarations.push_back(IFC4X3_RC3_types[27]);
    declarations.push_back(IFC4X3_RC3_types[28]);
    declarations.push_back(IFC4X3_RC3_types[29]);
    declarations.push_back(IFC4X3_RC3_types[30]);
    declarations.push_back(IFC4X3_RC3_types[31]);
    declarations.push_back(IFC4X3_RC3_types[32]);
    declarations.push_back(IFC4X3_RC3_types[33]);
    declarations.push_back(IFC4X3_RC3_types[34]);
    declarations.push_back(IFC4X3_RC3_types[35]);
    declarations.push_back(IFC4X3_RC3_types[36]);
    declarations.push_back(IFC4X3_RC3_types[37]);
    declarations.push_back(IFC4X3_RC3_types[38]);
    declarations.push_back(IFC4X3_RC3_types[39]);
    declarations.push_back(IFC4X3_RC3_types[40]);
    declarations.push_back(IFC4X3_RC3_types[41]);
    declarations.push_back(IFC4X3_RC3_types[42]);
    declarations.push_back(IFC4X3_RC3_types[43]);
    declarations.push_back(IFC4X3_RC3_types[44]);
    declarations.push_back(IFC4X3_RC3_types[45]);
    declarations.push_back(IFC4X3_RC3_types[46]);
    declarations.push_back(IFC4X3_RC3_types[47]);
    declarations.push_back(IFC4X3_RC3_types[48]);
    declarations.push_back(IFC4X3_RC3_types[49]);
    declarations.push_back(IFC4X3_RC3_types[50]);
    declarations.push_back(IFC4X3_RC3_types[51]);
    declarations.push_back(IFC4X3_RC3_types[52]);
    declarations.push_back(IFC4X3_RC3_types[53]);
    declarations.push_back(IFC4X3_RC3_types[54]);
    declarations.push_back(IFC4X3_RC3_types[55]);
    declarations.push_back(IFC4X3_RC3_types[56]);
    declarations.push_back(IFC4X3_RC3_types[57]);
    declarations.push_back(IFC4X3_RC3_types[58]);
    declarations.push_back(IFC4X3_RC3_types[59]);
    declarations.push_back(IFC4X3_RC3_types[60]);
    declarations.push_back(IFC4X3_RC3_types[61]);
    declarations.push_back(IFC4X3_RC3_types[62]);
    declarations.push_back(IFC4X3_RC3_types[63]);
    declarations.push_back(IFC4X3_RC3_types[64]);
    declarations.push_back(IFC4X3_RC3_types[65]);
    declarations.push_back(IFC4X3_RC3_types[66]);
    declarations.push_back(IFC4X3_RC3_types[67]);
    declarations.push_back(IFC4X3_RC3_types[68]);
    declarations.push_back(IFC4X3_RC3_types[69]);
    declarations.push_back(IFC4X3_RC3_types[70]);
    declarations.push_back(IFC4X3_RC3_types[71]);
    declarations.push_back(IFC4X3_RC3_types[72]);
    declarations.push_back(IFC4X3_RC3_types[73]);
    declarations.push_back(IFC4X3_RC3_types[74]);
    declarations.push_back(IFC4X3_RC3_types[75]);
    declarations.push_back(IFC4X3_RC3_types[76]);
    declarations.push_back(IFC4X3_RC3_types[77]);
    declarations.push_back(IFC4X3_RC3_types[78]);
    declarations.push_back(IFC4X3_RC3_types[79]);
    declarations.push_back(IFC4X3_RC3_types[80]);
    declarations.push_back(IFC4X3_RC3_types[81]);
    declarations.push_back(IFC4X3_RC3_types[82]);
    declarations.push_back(IFC4X3_RC3_types[83]);
    declarations.push_back(IFC4X3_RC3_types[84]);
    declarations.push_back(IFC4X3_RC3_types[85]);
    declarations.push_back(IFC4X3_RC3_types[86]);
    declarations.push_back(IFC4X3_RC3_types[87]);
    declarations.push_back(IFC4X3_RC3_types[88]);
    declarations.push_back(IFC4X3_RC3_types[89]);
    declarations.push_back(IFC4X3_RC3_types[90]);
    declarations.push_back(IFC4X3_RC3_types[91]);
    declarations.push_back(IFC4X3_RC3_types[92]);
    declarations.push_back(IFC4X3_RC3_types[93]);
    declarations.push_back(IFC4X3_RC3_types[94]);
    declarations.push_back(IFC4X3_RC3_types[95]);
    declarations.push_back(IFC4X3_RC3_types[96]);
    declarations.push_back(IFC4X3_RC3_types[97]);
    declarations.push_back(IFC4X3_RC3_types[98]);
    declarations.push_back(IFC4X3_RC3_types[99]);
    declarations.push_back(IFC4X3_RC3_types[100]);
    declarations.push_back(IFC4X3_RC3_types[101]);
    declarations.push_back(IFC4X3_RC3_types[102]);
    declarations.push_back(IFC4X3_RC3_types[103]);
    declarations.push_back(IFC4X3_RC3_types[104]);
    declarations.push_back(IFC4X3_RC3_types[105]);
    declarations.push_back(IFC4X3_RC3_types[106]);
    declarations.push_back(IFC4X3_RC3_types[107]);
    declarations.push_back(IFC4X3_RC3_types[108]);
    declarations.push_back(IFC4X3_RC3_types[109]);
    declarations.push_back(IFC4X3_RC3_types[110]);
    declarations.push_back(IFC4X3_RC3_types[111]);
    declarations.push_back(IFC4X3_RC3_types[112]);
    declarations.push_back(IFC4X3_RC3_types[113]);
    declarations.push_back(IFC4X3_RC3_types[114]);
    declarations.push_back(IFC4X3_RC3_types[115]);
    declarations.push_back(IFC4X3_RC3_types[116]);
    declarations.push_back(IFC4X3_RC3_types[117]);
    declarations.push_back(IFC4X3_RC3_types[118]);
    declarations.push_back(IFC4X3_RC3_types[119]);
    declarations.push_back(IFC4X3_RC3_types[120]);
    declarations.push_back(IFC4X3_RC3_types[121]);
    declarations.push_back(IFC4X3_RC3_types[122]);
    declarations.push_back(IFC4X3_RC3_types[123]);
    declarations.push_back(IFC4X3_RC3_types[124]);
    declarations.push_back(IFC4X3_RC3_types[125]);
    declarations.push_back(IFC4X3_RC3_types[126]);
    declarations.push_back(IFC4X3_RC3_types[127]);
    declarations.push_back(IFC4X3_RC3_types[128]);
    declarations.push_back(IFC4X3_RC3_types[129]);
    declarations.push_back(IFC4X3_RC3_types[130]);
    declarations.push_back(IFC4X3_RC3_types[131]);
    declarations.push_back(IFC4X3_RC3_types[132]);
    declarations.push_back(IFC4X3_RC3_types[133]);
    declarations.push_back(IFC4X3_RC3_types[134]);
    declarations.push_back(IFC4X3_RC3_types[135]);
    declarations.push_back(IFC4X3_RC3_types[136]);
    declarations.push_back(IFC4X3_RC3_types[137]);
    declarations.push_back(IFC4X3_RC3_types[138]);
    declarations.push_back(IFC4X3_RC3_types[139]);
    declarations.push_back(IFC4X3_RC3_types[140]);
    declarations.push_back(IFC4X3_RC3_types[141]);
    declarations.push_back(IFC4X3_RC3_types[142]);
    declarations.push_back(IFC4X3_RC3_types[143]);
    declarations.push_back(IFC4X3_RC3_types[144]);
    declarations.push_back(IFC4X3_RC3_types[145]);
    declarations.push_back(IFC4X3_RC3_types[146]);
    declarations.push_back(IFC4X3_RC3_types[147]);
    declarations.push_back(IFC4X3_RC3_types[148]);
    declarations.push_back(IFC4X3_RC3_types[149]);
    declarations.push_back(IFC4X3_RC3_types[150]);
    declarations.push_back(IFC4X3_RC3_types[151]);
    declarations.push_back(IFC4X3_RC3_types[152]);
    declarations.push_back(IFC4X3_RC3_types[153]);
    declarations.push_back(IFC4X3_RC3_types[154]);
    declarations.push_back(IFC4X3_RC3_types[155]);
    declarations.push_back(IFC4X3_RC3_types[156]);
    declarations.push_back(IFC4X3_RC3_types[157]);
    declarations.push_back(IFC4X3_RC3_types[158]);
    declarations.push_back(IFC4X3_RC3_types[159]);
    declarations.push_back(IFC4X3_RC3_types[160]);
    declarations.push_back(IFC4X3_RC3_types[161]);
    declarations.push_back(IFC4X3_RC3_types[162]);
    declarations.push_back(IFC4X3_RC3_types[163]);
    declarations.push_back(IFC4X3_RC3_types[164]);
    declarations.push_back(IFC4X3_RC3_types[165]);
    declarations.push_back(IFC4X3_RC3_types[166]);
    declarations.push_back(IFC4X3_RC3_types[167]);
    declarations.push_back(IFC4X3_RC3_types[168]);
    declarations.push_back(IFC4X3_RC3_types[169]);
    declarations.push_back(IFC4X3_RC3_types[170]);
    declarations.push_back(IFC4X3_RC3_types[171]);
    declarations.push_back(IFC4X3_RC3_types[172]);
    declarations.push_back(IFC4X3_RC3_types[173]);
    declarations.push_back(IFC4X3_RC3_types[174]);
    declarations.push_back(IFC4X3_RC3_types[175]);
    declarations.push_back(IFC4X3_RC3_types[176]);
    declarations.push_back(IFC4X3_RC3_types[177]);
    declarations.push_back(IFC4X3_RC3_types[178]);
    declarations.push_back(IFC4X3_RC3_types[179]);
    declarations.push_back(IFC4X3_RC3_types[180]);
    declarations.push_back(IFC4X3_RC3_types[181]);
    declarations.push_back(IFC4X3_RC3_types[182]);
    declarations.push_back(IFC4X3_RC3_types[183]);
    declarations.push_back(IFC4X3_RC3_types[184]);
    declarations.push_back(IFC4X3_RC3_types[185]);
    declarations.push_back(IFC4X3_RC3_types[186]);
    declarations.push_back(IFC4X3_RC3_types[187]);
    declarations.push_back(IFC4X3_RC3_types[188]);
    declarations.push_back(IFC4X3_RC3_types[189]);
    declarations.push_back(IFC4X3_RC3_types[190]);
    declarations.push_back(IFC4X3_RC3_types[191]);
    declarations.push_back(IFC4X3_RC3_types[192]);
    declarations.push_back(IFC4X3_RC3_types[193]);
    declarations.push_back(IFC4X3_RC3_types[194]);
    declarations.push_back(IFC4X3_RC3_types[195]);
    declarations.push_back(IFC4X3_RC3_types[196]);
    declarations.push_back(IFC4X3_RC3_types[197]);
    declarations.push_back(IFC4X3_RC3_types[198]);
    declarations.push_back(IFC4X3_RC3_types[199]);
    declarations.push_back(IFC4X3_RC3_types[200]);
    declarations.push_back(IFC4X3_RC3_types[201]);
    declarations.push_back(IFC4X3_RC3_types[202]);
    declarations.push_back(IFC4X3_RC3_types[203]);
    declarations.push_back(IFC4X3_RC3_types[204]);
    declarations.push_back(IFC4X3_RC3_types[205]);
    declarations.push_back(IFC4X3_RC3_types[206]);
    declarations.push_back(IFC4X3_RC3_types[207]);
    declarations.push_back(IFC4X3_RC3_types[208]);
    declarations.push_back(IFC4X3_RC3_types[209]);
    declarations.push_back(IFC4X3_RC3_types[210]);
    declarations.push_back(IFC4X3_RC3_types[211]);
    declarations.push_back(IFC4X3_RC3_types[212]);
    declarations.push_back(IFC4X3_RC3_types[213]);
    declarations.push_back(IFC4X3_RC3_types[214]);
    declarations.push_back(IFC4X3_RC3_types[215]);
    declarations.push_back(IFC4X3_RC3_types[216]);
    declarations.push_back(IFC4X3_RC3_types[217]);
    declarations.push_back(IFC4X3_RC3_types[218]);
    declarations.push_back(IFC4X3_RC3_types[219]);
    declarations.push_back(IFC4X3_RC3_types[220]);
    declarations.push_back(IFC4X3_RC3_types[221]);
    declarations.push_back(IFC4X3_RC3_types[222]);
    declarations.push_back(IFC4X3_RC3_types[223]);
    declarations.push_back(IFC4X3_RC3_types[224]);
    declarations.push_back(IFC4X3_RC3_types[225]);
    declarations.push_back(IFC4X3_RC3_types[226]);
    declarations.push_back(IFC4X3_RC3_types[227]);
    declarations.push_back(IFC4X3_RC3_types[228]);
    declarations.push_back(IFC4X3_RC3_types[229]);
    declarations.push_back(IFC4X3_RC3_types[230]);
    declarations.push_back(IFC4X3_RC3_types[231]);
    declarations.push_back(IFC4X3_RC3_types[232]);
    declarations.push_back(IFC4X3_RC3_types[233]);
    declarations.push_back(IFC4X3_RC3_types[234]);
    declarations.push_back(IFC4X3_RC3_types[235]);
    declarations.push_back(IFC4X3_RC3_types[236]);
    declarations.push_back(IFC4X3_RC3_types[237]);
    declarations.push_back(IFC4X3_RC3_types[238]);
    declarations.push_back(IFC4X3_RC3_types[239]);
    declarations.push_back(IFC4X3_RC3_types[240]);
    declarations.push_back(IFC4X3_RC3_types[241]);
    declarations.push_back(IFC4X3_RC3_types[242]);
    declarations.push_back(IFC4X3_RC3_types[243]);
    declarations.push_back(IFC4X3_RC3_types[244]);
    declarations.push_back(IFC4X3_RC3_types[245]);
    declarations.push_back(IFC4X3_RC3_types[246]);
    declarations.push_back(IFC4X3_RC3_types[247]);
    declarations.push_back(IFC4X3_RC3_types[248]);
    declarations.push_back(IFC4X3_RC3_types[249]);
    declarations.push_back(IFC4X3_RC3_types[250]);
    declarations.push_back(IFC4X3_RC3_types[251]);
    declarations.push_back(IFC4X3_RC3_types[252]);
    declarations.push_back(IFC4X3_RC3_types[253]);
    declarations.push_back(IFC4X3_RC3_types[254]);
    declarations.push_back(IFC4X3_RC3_types[255]);
    declarations.push_back(IFC4X3_RC3_types[256]);
    declarations.push_back(IFC4X3_RC3_types[257]);
    declarations.push_back(IFC4X3_RC3_types[258]);
    declarations.push_back(IFC4X3_RC3_types[259]);
    declarations.push_back(IFC4X3_RC3_types[260]);
    declarations.push_back(IFC4X3_RC3_types[261]);
    declarations.push_back(IFC4X3_RC3_types[262]);
    declarations.push_back(IFC4X3_RC3_types[263]);
    declarations.push_back(IFC4X3_RC3_types[264]);
    declarations.push_back(IFC4X3_RC3_types[265]);
    declarations.push_back(IFC4X3_RC3_types[266]);
    declarations.push_back(IFC4X3_RC3_types[267]);
    declarations.push_back(IFC4X3_RC3_types[268]);
    declarations.push_back(IFC4X3_RC3_types[269]);
    declarations.push_back(IFC4X3_RC3_types[270]);
    declarations.push_back(IFC4X3_RC3_types[271]);
    declarations.push_back(IFC4X3_RC3_types[272]);
    declarations.push_back(IFC4X3_RC3_types[273]);
    declarations.push_back(IFC4X3_RC3_types[274]);
    declarations.push_back(IFC4X3_RC3_types[275]);
    declarations.push_back(IFC4X3_RC3_types[276]);
    declarations.push_back(IFC4X3_RC3_types[277]);
    declarations.push_back(IFC4X3_RC3_types[278]);
    declarations.push_back(IFC4X3_RC3_types[279]);
    declarations.push_back(IFC4X3_RC3_types[280]);
    declarations.push_back(IFC4X3_RC3_types[281]);
    declarations.push_back(IFC4X3_RC3_types[282]);
    declarations.push_back(IFC4X3_RC3_types[283]);
    declarations.push_back(IFC4X3_RC3_types[284]);
    declarations.push_back(IFC4X3_RC3_types[285]);
    declarations.push_back(IFC4X3_RC3_types[286]);
    declarations.push_back(IFC4X3_RC3_types[287]);
    declarations.push_back(IFC4X3_RC3_types[288]);
    declarations.push_back(IFC4X3_RC3_types[289]);
    declarations.push_back(IFC4X3_RC3_types[290]);
    declarations.push_back(IFC4X3_RC3_types[291]);
    declarations.push_back(IFC4X3_RC3_types[292]);
    declarations.push_back(IFC4X3_RC3_types[293]);
    declarations.push_back(IFC4X3_RC3_types[294]);
    declarations.push_back(IFC4X3_RC3_types[295]);
    declarations.push_back(IFC4X3_RC3_types[296]);
    declarations.push_back(IFC4X3_RC3_types[297]);
    declarations.push_back(IFC4X3_RC3_types[298]);
    declarations.push_back(IFC4X3_RC3_types[299]);
    declarations.push_back(IFC4X3_RC3_types[300]);
    declarations.push_back(IFC4X3_RC3_types[301]);
    declarations.push_back(IFC4X3_RC3_types[302]);
    declarations.push_back(IFC4X3_RC3_types[303]);
    declarations.push_back(IFC4X3_RC3_types[304]);
    declarations.push_back(IFC4X3_RC3_types[305]);
    declarations.push_back(IFC4X3_RC3_types[306]);
    declarations.push_back(IFC4X3_RC3_types[307]);
    declarations.push_back(IFC4X3_RC3_types[308]);
    declarations.push_back(IFC4X3_RC3_types[309]);
    declarations.push_back(IFC4X3_RC3_types[310]);
    declarations.push_back(IFC4X3_RC3_types[311]);
    declarations.push_back(IFC4X3_RC3_types[312]);
    declarations.push_back(IFC4X3_RC3_types[313]);
    declarations.push_back(IFC4X3_RC3_types[314]);
    declarations.push_back(IFC4X3_RC3_types[315]);
    declarations.push_back(IFC4X3_RC3_types[316]);
    declarations.push_back(IFC4X3_RC3_types[317]);
    declarations.push_back(IFC4X3_RC3_types[318]);
    declarations.push_back(IFC4X3_RC3_types[319]);
    declarations.push_back(IFC4X3_RC3_types[320]);
    declarations.push_back(IFC4X3_RC3_types[321]);
    declarations.push_back(IFC4X3_RC3_types[322]);
    declarations.push_back(IFC4X3_RC3_types[323]);
    declarations.push_back(IFC4X3_RC3_types[324]);
    declarations.push_back(IFC4X3_RC3_types[325]);
    declarations.push_back(IFC4X3_RC3_types[326]);
    declarations.push_back(IFC4X3_RC3_types[327]);
    declarations.push_back(IFC4X3_RC3_types[328]);
    declarations.push_back(IFC4X3_RC3_types[329]);
    declarations.push_back(IFC4X3_RC3_types[330]);
    declarations.push_back(IFC4X3_RC3_types[331]);
    declarations.push_back(IFC4X3_RC3_types[332]);
    declarations.push_back(IFC4X3_RC3_types[333]);
    declarations.push_back(IFC4X3_RC3_types[334]);
    declarations.push_back(IFC4X3_RC3_types[335]);
    declarations.push_back(IFC4X3_RC3_types[336]);
    declarations.push_back(IFC4X3_RC3_types[337]);
    declarations.push_back(IFC4X3_RC3_types[338]);
    declarations.push_back(IFC4X3_RC3_types[339]);
    declarations.push_back(IFC4X3_RC3_types[340]);
    declarations.push_back(IFC4X3_RC3_types[341]);
    declarations.push_back(IFC4X3_RC3_types[342]);
    declarations.push_back(IFC4X3_RC3_types[343]);
    declarations.push_back(IFC4X3_RC3_types[344]);
    declarations.push_back(IFC4X3_RC3_types[345]);
    declarations.push_back(IFC4X3_RC3_types[346]);
    declarations.push_back(IFC4X3_RC3_types[347]);
    declarations.push_back(IFC4X3_RC3_types[348]);
    declarations.push_back(IFC4X3_RC3_types[349]);
    declarations.push_back(IFC4X3_RC3_types[350]);
    declarations.push_back(IFC4X3_RC3_types[351]);
    declarations.push_back(IFC4X3_RC3_types[352]);
    declarations.push_back(IFC4X3_RC3_types[353]);
    declarations.push_back(IFC4X3_RC3_types[354]);
    declarations.push_back(IFC4X3_RC3_types[355]);
    declarations.push_back(IFC4X3_RC3_types[356]);
    declarations.push_back(IFC4X3_RC3_types[357]);
    declarations.push_back(IFC4X3_RC3_types[358]);
    declarations.push_back(IFC4X3_RC3_types[359]);
    declarations.push_back(IFC4X3_RC3_types[360]);
    declarations.push_back(IFC4X3_RC3_types[361]);
    declarations.push_back(IFC4X3_RC3_types[362]);
    declarations.push_back(IFC4X3_RC3_types[363]);
    declarations.push_back(IFC4X3_RC3_types[364]);
    declarations.push_back(IFC4X3_RC3_types[365]);
    declarations.push_back(IFC4X3_RC3_types[366]);
    declarations.push_back(IFC4X3_RC3_types[367]);
    declarations.push_back(IFC4X3_RC3_types[368]);
    declarations.push_back(IFC4X3_RC3_types[369]);
    declarations.push_back(IFC4X3_RC3_types[370]);
    declarations.push_back(IFC4X3_RC3_types[371]);
    declarations.push_back(IFC4X3_RC3_types[372]);
    declarations.push_back(IFC4X3_RC3_types[373]);
    declarations.push_back(IFC4X3_RC3_types[374]);
    declarations.push_back(IFC4X3_RC3_types[375]);
    declarations.push_back(IFC4X3_RC3_types[376]);
    declarations.push_back(IFC4X3_RC3_types[377]);
    declarations.push_back(IFC4X3_RC3_types[378]);
    declarations.push_back(IFC4X3_RC3_types[379]);
    declarations.push_back(IFC4X3_RC3_types[380]);
    declarations.push_back(IFC4X3_RC3_types[381]);
    declarations.push_back(IFC4X3_RC3_types[382]);
    declarations.push_back(IFC4X3_RC3_types[383]);
    declarations.push_back(IFC4X3_RC3_types[384]);
    declarations.push_back(IFC4X3_RC3_types[385]);
    declarations.push_back(IFC4X3_RC3_types[386]);
    declarations.push_back(IFC4X3_RC3_types[387]);
    declarations.push_back(IFC4X3_RC3_types[388]);
    declarations.push_back(IFC4X3_RC3_types[389]);
    declarations.push_back(IFC4X3_RC3_types[390]);
    declarations.push_back(IFC4X3_RC3_types[391]);
    declarations.push_back(IFC4X3_RC3_types[392]);
    declarations.push_back(IFC4X3_RC3_types[393]);
    declarations.push_back(IFC4X3_RC3_types[394]);
    declarations.push_back(IFC4X3_RC3_types[395]);
    declarations.push_back(IFC4X3_RC3_types[396]);
    declarations.push_back(IFC4X3_RC3_types[397]);
    declarations.push_back(IFC4X3_RC3_types[398]);
    declarations.push_back(IFC4X3_RC3_types[399]);
    declarations.push_back(IFC4X3_RC3_types[400]);
    declarations.push_back(IFC4X3_RC3_types[401]);
    declarations.push_back(IFC4X3_RC3_types[402]);
    declarations.push_back(IFC4X3_RC3_types[403]);
    declarations.push_back(IFC4X3_RC3_types[404]);
    declarations.push_back(IFC4X3_RC3_types[405]);
    declarations.push_back(IFC4X3_RC3_types[406]);
    declarations.push_back(IFC4X3_RC3_types[407]);
    declarations.push_back(IFC4X3_RC3_types[408]);
    declarations.push_back(IFC4X3_RC3_types[409]);
    declarations.push_back(IFC4X3_RC3_types[410]);
    declarations.push_back(IFC4X3_RC3_types[411]);
    declarations.push_back(IFC4X3_RC3_types[412]);
    declarations.push_back(IFC4X3_RC3_types[413]);
    declarations.push_back(IFC4X3_RC3_types[414]);
    declarations.push_back(IFC4X3_RC3_types[415]);
    declarations.push_back(IFC4X3_RC3_types[416]);
    declarations.push_back(IFC4X3_RC3_types[417]);
    declarations.push_back(IFC4X3_RC3_types[418]);
    declarations.push_back(IFC4X3_RC3_types[419]);
    declarations.push_back(IFC4X3_RC3_types[420]);
    declarations.push_back(IFC4X3_RC3_types[421]);
    declarations.push_back(IFC4X3_RC3_types[422]);
    declarations.push_back(IFC4X3_RC3_types[423]);
    declarations.push_back(IFC4X3_RC3_types[424]);
    declarations.push_back(IFC4X3_RC3_types[425]);
    declarations.push_back(IFC4X3_RC3_types[426]);
    declarations.push_back(IFC4X3_RC3_types[427]);
    declarations.push_back(IFC4X3_RC3_types[428]);
    declarations.push_back(IFC4X3_RC3_types[429]);
    declarations.push_back(IFC4X3_RC3_types[430]);
    declarations.push_back(IFC4X3_RC3_types[431]);
    declarations.push_back(IFC4X3_RC3_types[432]);
    declarations.push_back(IFC4X3_RC3_types[433]);
    declarations.push_back(IFC4X3_RC3_types[434]);
    declarations.push_back(IFC4X3_RC3_types[435]);
    declarations.push_back(IFC4X3_RC3_types[436]);
    declarations.push_back(IFC4X3_RC3_types[437]);
    declarations.push_back(IFC4X3_RC3_types[438]);
    declarations.push_back(IFC4X3_RC3_types[439]);
    declarations.push_back(IFC4X3_RC3_types[440]);
    declarations.push_back(IFC4X3_RC3_types[441]);
    declarations.push_back(IFC4X3_RC3_types[442]);
    declarations.push_back(IFC4X3_RC3_types[443]);
    declarations.push_back(IFC4X3_RC3_types[444]);
    declarations.push_back(IFC4X3_RC3_types[445]);
    declarations.push_back(IFC4X3_RC3_types[446]);
    declarations.push_back(IFC4X3_RC3_types[447]);
    declarations.push_back(IFC4X3_RC3_types[448]);
    declarations.push_back(IFC4X3_RC3_types[449]);
    declarations.push_back(IFC4X3_RC3_types[450]);
    declarations.push_back(IFC4X3_RC3_types[451]);
    declarations.push_back(IFC4X3_RC3_types[452]);
    declarations.push_back(IFC4X3_RC3_types[453]);
    declarations.push_back(IFC4X3_RC3_types[454]);
    declarations.push_back(IFC4X3_RC3_types[455]);
    declarations.push_back(IFC4X3_RC3_types[456]);
    declarations.push_back(IFC4X3_RC3_types[457]);
    declarations.push_back(IFC4X3_RC3_types[458]);
    declarations.push_back(IFC4X3_RC3_types[459]);
    declarations.push_back(IFC4X3_RC3_types[460]);
    declarations.push_back(IFC4X3_RC3_types[461]);
    declarations.push_back(IFC4X3_RC3_types[462]);
    declarations.push_back(IFC4X3_RC3_types[463]);
    declarations.push_back(IFC4X3_RC3_types[464]);
    declarations.push_back(IFC4X3_RC3_types[465]);
    declarations.push_back(IFC4X3_RC3_types[466]);
    declarations.push_back(IFC4X3_RC3_types[467]);
    declarations.push_back(IFC4X3_RC3_types[468]);
    declarations.push_back(IFC4X3_RC3_types[469]);
    declarations.push_back(IFC4X3_RC3_types[470]);
    declarations.push_back(IFC4X3_RC3_types[471]);
    declarations.push_back(IFC4X3_RC3_types[472]);
    declarations.push_back(IFC4X3_RC3_types[473]);
    declarations.push_back(IFC4X3_RC3_types[474]);
    declarations.push_back(IFC4X3_RC3_types[475]);
    declarations.push_back(IFC4X3_RC3_types[476]);
    declarations.push_back(IFC4X3_RC3_types[477]);
    declarations.push_back(IFC4X3_RC3_types[478]);
    declarations.push_back(IFC4X3_RC3_types[479]);
    declarations.push_back(IFC4X3_RC3_types[480]);
    declarations.push_back(IFC4X3_RC3_types[481]);
    declarations.push_back(IFC4X3_RC3_types[482]);
    declarations.push_back(IFC4X3_RC3_types[483]);
    declarations.push_back(IFC4X3_RC3_types[484]);
    declarations.push_back(IFC4X3_RC3_types[485]);
    declarations.push_back(IFC4X3_RC3_types[486]);
    declarations.push_back(IFC4X3_RC3_types[487]);
    declarations.push_back(IFC4X3_RC3_types[488]);
    declarations.push_back(IFC4X3_RC3_types[489]);
    declarations.push_back(IFC4X3_RC3_types[490]);
    declarations.push_back(IFC4X3_RC3_types[491]);
    declarations.push_back(IFC4X3_RC3_types[492]);
    declarations.push_back(IFC4X3_RC3_types[493]);
    declarations.push_back(IFC4X3_RC3_types[494]);
    declarations.push_back(IFC4X3_RC3_types[495]);
    declarations.push_back(IFC4X3_RC3_types[496]);
    declarations.push_back(IFC4X3_RC3_types[497]);
    declarations.push_back(IFC4X3_RC3_types[498]);
    declarations.push_back(IFC4X3_RC3_types[499]);
    declarations.push_back(IFC4X3_RC3_types[500]);
    declarations.push_back(IFC4X3_RC3_types[501]);
    declarations.push_back(IFC4X3_RC3_types[502]);
    declarations.push_back(IFC4X3_RC3_types[503]);
    declarations.push_back(IFC4X3_RC3_types[504]);
    declarations.push_back(IFC4X3_RC3_types[505]);
    declarations.push_back(IFC4X3_RC3_types[506]);
    declarations.push_back(IFC4X3_RC3_types[507]);
    declarations.push_back(IFC4X3_RC3_types[508]);
    declarations.push_back(IFC4X3_RC3_types[509]);
    declarations.push_back(IFC4X3_RC3_types[510]);
    declarations.push_back(IFC4X3_RC3_types[511]);
    declarations.push_back(IFC4X3_RC3_types[512]);
    declarations.push_back(IFC4X3_RC3_types[513]);
    declarations.push_back(IFC4X3_RC3_types[514]);
    declarations.push_back(IFC4X3_RC3_types[515]);
    declarations.push_back(IFC4X3_RC3_types[516]);
    declarations.push_back(IFC4X3_RC3_types[517]);
    declarations.push_back(IFC4X3_RC3_types[518]);
    declarations.push_back(IFC4X3_RC3_types[519]);
    declarations.push_back(IFC4X3_RC3_types[520]);
    declarations.push_back(IFC4X3_RC3_types[521]);
    declarations.push_back(IFC4X3_RC3_types[522]);
    declarations.push_back(IFC4X3_RC3_types[523]);
    declarations.push_back(IFC4X3_RC3_types[524]);
    declarations.push_back(IFC4X3_RC3_types[525]);
    declarations.push_back(IFC4X3_RC3_types[526]);
    declarations.push_back(IFC4X3_RC3_types[527]);
    declarations.push_back(IFC4X3_RC3_types[528]);
    declarations.push_back(IFC4X3_RC3_types[529]);
    declarations.push_back(IFC4X3_RC3_types[530]);
    declarations.push_back(IFC4X3_RC3_types[531]);
    declarations.push_back(IFC4X3_RC3_types[532]);
    declarations.push_back(IFC4X3_RC3_types[533]);
    declarations.push_back(IFC4X3_RC3_types[534]);
    declarations.push_back(IFC4X3_RC3_types[535]);
    declarations.push_back(IFC4X3_RC3_types[536]);
    declarations.push_back(IFC4X3_RC3_types[537]);
    declarations.push_back(IFC4X3_RC3_types[538]);
    declarations.push_back(IFC4X3_RC3_types[539]);
    declarations.push_back(IFC4X3_RC3_types[540]);
    declarations.push_back(IFC4X3_RC3_types[541]);
    declarations.push_back(IFC4X3_RC3_types[542]);
    declarations.push_back(IFC4X3_RC3_types[543]);
    declarations.push_back(IFC4X3_RC3_types[544]);
    declarations.push_back(IFC4X3_RC3_types[545]);
    declarations.push_back(IFC4X3_RC3_types[546]);
    declarations.push_back(IFC4X3_RC3_types[547]);
    declarations.push_back(IFC4X3_RC3_types[548]);
    declarations.push_back(IFC4X3_RC3_types[549]);
    declarations.push_back(IFC4X3_RC3_types[550]);
    declarations.push_back(IFC4X3_RC3_types[551]);
    declarations.push_back(IFC4X3_RC3_types[552]);
    declarations.push_back(IFC4X3_RC3_types[553]);
    declarations.push_back(IFC4X3_RC3_types[554]);
    declarations.push_back(IFC4X3_RC3_types[555]);
    declarations.push_back(IFC4X3_RC3_types[556]);
    declarations.push_back(IFC4X3_RC3_types[557]);
    declarations.push_back(IFC4X3_RC3_types[558]);
    declarations.push_back(IFC4X3_RC3_types[559]);
    declarations.push_back(IFC4X3_RC3_types[560]);
    declarations.push_back(IFC4X3_RC3_types[561]);
    declarations.push_back(IFC4X3_RC3_types[562]);
    declarations.push_back(IFC4X3_RC3_types[563]);
    declarations.push_back(IFC4X3_RC3_types[564]);
    declarations.push_back(IFC4X3_RC3_types[565]);
    declarations.push_back(IFC4X3_RC3_types[566]);
    declarations.push_back(IFC4X3_RC3_types[567]);
    declarations.push_back(IFC4X3_RC3_types[568]);
    declarations.push_back(IFC4X3_RC3_types[569]);
    declarations.push_back(IFC4X3_RC3_types[570]);
    declarations.push_back(IFC4X3_RC3_types[571]);
    declarations.push_back(IFC4X3_RC3_types[572]);
    declarations.push_back(IFC4X3_RC3_types[573]);
    declarations.push_back(IFC4X3_RC3_types[574]);
    declarations.push_back(IFC4X3_RC3_types[575]);
    declarations.push_back(IFC4X3_RC3_types[576]);
    declarations.push_back(IFC4X3_RC3_types[577]);
    declarations.push_back(IFC4X3_RC3_types[578]);
    declarations.push_back(IFC4X3_RC3_types[579]);
    declarations.push_back(IFC4X3_RC3_types[580]);
    declarations.push_back(IFC4X3_RC3_types[581]);
    declarations.push_back(IFC4X3_RC3_types[582]);
    declarations.push_back(IFC4X3_RC3_types[583]);
    declarations.push_back(IFC4X3_RC3_types[584]);
    declarations.push_back(IFC4X3_RC3_types[585]);
    declarations.push_back(IFC4X3_RC3_types[586]);
    declarations.push_back(IFC4X3_RC3_types[587]);
    declarations.push_back(IFC4X3_RC3_types[588]);
    declarations.push_back(IFC4X3_RC3_types[589]);
    declarations.push_back(IFC4X3_RC3_types[590]);
    declarations.push_back(IFC4X3_RC3_types[591]);
    declarations.push_back(IFC4X3_RC3_types[592]);
    declarations.push_back(IFC4X3_RC3_types[593]);
    declarations.push_back(IFC4X3_RC3_types[594]);
    declarations.push_back(IFC4X3_RC3_types[595]);
    declarations.push_back(IFC4X3_RC3_types[596]);
    declarations.push_back(IFC4X3_RC3_types[597]);
    declarations.push_back(IFC4X3_RC3_types[598]);
    declarations.push_back(IFC4X3_RC3_types[599]);
    declarations.push_back(IFC4X3_RC3_types[600]);
    declarations.push_back(IFC4X3_RC3_types[601]);
    declarations.push_back(IFC4X3_RC3_types[602]);
    declarations.push_back(IFC4X3_RC3_types[603]);
    declarations.push_back(IFC4X3_RC3_types[604]);
    declarations.push_back(IFC4X3_RC3_types[605]);
    declarations.push_back(IFC4X3_RC3_types[606]);
    declarations.push_back(IFC4X3_RC3_types[607]);
    declarations.push_back(IFC4X3_RC3_types[608]);
    declarations.push_back(IFC4X3_RC3_types[609]);
    declarations.push_back(IFC4X3_RC3_types[610]);
    declarations.push_back(IFC4X3_RC3_types[611]);
    declarations.push_back(IFC4X3_RC3_types[612]);
    declarations.push_back(IFC4X3_RC3_types[613]);
    declarations.push_back(IFC4X3_RC3_types[614]);
    declarations.push_back(IFC4X3_RC3_types[615]);
    declarations.push_back(IFC4X3_RC3_types[616]);
    declarations.push_back(IFC4X3_RC3_types[617]);
    declarations.push_back(IFC4X3_RC3_types[618]);
    declarations.push_back(IFC4X3_RC3_types[619]);
    declarations.push_back(IFC4X3_RC3_types[620]);
    declarations.push_back(IFC4X3_RC3_types[621]);
    declarations.push_back(IFC4X3_RC3_types[622]);
    declarations.push_back(IFC4X3_RC3_types[623]);
    declarations.push_back(IFC4X3_RC3_types[624]);
    declarations.push_back(IFC4X3_RC3_types[625]);
    declarations.push_back(IFC4X3_RC3_types[626]);
    declarations.push_back(IFC4X3_RC3_types[627]);
    declarations.push_back(IFC4X3_RC3_types[628]);
    declarations.push_back(IFC4X3_RC3_types[629]);
    declarations.push_back(IFC4X3_RC3_types[630]);
    declarations.push_back(IFC4X3_RC3_types[631]);
    declarations.push_back(IFC4X3_RC3_types[632]);
    declarations.push_back(IFC4X3_RC3_types[633]);
    declarations.push_back(IFC4X3_RC3_types[634]);
    declarations.push_back(IFC4X3_RC3_types[635]);
    declarations.push_back(IFC4X3_RC3_types[636]);
    declarations.push_back(IFC4X3_RC3_types[637]);
    declarations.push_back(IFC4X3_RC3_types[638]);
    declarations.push_back(IFC4X3_RC3_types[639]);
    declarations.push_back(IFC4X3_RC3_types[640]);
    declarations.push_back(IFC4X3_RC3_types[641]);
    declarations.push_back(IFC4X3_RC3_types[642]);
    declarations.push_back(IFC4X3_RC3_types[643]);
    declarations.push_back(IFC4X3_RC3_types[644]);
    declarations.push_back(IFC4X3_RC3_types[645]);
    declarations.push_back(IFC4X3_RC3_types[646]);
    declarations.push_back(IFC4X3_RC3_types[647]);
    declarations.push_back(IFC4X3_RC3_types[648]);
    declarations.push_back(IFC4X3_RC3_types[649]);
    declarations.push_back(IFC4X3_RC3_types[650]);
    declarations.push_back(IFC4X3_RC3_types[651]);
    declarations.push_back(IFC4X3_RC3_types[652]);
    declarations.push_back(IFC4X3_RC3_types[653]);
    declarations.push_back(IFC4X3_RC3_types[654]);
    declarations.push_back(IFC4X3_RC3_types[655]);
    declarations.push_back(IFC4X3_RC3_types[656]);
    declarations.push_back(IFC4X3_RC3_types[657]);
    declarations.push_back(IFC4X3_RC3_types[658]);
    declarations.push_back(IFC4X3_RC3_types[659]);
    declarations.push_back(IFC4X3_RC3_types[660]);
    declarations.push_back(IFC4X3_RC3_types[661]);
    declarations.push_back(IFC4X3_RC3_types[662]);
    declarations.push_back(IFC4X3_RC3_types[663]);
    declarations.push_back(IFC4X3_RC3_types[664]);
    declarations.push_back(IFC4X3_RC3_types[665]);
    declarations.push_back(IFC4X3_RC3_types[666]);
    declarations.push_back(IFC4X3_RC3_types[667]);
    declarations.push_back(IFC4X3_RC3_types[668]);
    declarations.push_back(IFC4X3_RC3_types[669]);
    declarations.push_back(IFC4X3_RC3_types[670]);
    declarations.push_back(IFC4X3_RC3_types[671]);
    declarations.push_back(IFC4X3_RC3_types[672]);
    declarations.push_back(IFC4X3_RC3_types[673]);
    declarations.push_back(IFC4X3_RC3_types[674]);
    declarations.push_back(IFC4X3_RC3_types[675]);
    declarations.push_back(IFC4X3_RC3_types[676]);
    declarations.push_back(IFC4X3_RC3_types[677]);
    declarations.push_back(IFC4X3_RC3_types[678]);
    declarations.push_back(IFC4X3_RC3_types[679]);
    declarations.push_back(IFC4X3_RC3_types[680]);
    declarations.push_back(IFC4X3_RC3_types[681]);
    declarations.push_back(IFC4X3_RC3_types[682]);
    declarations.push_back(IFC4X3_RC3_types[683]);
    declarations.push_back(IFC4X3_RC3_types[684]);
    declarations.push_back(IFC4X3_RC3_types[685]);
    declarations.push_back(IFC4X3_RC3_types[686]);
    declarations.push_back(IFC4X3_RC3_types[687]);
    declarations.push_back(IFC4X3_RC3_types[688]);
    declarations.push_back(IFC4X3_RC3_types[689]);
    declarations.push_back(IFC4X3_RC3_types[690]);
    declarations.push_back(IFC4X3_RC3_types[691]);
    declarations.push_back(IFC4X3_RC3_types[692]);
    declarations.push_back(IFC4X3_RC3_types[693]);
    declarations.push_back(IFC4X3_RC3_types[694]);
    declarations.push_back(IFC4X3_RC3_types[695]);
    declarations.push_back(IFC4X3_RC3_types[696]);
    declarations.push_back(IFC4X3_RC3_types[697]);
    declarations.push_back(IFC4X3_RC3_types[698]);
    declarations.push_back(IFC4X3_RC3_types[699]);
    declarations.push_back(IFC4X3_RC3_types[700]);
    declarations.push_back(IFC4X3_RC3_types[701]);
    declarations.push_back(IFC4X3_RC3_types[702]);
    declarations.push_back(IFC4X3_RC3_types[703]);
    declarations.push_back(IFC4X3_RC3_types[704]);
    declarations.push_back(IFC4X3_RC3_types[705]);
    declarations.push_back(IFC4X3_RC3_types[706]);
    declarations.push_back(IFC4X3_RC3_types[707]);
    declarations.push_back(IFC4X3_RC3_types[708]);
    declarations.push_back(IFC4X3_RC3_types[709]);
    declarations.push_back(IFC4X3_RC3_types[710]);
    declarations.push_back(IFC4X3_RC3_types[711]);
    declarations.push_back(IFC4X3_RC3_types[712]);
    declarations.push_back(IFC4X3_RC3_types[713]);
    declarations.push_back(IFC4X3_RC3_types[714]);
    declarations.push_back(IFC4X3_RC3_types[715]);
    declarations.push_back(IFC4X3_RC3_types[716]);
    declarations.push_back(IFC4X3_RC3_types[717]);
    declarations.push_back(IFC4X3_RC3_types[718]);
    declarations.push_back(IFC4X3_RC3_types[719]);
    declarations.push_back(IFC4X3_RC3_types[720]);
    declarations.push_back(IFC4X3_RC3_types[721]);
    declarations.push_back(IFC4X3_RC3_types[722]);
    declarations.push_back(IFC4X3_RC3_types[723]);
    declarations.push_back(IFC4X3_RC3_types[724]);
    declarations.push_back(IFC4X3_RC3_types[725]);
    declarations.push_back(IFC4X3_RC3_types[726]);
    declarations.push_back(IFC4X3_RC3_types[727]);
    declarations.push_back(IFC4X3_RC3_types[728]);
    declarations.push_back(IFC4X3_RC3_types[729]);
    declarations.push_back(IFC4X3_RC3_types[730]);
    declarations.push_back(IFC4X3_RC3_types[731]);
    declarations.push_back(IFC4X3_RC3_types[732]);
    declarations.push_back(IFC4X3_RC3_types[733]);
    declarations.push_back(IFC4X3_RC3_types[734]);
    declarations.push_back(IFC4X3_RC3_types[735]);
    declarations.push_back(IFC4X3_RC3_types[736]);
    declarations.push_back(IFC4X3_RC3_types[737]);
    declarations.push_back(IFC4X3_RC3_types[738]);
    declarations.push_back(IFC4X3_RC3_types[739]);
    declarations.push_back(IFC4X3_RC3_types[740]);
    declarations.push_back(IFC4X3_RC3_types[741]);
    declarations.push_back(IFC4X3_RC3_types[742]);
    declarations.push_back(IFC4X3_RC3_types[743]);
    declarations.push_back(IFC4X3_RC3_types[744]);
    declarations.push_back(IFC4X3_RC3_types[745]);
    declarations.push_back(IFC4X3_RC3_types[746]);
    declarations.push_back(IFC4X3_RC3_types[747]);
    declarations.push_back(IFC4X3_RC3_types[748]);
    declarations.push_back(IFC4X3_RC3_types[749]);
    declarations.push_back(IFC4X3_RC3_types[750]);
    declarations.push_back(IFC4X3_RC3_types[751]);
    declarations.push_back(IFC4X3_RC3_types[752]);
    declarations.push_back(IFC4X3_RC3_types[753]);
    declarations.push_back(IFC4X3_RC3_types[754]);
    declarations.push_back(IFC4X3_RC3_types[755]);
    declarations.push_back(IFC4X3_RC3_types[756]);
    declarations.push_back(IFC4X3_RC3_types[757]);
    declarations.push_back(IFC4X3_RC3_types[758]);
    declarations.push_back(IFC4X3_RC3_types[759]);
    declarations.push_back(IFC4X3_RC3_types[760]);
    declarations.push_back(IFC4X3_RC3_types[761]);
    declarations.push_back(IFC4X3_RC3_types[762]);
    declarations.push_back(IFC4X3_RC3_types[763]);
    declarations.push_back(IFC4X3_RC3_types[764]);
    declarations.push_back(IFC4X3_RC3_types[765]);
    declarations.push_back(IFC4X3_RC3_types[766]);
    declarations.push_back(IFC4X3_RC3_types[767]);
    declarations.push_back(IFC4X3_RC3_types[768]);
    declarations.push_back(IFC4X3_RC3_types[769]);
    declarations.push_back(IFC4X3_RC3_types[770]);
    declarations.push_back(IFC4X3_RC3_types[771]);
    declarations.push_back(IFC4X3_RC3_types[772]);
    declarations.push_back(IFC4X3_RC3_types[773]);
    declarations.push_back(IFC4X3_RC3_types[774]);
    declarations.push_back(IFC4X3_RC3_types[775]);
    declarations.push_back(IFC4X3_RC3_types[776]);
    declarations.push_back(IFC4X3_RC3_types[777]);
    declarations.push_back(IFC4X3_RC3_types[778]);
    declarations.push_back(IFC4X3_RC3_types[779]);
    declarations.push_back(IFC4X3_RC3_types[780]);
    declarations.push_back(IFC4X3_RC3_types[781]);
    declarations.push_back(IFC4X3_RC3_types[782]);
    declarations.push_back(IFC4X3_RC3_types[783]);
    declarations.push_back(IFC4X3_RC3_types[784]);
    declarations.push_back(IFC4X3_RC3_types[785]);
    declarations.push_back(IFC4X3_RC3_types[786]);
    declarations.push_back(IFC4X3_RC3_types[787]);
    declarations.push_back(IFC4X3_RC3_types[788]);
    declarations.push_back(IFC4X3_RC3_types[789]);
    declarations.push_back(IFC4X3_RC3_types[790]);
    declarations.push_back(IFC4X3_RC3_types[791]);
    declarations.push_back(IFC4X3_RC3_types[792]);
    declarations.push_back(IFC4X3_RC3_types[793]);
    declarations.push_back(IFC4X3_RC3_types[794]);
    declarations.push_back(IFC4X3_RC3_types[795]);
    declarations.push_back(IFC4X3_RC3_types[796]);
    declarations.push_back(IFC4X3_RC3_types[797]);
    declarations.push_back(IFC4X3_RC3_types[798]);
    declarations.push_back(IFC4X3_RC3_types[799]);
    declarations.push_back(IFC4X3_RC3_types[800]);
    declarations.push_back(IFC4X3_RC3_types[801]);
    declarations.push_back(IFC4X3_RC3_types[802]);
    declarations.push_back(IFC4X3_RC3_types[803]);
    declarations.push_back(IFC4X3_RC3_types[804]);
    declarations.push_back(IFC4X3_RC3_types[805]);
    declarations.push_back(IFC4X3_RC3_types[806]);
    declarations.push_back(IFC4X3_RC3_types[807]);
    declarations.push_back(IFC4X3_RC3_types[808]);
    declarations.push_back(IFC4X3_RC3_types[809]);
    declarations.push_back(IFC4X3_RC3_types[810]);
    declarations.push_back(IFC4X3_RC3_types[811]);
    declarations.push_back(IFC4X3_RC3_types[812]);
    declarations.push_back(IFC4X3_RC3_types[813]);
    declarations.push_back(IFC4X3_RC3_types[814]);
    declarations.push_back(IFC4X3_RC3_types[815]);
    declarations.push_back(IFC4X3_RC3_types[816]);
    declarations.push_back(IFC4X3_RC3_types[817]);
    declarations.push_back(IFC4X3_RC3_types[818]);
    declarations.push_back(IFC4X3_RC3_types[819]);
    declarations.push_back(IFC4X3_RC3_types[820]);
    declarations.push_back(IFC4X3_RC3_types[821]);
    declarations.push_back(IFC4X3_RC3_types[822]);
    declarations.push_back(IFC4X3_RC3_types[823]);
    declarations.push_back(IFC4X3_RC3_types[824]);
    declarations.push_back(IFC4X3_RC3_types[825]);
    declarations.push_back(IFC4X3_RC3_types[826]);
    declarations.push_back(IFC4X3_RC3_types[827]);
    declarations.push_back(IFC4X3_RC3_types[828]);
    declarations.push_back(IFC4X3_RC3_types[829]);
    declarations.push_back(IFC4X3_RC3_types[830]);
    declarations.push_back(IFC4X3_RC3_types[831]);
    declarations.push_back(IFC4X3_RC3_types[832]);
    declarations.push_back(IFC4X3_RC3_types[833]);
    declarations.push_back(IFC4X3_RC3_types[834]);
    declarations.push_back(IFC4X3_RC3_types[835]);
    declarations.push_back(IFC4X3_RC3_types[836]);
    declarations.push_back(IFC4X3_RC3_types[837]);
    declarations.push_back(IFC4X3_RC3_types[838]);
    declarations.push_back(IFC4X3_RC3_types[839]);
    declarations.push_back(IFC4X3_RC3_types[840]);
    declarations.push_back(IFC4X3_RC3_types[841]);
    declarations.push_back(IFC4X3_RC3_types[842]);
    declarations.push_back(IFC4X3_RC3_types[843]);
    declarations.push_back(IFC4X3_RC3_types[844]);
    declarations.push_back(IFC4X3_RC3_types[845]);
    declarations.push_back(IFC4X3_RC3_types[846]);
    declarations.push_back(IFC4X3_RC3_types[847]);
    declarations.push_back(IFC4X3_RC3_types[848]);
    declarations.push_back(IFC4X3_RC3_types[849]);
    declarations.push_back(IFC4X3_RC3_types[850]);
    declarations.push_back(IFC4X3_RC3_types[851]);
    declarations.push_back(IFC4X3_RC3_types[852]);
    declarations.push_back(IFC4X3_RC3_types[853]);
    declarations.push_back(IFC4X3_RC3_types[854]);
    declarations.push_back(IFC4X3_RC3_types[855]);
    declarations.push_back(IFC4X3_RC3_types[856]);
    declarations.push_back(IFC4X3_RC3_types[857]);
    declarations.push_back(IFC4X3_RC3_types[858]);
    declarations.push_back(IFC4X3_RC3_types[859]);
    declarations.push_back(IFC4X3_RC3_types[860]);
    declarations.push_back(IFC4X3_RC3_types[861]);
    declarations.push_back(IFC4X3_RC3_types[862]);
    declarations.push_back(IFC4X3_RC3_types[863]);
    declarations.push_back(IFC4X3_RC3_types[864]);
    declarations.push_back(IFC4X3_RC3_types[865]);
    declarations.push_back(IFC4X3_RC3_types[866]);
    declarations.push_back(IFC4X3_RC3_types[867]);
    declarations.push_back(IFC4X3_RC3_types[868]);
    declarations.push_back(IFC4X3_RC3_types[869]);
    declarations.push_back(IFC4X3_RC3_types[870]);
    declarations.push_back(IFC4X3_RC3_types[871]);
    declarations.push_back(IFC4X3_RC3_types[872]);
    declarations.push_back(IFC4X3_RC3_types[873]);
    declarations.push_back(IFC4X3_RC3_types[874]);
    declarations.push_back(IFC4X3_RC3_types[875]);
    declarations.push_back(IFC4X3_RC3_types[876]);
    declarations.push_back(IFC4X3_RC3_types[877]);
    declarations.push_back(IFC4X3_RC3_types[878]);
    declarations.push_back(IFC4X3_RC3_types[879]);
    declarations.push_back(IFC4X3_RC3_types[880]);
    declarations.push_back(IFC4X3_RC3_types[881]);
    declarations.push_back(IFC4X3_RC3_types[882]);
    declarations.push_back(IFC4X3_RC3_types[883]);
    declarations.push_back(IFC4X3_RC3_types[884]);
    declarations.push_back(IFC4X3_RC3_types[885]);
    declarations.push_back(IFC4X3_RC3_types[886]);
    declarations.push_back(IFC4X3_RC3_types[887]);
    declarations.push_back(IFC4X3_RC3_types[888]);
    declarations.push_back(IFC4X3_RC3_types[889]);
    declarations.push_back(IFC4X3_RC3_types[890]);
    declarations.push_back(IFC4X3_RC3_types[891]);
    declarations.push_back(IFC4X3_RC3_types[892]);
    declarations.push_back(IFC4X3_RC3_types[893]);
    declarations.push_back(IFC4X3_RC3_types[894]);
    declarations.push_back(IFC4X3_RC3_types[895]);
    declarations.push_back(IFC4X3_RC3_types[896]);
    declarations.push_back(IFC4X3_RC3_types[897]);
    declarations.push_back(IFC4X3_RC3_types[898]);
    declarations.push_back(IFC4X3_RC3_types[899]);
    declarations.push_back(IFC4X3_RC3_types[900]);
    declarations.push_back(IFC4X3_RC3_types[901]);
    declarations.push_back(IFC4X3_RC3_types[902]);
    declarations.push_back(IFC4X3_RC3_types[903]);
    declarations.push_back(IFC4X3_RC3_types[904]);
    declarations.push_back(IFC4X3_RC3_types[905]);
    declarations.push_back(IFC4X3_RC3_types[906]);
    declarations.push_back(IFC4X3_RC3_types[907]);
    declarations.push_back(IFC4X3_RC3_types[908]);
    declarations.push_back(IFC4X3_RC3_types[909]);
    declarations.push_back(IFC4X3_RC3_types[910]);
    declarations.push_back(IFC4X3_RC3_types[911]);
    declarations.push_back(IFC4X3_RC3_types[912]);
    declarations.push_back(IFC4X3_RC3_types[913]);
    declarations.push_back(IFC4X3_RC3_types[914]);
    declarations.push_back(IFC4X3_RC3_types[915]);
    declarations.push_back(IFC4X3_RC3_types[916]);
    declarations.push_back(IFC4X3_RC3_types[917]);
    declarations.push_back(IFC4X3_RC3_types[918]);
    declarations.push_back(IFC4X3_RC3_types[919]);
    declarations.push_back(IFC4X3_RC3_types[920]);
    declarations.push_back(IFC4X3_RC3_types[921]);
    declarations.push_back(IFC4X3_RC3_types[922]);
    declarations.push_back(IFC4X3_RC3_types[923]);
    declarations.push_back(IFC4X3_RC3_types[924]);
    declarations.push_back(IFC4X3_RC3_types[925]);
    declarations.push_back(IFC4X3_RC3_types[926]);
    declarations.push_back(IFC4X3_RC3_types[927]);
    declarations.push_back(IFC4X3_RC3_types[928]);
    declarations.push_back(IFC4X3_RC3_types[929]);
    declarations.push_back(IFC4X3_RC3_types[930]);
    declarations.push_back(IFC4X3_RC3_types[931]);
    declarations.push_back(IFC4X3_RC3_types[932]);
    declarations.push_back(IFC4X3_RC3_types[933]);
    declarations.push_back(IFC4X3_RC3_types[934]);
    declarations.push_back(IFC4X3_RC3_types[935]);
    declarations.push_back(IFC4X3_RC3_types[936]);
    declarations.push_back(IFC4X3_RC3_types[937]);
    declarations.push_back(IFC4X3_RC3_types[938]);
    declarations.push_back(IFC4X3_RC3_types[939]);
    declarations.push_back(IFC4X3_RC3_types[940]);
    declarations.push_back(IFC4X3_RC3_types[941]);
    declarations.push_back(IFC4X3_RC3_types[942]);
    declarations.push_back(IFC4X3_RC3_types[943]);
    declarations.push_back(IFC4X3_RC3_types[944]);
    declarations.push_back(IFC4X3_RC3_types[945]);
    declarations.push_back(IFC4X3_RC3_types[946]);
    declarations.push_back(IFC4X3_RC3_types[947]);
    declarations.push_back(IFC4X3_RC3_types[948]);
    declarations.push_back(IFC4X3_RC3_types[949]);
    declarations.push_back(IFC4X3_RC3_types[950]);
    declarations.push_back(IFC4X3_RC3_types[951]);
    declarations.push_back(IFC4X3_RC3_types[952]);
    declarations.push_back(IFC4X3_RC3_types[953]);
    declarations.push_back(IFC4X3_RC3_types[954]);
    declarations.push_back(IFC4X3_RC3_types[955]);
    declarations.push_back(IFC4X3_RC3_types[956]);
    declarations.push_back(IFC4X3_RC3_types[957]);
    declarations.push_back(IFC4X3_RC3_types[958]);
    declarations.push_back(IFC4X3_RC3_types[959]);
    declarations.push_back(IFC4X3_RC3_types[960]);
    declarations.push_back(IFC4X3_RC3_types[961]);
    declarations.push_back(IFC4X3_RC3_types[962]);
    declarations.push_back(IFC4X3_RC3_types[963]);
    declarations.push_back(IFC4X3_RC3_types[964]);
    declarations.push_back(IFC4X3_RC3_types[965]);
    declarations.push_back(IFC4X3_RC3_types[966]);
    declarations.push_back(IFC4X3_RC3_types[967]);
    declarations.push_back(IFC4X3_RC3_types[968]);
    declarations.push_back(IFC4X3_RC3_types[969]);
    declarations.push_back(IFC4X3_RC3_types[970]);
    declarations.push_back(IFC4X3_RC3_types[971]);
    declarations.push_back(IFC4X3_RC3_types[972]);
    declarations.push_back(IFC4X3_RC3_types[973]);
    declarations.push_back(IFC4X3_RC3_types[974]);
    declarations.push_back(IFC4X3_RC3_types[975]);
    declarations.push_back(IFC4X3_RC3_types[976]);
    declarations.push_back(IFC4X3_RC3_types[977]);
    declarations.push_back(IFC4X3_RC3_types[978]);
    declarations.push_back(IFC4X3_RC3_types[979]);
    declarations.push_back(IFC4X3_RC3_types[980]);
    declarations.push_back(IFC4X3_RC3_types[981]);
    declarations.push_back(IFC4X3_RC3_types[982]);
    declarations.push_back(IFC4X3_RC3_types[983]);
    declarations.push_back(IFC4X3_RC3_types[984]);
    declarations.push_back(IFC4X3_RC3_types[985]);
    declarations.push_back(IFC4X3_RC3_types[986]);
    declarations.push_back(IFC4X3_RC3_types[987]);
    declarations.push_back(IFC4X3_RC3_types[988]);
    declarations.push_back(IFC4X3_RC3_types[989]);
    declarations.push_back(IFC4X3_RC3_types[990]);
    declarations.push_back(IFC4X3_RC3_types[991]);
    declarations.push_back(IFC4X3_RC3_types[992]);
    declarations.push_back(IFC4X3_RC3_types[993]);
    declarations.push_back(IFC4X3_RC3_types[994]);
    declarations.push_back(IFC4X3_RC3_types[995]);
    declarations.push_back(IFC4X3_RC3_types[996]);
    declarations.push_back(IFC4X3_RC3_types[997]);
    declarations.push_back(IFC4X3_RC3_types[998]);
    declarations.push_back(IFC4X3_RC3_types[999]);
    declarations.push_back(IFC4X3_RC3_types[1000]);
    declarations.push_back(IFC4X3_RC3_types[1001]);
    declarations.push_back(IFC4X3_RC3_types[1002]);
    declarations.push_back(IFC4X3_RC3_types[1003]);
    declarations.push_back(IFC4X3_RC3_types[1004]);
    declarations.push_back(IFC4X3_RC3_types[1005]);
    declarations.push_back(IFC4X3_RC3_types[1006]);
    declarations.push_back(IFC4X3_RC3_types[1007]);
    declarations.push_back(IFC4X3_RC3_types[1008]);
    declarations.push_back(IFC4X3_RC3_types[1009]);
    declarations.push_back(IFC4X3_RC3_types[1010]);
    declarations.push_back(IFC4X3_RC3_types[1011]);
    declarations.push_back(IFC4X3_RC3_types[1012]);
    declarations.push_back(IFC4X3_RC3_types[1013]);
    declarations.push_back(IFC4X3_RC3_types[1014]);
    declarations.push_back(IFC4X3_RC3_types[1015]);
    declarations.push_back(IFC4X3_RC3_types[1016]);
    declarations.push_back(IFC4X3_RC3_types[1017]);
    declarations.push_back(IFC4X3_RC3_types[1018]);
    declarations.push_back(IFC4X3_RC3_types[1019]);
    declarations.push_back(IFC4X3_RC3_types[1020]);
    declarations.push_back(IFC4X3_RC3_types[1021]);
    declarations.push_back(IFC4X3_RC3_types[1022]);
    declarations.push_back(IFC4X3_RC3_types[1023]);
    declarations.push_back(IFC4X3_RC3_types[1024]);
    declarations.push_back(IFC4X3_RC3_types[1025]);
    declarations.push_back(IFC4X3_RC3_types[1026]);
    declarations.push_back(IFC4X3_RC3_types[1027]);
    declarations.push_back(IFC4X3_RC3_types[1028]);
    declarations.push_back(IFC4X3_RC3_types[1029]);
    declarations.push_back(IFC4X3_RC3_types[1030]);
    declarations.push_back(IFC4X3_RC3_types[1031]);
    declarations.push_back(IFC4X3_RC3_types[1032]);
    declarations.push_back(IFC4X3_RC3_types[1033]);
    declarations.push_back(IFC4X3_RC3_types[1034]);
    declarations.push_back(IFC4X3_RC3_types[1035]);
    declarations.push_back(IFC4X3_RC3_types[1036]);
    declarations.push_back(IFC4X3_RC3_types[1037]);
    declarations.push_back(IFC4X3_RC3_types[1038]);
    declarations.push_back(IFC4X3_RC3_types[1039]);
    declarations.push_back(IFC4X3_RC3_types[1040]);
    declarations.push_back(IFC4X3_RC3_types[1041]);
    declarations.push_back(IFC4X3_RC3_types[1042]);
    declarations.push_back(IFC4X3_RC3_types[1043]);
    declarations.push_back(IFC4X3_RC3_types[1044]);
    declarations.push_back(IFC4X3_RC3_types[1045]);
    declarations.push_back(IFC4X3_RC3_types[1046]);
    declarations.push_back(IFC4X3_RC3_types[1047]);
    declarations.push_back(IFC4X3_RC3_types[1048]);
    declarations.push_back(IFC4X3_RC3_types[1049]);
    declarations.push_back(IFC4X3_RC3_types[1050]);
    declarations.push_back(IFC4X3_RC3_types[1051]);
    declarations.push_back(IFC4X3_RC3_types[1052]);
    declarations.push_back(IFC4X3_RC3_types[1053]);
    declarations.push_back(IFC4X3_RC3_types[1054]);
    declarations.push_back(IFC4X3_RC3_types[1055]);
    declarations.push_back(IFC4X3_RC3_types[1056]);
    declarations.push_back(IFC4X3_RC3_types[1057]);
    declarations.push_back(IFC4X3_RC3_types[1058]);
    declarations.push_back(IFC4X3_RC3_types[1059]);
    declarations.push_back(IFC4X3_RC3_types[1060]);
    declarations.push_back(IFC4X3_RC3_types[1061]);
    declarations.push_back(IFC4X3_RC3_types[1062]);
    declarations.push_back(IFC4X3_RC3_types[1063]);
    declarations.push_back(IFC4X3_RC3_types[1064]);
    declarations.push_back(IFC4X3_RC3_types[1065]);
    declarations.push_back(IFC4X3_RC3_types[1066]);
    declarations.push_back(IFC4X3_RC3_types[1067]);
    declarations.push_back(IFC4X3_RC3_types[1068]);
    declarations.push_back(IFC4X3_RC3_types[1069]);
    declarations.push_back(IFC4X3_RC3_types[1070]);
    declarations.push_back(IFC4X3_RC3_types[1071]);
    declarations.push_back(IFC4X3_RC3_types[1072]);
    declarations.push_back(IFC4X3_RC3_types[1073]);
    declarations.push_back(IFC4X3_RC3_types[1074]);
    declarations.push_back(IFC4X3_RC3_types[1075]);
    declarations.push_back(IFC4X3_RC3_types[1076]);
    declarations.push_back(IFC4X3_RC3_types[1077]);
    declarations.push_back(IFC4X3_RC3_types[1078]);
    declarations.push_back(IFC4X3_RC3_types[1079]);
    declarations.push_back(IFC4X3_RC3_types[1080]);
    declarations.push_back(IFC4X3_RC3_types[1081]);
    declarations.push_back(IFC4X3_RC3_types[1082]);
    declarations.push_back(IFC4X3_RC3_types[1083]);
    declarations.push_back(IFC4X3_RC3_types[1084]);
    declarations.push_back(IFC4X3_RC3_types[1085]);
    declarations.push_back(IFC4X3_RC3_types[1086]);
    declarations.push_back(IFC4X3_RC3_types[1087]);
    declarations.push_back(IFC4X3_RC3_types[1088]);
    declarations.push_back(IFC4X3_RC3_types[1089]);
    declarations.push_back(IFC4X3_RC3_types[1090]);
    declarations.push_back(IFC4X3_RC3_types[1091]);
    declarations.push_back(IFC4X3_RC3_types[1092]);
    declarations.push_back(IFC4X3_RC3_types[1093]);
    declarations.push_back(IFC4X3_RC3_types[1094]);
    declarations.push_back(IFC4X3_RC3_types[1095]);
    declarations.push_back(IFC4X3_RC3_types[1096]);
    declarations.push_back(IFC4X3_RC3_types[1097]);
    declarations.push_back(IFC4X3_RC3_types[1098]);
    declarations.push_back(IFC4X3_RC3_types[1099]);
    declarations.push_back(IFC4X3_RC3_types[1100]);
    declarations.push_back(IFC4X3_RC3_types[1101]);
    declarations.push_back(IFC4X3_RC3_types[1102]);
    declarations.push_back(IFC4X3_RC3_types[1103]);
    declarations.push_back(IFC4X3_RC3_types[1104]);
    declarations.push_back(IFC4X3_RC3_types[1105]);
    declarations.push_back(IFC4X3_RC3_types[1106]);
    declarations.push_back(IFC4X3_RC3_types[1107]);
    declarations.push_back(IFC4X3_RC3_types[1108]);
    declarations.push_back(IFC4X3_RC3_types[1109]);
    declarations.push_back(IFC4X3_RC3_types[1110]);
    declarations.push_back(IFC4X3_RC3_types[1111]);
    declarations.push_back(IFC4X3_RC3_types[1112]);
    declarations.push_back(IFC4X3_RC3_types[1113]);
    declarations.push_back(IFC4X3_RC3_types[1114]);
    declarations.push_back(IFC4X3_RC3_types[1115]);
    declarations.push_back(IFC4X3_RC3_types[1116]);
    declarations.push_back(IFC4X3_RC3_types[1117]);
    declarations.push_back(IFC4X3_RC3_types[1118]);
    declarations.push_back(IFC4X3_RC3_types[1119]);
    declarations.push_back(IFC4X3_RC3_types[1120]);
    declarations.push_back(IFC4X3_RC3_types[1121]);
    declarations.push_back(IFC4X3_RC3_types[1122]);
    declarations.push_back(IFC4X3_RC3_types[1123]);
    declarations.push_back(IFC4X3_RC3_types[1124]);
    declarations.push_back(IFC4X3_RC3_types[1125]);
    declarations.push_back(IFC4X3_RC3_types[1126]);
    declarations.push_back(IFC4X3_RC3_types[1127]);
    declarations.push_back(IFC4X3_RC3_types[1128]);
    declarations.push_back(IFC4X3_RC3_types[1129]);
    declarations.push_back(IFC4X3_RC3_types[1130]);
    declarations.push_back(IFC4X3_RC3_types[1131]);
    declarations.push_back(IFC4X3_RC3_types[1132]);
    declarations.push_back(IFC4X3_RC3_types[1133]);
    declarations.push_back(IFC4X3_RC3_types[1134]);
    declarations.push_back(IFC4X3_RC3_types[1135]);
    declarations.push_back(IFC4X3_RC3_types[1136]);
    declarations.push_back(IFC4X3_RC3_types[1137]);
    declarations.push_back(IFC4X3_RC3_types[1138]);
    declarations.push_back(IFC4X3_RC3_types[1139]);
    declarations.push_back(IFC4X3_RC3_types[1140]);
    declarations.push_back(IFC4X3_RC3_types[1141]);
    declarations.push_back(IFC4X3_RC3_types[1142]);
    declarations.push_back(IFC4X3_RC3_types[1143]);
    declarations.push_back(IFC4X3_RC3_types[1144]);
    declarations.push_back(IFC4X3_RC3_types[1145]);
    declarations.push_back(IFC4X3_RC3_types[1146]);
    declarations.push_back(IFC4X3_RC3_types[1147]);
    declarations.push_back(IFC4X3_RC3_types[1148]);
    declarations.push_back(IFC4X3_RC3_types[1149]);
    declarations.push_back(IFC4X3_RC3_types[1150]);
    declarations.push_back(IFC4X3_RC3_types[1151]);
    declarations.push_back(IFC4X3_RC3_types[1152]);
    declarations.push_back(IFC4X3_RC3_types[1153]);
    declarations.push_back(IFC4X3_RC3_types[1154]);
    declarations.push_back(IFC4X3_RC3_types[1155]);
    declarations.push_back(IFC4X3_RC3_types[1156]);
    declarations.push_back(IFC4X3_RC3_types[1157]);
    declarations.push_back(IFC4X3_RC3_types[1158]);
    declarations.push_back(IFC4X3_RC3_types[1159]);
    declarations.push_back(IFC4X3_RC3_types[1160]);
    declarations.push_back(IFC4X3_RC3_types[1161]);
    declarations.push_back(IFC4X3_RC3_types[1162]);
    declarations.push_back(IFC4X3_RC3_types[1163]);
    declarations.push_back(IFC4X3_RC3_types[1164]);
    declarations.push_back(IFC4X3_RC3_types[1165]);
    declarations.push_back(IFC4X3_RC3_types[1166]);
    declarations.push_back(IFC4X3_RC3_types[1167]);
    declarations.push_back(IFC4X3_RC3_types[1168]);
    declarations.push_back(IFC4X3_RC3_types[1169]);
    declarations.push_back(IFC4X3_RC3_types[1170]);
    declarations.push_back(IFC4X3_RC3_types[1171]);
    declarations.push_back(IFC4X3_RC3_types[1172]);
    declarations.push_back(IFC4X3_RC3_types[1173]);
    declarations.push_back(IFC4X3_RC3_types[1174]);
    declarations.push_back(IFC4X3_RC3_types[1175]);
    declarations.push_back(IFC4X3_RC3_types[1176]);
    declarations.push_back(IFC4X3_RC3_types[1177]);
    declarations.push_back(IFC4X3_RC3_types[1178]);
    declarations.push_back(IFC4X3_RC3_types[1179]);
    declarations.push_back(IFC4X3_RC3_types[1180]);
    declarations.push_back(IFC4X3_RC3_types[1181]);
    declarations.push_back(IFC4X3_RC3_types[1182]);
    declarations.push_back(IFC4X3_RC3_types[1183]);
    declarations.push_back(IFC4X3_RC3_types[1184]);
    declarations.push_back(IFC4X3_RC3_types[1185]);
    declarations.push_back(IFC4X3_RC3_types[1186]);
    declarations.push_back(IFC4X3_RC3_types[1187]);
    declarations.push_back(IFC4X3_RC3_types[1188]);
    declarations.push_back(IFC4X3_RC3_types[1189]);
    declarations.push_back(IFC4X3_RC3_types[1190]);
    declarations.push_back(IFC4X3_RC3_types[1191]);
    declarations.push_back(IFC4X3_RC3_types[1192]);
    declarations.push_back(IFC4X3_RC3_types[1193]);
    declarations.push_back(IFC4X3_RC3_types[1194]);
    declarations.push_back(IFC4X3_RC3_types[1195]);
    declarations.push_back(IFC4X3_RC3_types[1196]);
    declarations.push_back(IFC4X3_RC3_types[1197]);
    declarations.push_back(IFC4X3_RC3_types[1198]);
    declarations.push_back(IFC4X3_RC3_types[1199]);
    declarations.push_back(IFC4X3_RC3_types[1200]);
    declarations.push_back(IFC4X3_RC3_types[1201]);
    declarations.push_back(IFC4X3_RC3_types[1202]);
    declarations.push_back(IFC4X3_RC3_types[1203]);
    declarations.push_back(IFC4X3_RC3_types[1204]);
    declarations.push_back(IFC4X3_RC3_types[1205]);
    declarations.push_back(IFC4X3_RC3_types[1206]);
    declarations.push_back(IFC4X3_RC3_types[1207]);
    declarations.push_back(IFC4X3_RC3_types[1208]);
    declarations.push_back(IFC4X3_RC3_types[1209]);
    declarations.push_back(IFC4X3_RC3_types[1210]);
    declarations.push_back(IFC4X3_RC3_types[1211]);
    declarations.push_back(IFC4X3_RC3_types[1212]);
    declarations.push_back(IFC4X3_RC3_types[1213]);
    declarations.push_back(IFC4X3_RC3_types[1214]);
    declarations.push_back(IFC4X3_RC3_types[1215]);
    declarations.push_back(IFC4X3_RC3_types[1216]);
    declarations.push_back(IFC4X3_RC3_types[1217]);
    declarations.push_back(IFC4X3_RC3_types[1218]);
    declarations.push_back(IFC4X3_RC3_types[1219]);
    declarations.push_back(IFC4X3_RC3_types[1220]);
    declarations.push_back(IFC4X3_RC3_types[1221]);
    declarations.push_back(IFC4X3_RC3_types[1222]);
    declarations.push_back(IFC4X3_RC3_types[1223]);
    declarations.push_back(IFC4X3_RC3_types[1224]);
    declarations.push_back(IFC4X3_RC3_types[1225]);
    declarations.push_back(IFC4X3_RC3_types[1226]);
    declarations.push_back(IFC4X3_RC3_types[1227]);
    declarations.push_back(IFC4X3_RC3_types[1228]);
    declarations.push_back(IFC4X3_RC3_types[1229]);
    declarations.push_back(IFC4X3_RC3_types[1230]);
    declarations.push_back(IFC4X3_RC3_types[1231]);
    declarations.push_back(IFC4X3_RC3_types[1232]);
    declarations.push_back(IFC4X3_RC3_types[1233]);
    declarations.push_back(IFC4X3_RC3_types[1234]);
    declarations.push_back(IFC4X3_RC3_types[1235]);
    declarations.push_back(IFC4X3_RC3_types[1236]);
    declarations.push_back(IFC4X3_RC3_types[1237]);
    declarations.push_back(IFC4X3_RC3_types[1238]);
    declarations.push_back(IFC4X3_RC3_types[1239]);
    declarations.push_back(IFC4X3_RC3_types[1240]);
    declarations.push_back(IFC4X3_RC3_types[1241]);
    declarations.push_back(IFC4X3_RC3_types[1242]);
    declarations.push_back(IFC4X3_RC3_types[1243]);
    declarations.push_back(IFC4X3_RC3_types[1244]);
    declarations.push_back(IFC4X3_RC3_types[1245]);
    declarations.push_back(IFC4X3_RC3_types[1246]);
    declarations.push_back(IFC4X3_RC3_types[1247]);
    declarations.push_back(IFC4X3_RC3_types[1248]);
    declarations.push_back(IFC4X3_RC3_types[1249]);
    declarations.push_back(IFC4X3_RC3_types[1250]);
    declarations.push_back(IFC4X3_RC3_types[1251]);
    declarations.push_back(IFC4X3_RC3_types[1252]);
    declarations.push_back(IFC4X3_RC3_types[1253]);
    declarations.push_back(IFC4X3_RC3_types[1254]);
    declarations.push_back(IFC4X3_RC3_types[1255]);
    declarations.push_back(IFC4X3_RC3_types[1256]);
    declarations.push_back(IFC4X3_RC3_types[1257]);
    declarations.push_back(IFC4X3_RC3_types[1258]);
    declarations.push_back(IFC4X3_RC3_types[1259]);
    declarations.push_back(IFC4X3_RC3_types[1260]);
    declarations.push_back(IFC4X3_RC3_types[1261]);
    declarations.push_back(IFC4X3_RC3_types[1262]);
    declarations.push_back(IFC4X3_RC3_types[1263]);
    declarations.push_back(IFC4X3_RC3_types[1264]);
    declarations.push_back(IFC4X3_RC3_types[1265]);
    declarations.push_back(IFC4X3_RC3_types[1266]);
    declarations.push_back(IFC4X3_RC3_types[1267]);
    declarations.push_back(IFC4X3_RC3_types[1268]);
    declarations.push_back(IFC4X3_RC3_types[1269]);
    declarations.push_back(IFC4X3_RC3_types[1270]);
    declarations.push_back(IFC4X3_RC3_types[1271]);
    declarations.push_back(IFC4X3_RC3_types[1272]);
    declarations.push_back(IFC4X3_RC3_types[1273]);
    declarations.push_back(IFC4X3_RC3_types[1274]);
    declarations.push_back(IFC4X3_RC3_types[1275]);
    declarations.push_back(IFC4X3_RC3_types[1276]);
    declarations.push_back(IFC4X3_RC3_types[1277]);
    declarations.push_back(IFC4X3_RC3_types[1278]);
    declarations.push_back(IFC4X3_RC3_types[1279]);
    declarations.push_back(IFC4X3_RC3_types[1280]);
    declarations.push_back(IFC4X3_RC3_types[1281]);
    declarations.push_back(IFC4X3_RC3_types[1282]);
    declarations.push_back(IFC4X3_RC3_types[1283]);
    declarations.push_back(IFC4X3_RC3_types[1284]);
    declarations.push_back(IFC4X3_RC3_types[1285]);
    declarations.push_back(IFC4X3_RC3_types[1286]);
    declarations.push_back(IFC4X3_RC3_types[1287]);
    declarations.push_back(IFC4X3_RC3_types[1288]);
    declarations.push_back(IFC4X3_RC3_types[1289]);
    declarations.push_back(IFC4X3_RC3_types[1290]);
    declarations.push_back(IFC4X3_RC3_types[1291]);
    declarations.push_back(IFC4X3_RC3_types[1292]);
    declarations.push_back(IFC4X3_RC3_types[1293]);
    declarations.push_back(IFC4X3_RC3_types[1294]);
    declarations.push_back(IFC4X3_RC3_types[1295]);
    declarations.push_back(IFC4X3_RC3_types[1296]);
    declarations.push_back(IFC4X3_RC3_types[1297]);
    declarations.push_back(IFC4X3_RC3_types[1298]);
    declarations.push_back(IFC4X3_RC3_types[1299]);
    declarations.push_back(IFC4X3_RC3_types[1300]);
    declarations.push_back(IFC4X3_RC3_types[1301]);
    declarations.push_back(IFC4X3_RC3_types[1302]);
    declarations.push_back(IFC4X3_RC3_types[1303]);
    declarations.push_back(IFC4X3_RC3_types[1304]);
    declarations.push_back(IFC4X3_RC3_types[1305]);
    declarations.push_back(IFC4X3_RC3_types[1306]);
    declarations.push_back(IFC4X3_RC3_types[1307]);
    declarations.push_back(IFC4X3_RC3_types[1308]);
    declarations.push_back(IFC4X3_RC3_types[1309]);
    declarations.push_back(IFC4X3_RC3_types[1310]);
    declarations.push_back(IFC4X3_RC3_types[1311]);
    declarations.push_back(IFC4X3_RC3_types[1312]);
    declarations.push_back(IFC4X3_RC3_types[1313]);
    declarations.push_back(IFC4X3_RC3_types[1314]);
    declarations.push_back(IFC4X3_RC3_types[1315]);
    declarations.push_back(IFC4X3_RC3_types[1316]);
    return new schema_definition("IFC4X3_RC3", declarations, new IFC4X3_RC3_instance_factory());
}


#if defined(__clang__)
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC pop_options
#elif defined(_MSC_VER)
#pragma optimize("", on)
#endif
        
static std::unique_ptr<schema_definition> schema;

void Ifc4x3_rc3::clear_schema() {
    schema.reset();
}

const schema_definition& Ifc4x3_rc3::get_schema() {
    if (!schema) {
        schema.reset(IFC4X3_RC3_populate_schema());
    }
    return *schema;
}

